"use strict";(self.webpackChunkpcsx_2_net=self.webpackChunkpcsx_2_net||[]).push([[7639],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},54751:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={authors:["bositman"],date:new Date("2015-08-17T00:00:00.000Z"),description:"Hello everyone! Welcome to PCSX2's July-August 2015 progress report!",draft:!1,tags:["progress-report"],title:"July-August 2015 Progress Report"},i=void 0,s={permalink:"/blog/2015/july-august-2015-progress-report",editUrl:"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/july-august-2015-progress-report/index.mdx",source:"@site/blog/2015/july-august-2015-progress-report/index.mdx",title:"July-August 2015 Progress Report",description:"Hello everyone! Welcome to PCSX2's July-August 2015 progress report!",date:"2015-08-17T00:00:00.000Z",formattedDate:"August 17, 2015",tags:[{label:"progress-report",permalink:"/blog/tags/progress-report"}],readingTime:8.47,hasTruncateMarker:!0,authors:[{name:"Bositman",url:"https://github.com/bositman",imageURL:"https://github.com/bositman.png",key:"bositman"}],frontMatter:{authors:["bositman"],date:"2015-08-17T00:00:00.000Z",description:"Hello everyone! Welcome to PCSX2's July-August 2015 progress report!",draft:!1,tags:["progress-report"],title:"July-August 2015 Progress Report"},prevItem:{title:"September 2015 Progress Report",permalink:"/blog/2015/september-2015-progress-report"},nextItem:{title:"June 2015 Progress Report",permalink:"/blog/2015/june-2015-progress-report"}},l={authorsImageUrls:[void 0]},p=[{value:"Blending unit accuracy options",id:"blending-unit-accuracy-options",level:2},{value:"Implement an ultra accurate blending feature in high accurate blending with a small performance hit",id:"implement-an-ultra-accurate-blending-feature-in-high-accurate-blending-with-a-small-performance-hit",level:2},{value:"HDR colclip",id:"hdr-colclip",level:2},{value:"Software renderer fixes",id:"software-renderer-fixes",level:2},{value:"GSdx: Post-processing updates",id:"gsdx-post-processing-updates",level:2},{value:"Folder memory cards",id:"folder-memory-cards",level:2},{value:"Upgrade to wxWidgets 3 for Windows-GUI fixes",id:"upgrade-to-wxwidgets-3-for-windows-gui-fixes",level:2},{value:"Dual Shock 3 support for OnePad in Linux",id:"dual-shock-3-support-for-onepad-in-linux",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=d("SliderCompare"),c=d("Image"),h={toc:p};function m(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(62830).Z,width:"562",height:"104"})),(0,r.kt)("p",null,"Hello everyone! Welcome to PCSX2's July-August 2015 progress report!\nSince we were late again we'll include the first half of August in this report as well. So sit\nback, buckle up and hold on as we go over the changes that happened in\nthe months of July and August! First we will go over some more magic in\nthe realm of GSdx."),(0,r.kt)("p",null,"This was given a brief mention last month, but I wanted to go over it in\na little more detail because it is so important. Along with all the\nchanges you've read about in GSdx lately (if you've been following our\nreports), ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/pull/628"},"GSdx was bumped to version\n1.0")," . In the OpenGL backend\nthis negated the need for many game specific hacks. The hacks are still\npresent however, as they are still needed for the Direct3D backends.\nOnce someone ports some of the new changes over to Direct3D they will be\nable to be removed entirely. The hacks in question skip many different\ntypes of effects that were broken until Gregory worked his magic things\nlike fog, shadows, special shading, brightness, coloring and so on. With\nthe new accurate options, not only are those hacks no longer needed but\nthe effects in question now render correctly. You can take a look back\nat our two previous reports for some screenshot examples of that. I'd\nlike to give a big shout out to Gregory for his massive improvements to\nGSdx lately. It was very recently that the OpenGL backend was far\ninferior to the Direct3D ones, but that isn't the case anymore. The\naccuracy of GSdx OpenGL has improved by leaps and bounds lately and it\nis now far more accurate than the Direct3D backends."),(0,r.kt)("p",null,"In more exciting news, the creator of GSdx,\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gabest11"},"Gabest")," has showed up once more and\nalready begun fixing bugs or speeding up things, we hope he'll stick\naround more this time. Welcome back!"),(0,r.kt)("p",null,"Speaking of that, there were a few more improvements in July/August so\nlets take a look at those!"),(0,r.kt)("h1",{id:"gsdx"},"GSdx"),(0,r.kt)("h2",{id:"blending-unit-accuracy-options"},"Blending unit accuracy options"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ssakash"},"ssakash")," & ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/gregory38"},"Gregory"))),(0,r.kt)("p",null,"With the added accurate options in the OpenGL renderer, we had to group\nand clarify them in the GUI. A new dropdown was added with 6 accurate\nblending options from None to Ultra (note that Full and Ultra have\ninsane CPU requirements!), so our users can choose which to use\ndepending on the game and the power of their PCs"),(0,r.kt)("p",null,"Relevant commit:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/commit/68833e10d142734d5bccad6f5b71a32e84a83a76"},"Gsdx-gui: Accurate blending unit for\nWindows")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"implement-an-ultra-accurate-blending-feature-in-high-accurate-blending-with-a-small-performance-hit"},"Implement an ultra accurate blending feature in high accurate blending with a small performance hit"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/gregory38"},"Gregory"))),(0,r.kt)("p",null,"Some users noticed that the ultra accurate blending mode was needed to\nproperly emulate the distance fog in God of War but it was really too\nslow (and never meant to be used anyway). After debugging, it was found\nthat God of War uses a blending with the alpha of the destination to\nemulate the fog. Very few draw calls use the alpha of the destination so\nthey are now incorporated in the high accurate blending level with a\nsmall performance hit."),(0,r.kt)("p",null,"Relevant commit:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/commit/a0edcb58af8c725ef778ac343c9c72ebb8040217"},"Gsdx-ogl: extend cclip blending level with destination alpha\nblending")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"hdr-colclip"},"HDR colclip"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/gregory38"},"Gregory"))),(0,r.kt)("p",null,"HDR (AKA High Dynamic range rendering) is useful for calculations done\non a larger dynamic range, which is more accurate to be used on these\nscenarios since the PS2 also made use of HDR rendering. HDR allows to\nrepresent a wider range of colors so the shading algorithms have\naccurate color information for all the objects which is quite useful\nsince it's needed for accurate reproduction of some lightning and bloom\neffects."),(0,r.kt)("p",null,"Note: Dynamic range is the ratio between the smallest and largest signal\nvalues."),(0,r.kt)("p",null,"The previously discussed accurate blending algorithm has been made a lot\nmore efficient by replacing it with a new high dynamic range rendering\nbased algorithm."),(0,r.kt)("p",null,"Let's take a look at the improvements made on the algorithm by comparing\nit to the GS in a scenario of blending two fragments of color 20 and 255\non a target of color 250. Notice that the new algorithm gives us the\nresult using 2 passes, that's why it is also more CPU demanding than the\nold code."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Formula")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Equation")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Result")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"(Cd+Cs) % 256"),(0,r.kt)("td",{parentName:"tr",align:"center"},"(250 + 20) % 256"),(0,r.kt)("td",{parentName:"tr",align:"center"},"14")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"(Cd+Cs) % 256"),(0,r.kt)("td",{parentName:"tr",align:"center"},"(14 + 255) % 256"),(0,r.kt)("td",{parentName:"tr",align:"center"},"13")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Graphics Synthesizer")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Formula")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Equation")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Result")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"for Cs ","<"," 128 : Cd + Cs"),(0,r.kt)("td",{parentName:"tr",align:"center"},"(250 + 20)"),(0,r.kt)("td",{parentName:"tr",align:"center"},"255 (saturated result)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"for Cs ",">"," 128 : Cd - (256 - CS )"),(0,r.kt)("td",{parentName:"tr",align:"center"},"(255 - (256-255))"),(0,r.kt)("td",{parentName:"tr",align:"center"},"254")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Older Algorithmn (Direct3D)")),(0,r.kt)("p",null,"Where the old algorithm would only work in cases of no overflow of\noperations, the new one will be even better since the first pass could\ngo beyond the minimum and maximum limits. (no overflow)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Formula")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Equation Pass 1")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Equation Pass 2")),(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Result")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Cd + Cs =",">"," Cd % 256"),(0,r.kt)("td",{parentName:"tr",align:"center"},"250+20 =",">"," 270"),(0,r.kt)("td",{parentName:"tr",align:"center"},"270 % 256"),(0,r.kt)("td",{parentName:"tr",align:"center"},"14")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"Cd + Cs =",">"," Cd % 256"),(0,r.kt)("td",{parentName:"tr",align:"center"},"14+255 (pass 1) =",">"," 269"),(0,r.kt)("td",{parentName:"tr",align:"center"},"269 % 256"),(0,r.kt)("td",{parentName:"tr",align:"center"},"13")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"New HDR based algorithm")),(0,r.kt)("p",null,"As you can see, the new HDR based algorithm produces accurate results\ncompared to the GS in comparison to the older algorithm."),(0,r.kt)("p",null,"Check out the fog like effects in God of War 1 which are now emulated\ncorrectly in OpenGL with blending accuracy set to high:"),(0,r.kt)(u,{before:n(43780).Z,after:n(97775).Z,mdxType:"SliderCompare"}),(0,r.kt)(u,{before:n(36097).Z,after:n(24141).Z,mdxType:"SliderCompare"}),(0,r.kt)("p",null,"Relevant PR:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/pull/688"},"Hdr colclip")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"software-renderer-fixes"},"Software renderer fixes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gregory38"},"Gregory")," & ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gabest11"},"Gabest"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Silent Hill outputs a nan in Q to emulate the flashlight - an\nunsupported NaN (not a number) on the projection value (Q). The\nissue was fixed by Gregory using an isnan test to find out when this\nis used. Gabest pitched in and decreased the speed impact by using\ninlined ASM. Fixes the long standing Silent Hill 3 flashlight effect\nissue.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Wrong data mask for DATE operation on pseudo 16 bits RT: Fixes\nshadow colors on Haunting Ground")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Fix texture addressing outside the limits (only for OCL and SW\nmode), done by extending the cached texture size to the upper limits\nof the region clamp values: Fixes Lupin the 3rd")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Texture size reduction: Fixes Horzes, Stolen and likely all games\nthat generate an out-of-memory error."))),(0,r.kt)("p",null,"Haunting Ground shadow coloring is now fixed under the OpenGL software\nrenderer:"),(0,r.kt)(u,{before:n(4470).Z,after:n(82807).Z,mdxType:"SliderCompare"}),(0,r.kt)("p",null,"Silent Hill 3 flashlight working properly under the OpenGL software\nrenderer:"),(0,r.kt)(u,{before:n(31145).Z,after:n(85746).Z,mdxType:"SliderCompare"}),(0,r.kt)("p",null,"Relevant commits:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/commit/85117ecbddc50b4fcb36293559ddfbdfa73f1f00"},"Gsdx: simplified isnan test, it compiles to an inline sse instruction\nand a flag test, silent hill dump still looks\nfine."),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/commit/744f9ebc097982e5dd6387e8e02826ecf9335452"},"Gsdx-Ogl: rare corner case when both texture shuffle and date are\nenabled"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/commit/42f51591df66c3b82d353dc6bb6aad7e14d1127d"},"Lupin 3 fix, texture addressing outside the limits, only for sw and\nopencl\nyet"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/commit/49b3acea72a4c2a37811a4616cb2d940355b6952"},"Gsdx: texture size reduction in sw mode, fixes Stolen, less memory\nusage in\ngeneral")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"gsdx-post-processing-updates"},"GSdx: Post-processing updates"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Asmodean-"},"Asmodean"))),(0,r.kt)("p",null,"Our resident post processing effect guru Asmodean made his comeback,\nproviding a new version of his awesome effects suite for GSdx and fixing\nits compatibility with the new and improved OpenGL renderer. Changelog\nis\n",(0,r.kt)("a",{parentName:"p",href:"http://forums.pcsx2.net/Thread-Custom-Shaders-for-GSdx?pid=441430#pid441430"},"here"),"\n."),(0,r.kt)("p",null,"Relevant PR:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/pull/739"},"GSdx: Post-processing\nupdates")),(0,r.kt)("h1",{id:"new-feature"},"New feature:"),(0,r.kt)("h2",{id:"folder-memory-cards"},"Folder memory cards"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/AdmiralCurtiss"},"AdmiralCurtiss"))),(0,r.kt)("p",null,"This huge PR was finally merged after much debate, testing and\nimprovements! The new system basically bypasses the traditional 8mb\nmemory card file system and creates a folder, where each game freely\ncreates its save files without the 8mb file limitation.\nThis means that users can switch to this system and:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Never worry again about their memcards getting filled and having to\nuse many different files"),(0,r.kt)("li",{parentName:"ul"},"Easily share single game saves instead of whole memory cards by\nsimply zipping the folder of the game"),(0,r.kt)("li",{parentName:"ul"},"Easily backup and delete game saves without going into the PS2 bios\nor running the game"),(0,r.kt)("li",{parentName:"ul"},"Convert your old memory cards to a folder using the built-in convert\nfeature")),(0,r.kt)("p",null,"AdmiralCurtiss quickly nailed out some bugs that emerged after the\nmerge, making this feature pretty much stable and safe for everyday\nusage. Hopefully we will be able to extend this feature to even\nautomatically convert GameFAQ saves (.cbs, .max etc) and use them\nwithout much hassle"),(0,r.kt)("p",null,"A big thanks to him for putting up with our worries about the new system\nand the hard work he put into this! You can use the new feature from the\nmemory card configuration, create a new memory card and select Folder\n(experimental). The convert feature is also in the memory card menu"),(0,r.kt)(c,{cols:6,src:n(70888).Z,mdxType:"Image"}),(0,r.kt)("p",null,"Relevant PR: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/pull/359%2026%20Nov%202014"},"Memory Card as folder instead of a big raw\nfile")),(0,r.kt)("h1",{id:"gui"},"GUI:"),(0,r.kt)("h2",{id:"upgrade-to-wxwidgets-3-for-windows-gui-fixes"},"Upgrade to wxWidgets 3 for Windows-GUI fixes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/turtleli"},"turtleli")," & ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/micove"},"micove"))),(0,r.kt)("p",null,"PCSX2 has been using wxWidgets for its GUI since Jake Stine's redesign\nsome years back, which was then at version 2.8. Since then, wxWidgets\nhas been updated to version 3 (on November 2013!) but no active\ndeveloper dared to attempt an update due to various customizations done\nby Jake. Until recently that is! Gregory started by updating the Linux\nside of PCSX2 to the new version and turteli made it happen for Windows\ntoo. The few bugs that emerged got quickly squashed by turteli and\nmicove"),(0,r.kt)("p",null,"Relevant PR and commits:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/pull/657"},"Windows: switch to wxWidgets\n3.0"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/commit/0e533e1630a0bd34619a0b57f8d162455b96a056"},"Fix Unicode issues in SPU2-X with\nPortAudio."),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/pull/741"},"wxWidgets 3.0 fixes")),(0,r.kt)("h1",{id:"onepad-linux"},"Onepad (Linux):"),(0,r.kt)("h2",{id:"dual-shock-3-support-for-onepad-in-linux"},"Dual Shock 3 support for OnePad in Linux"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/JasonBrownDeveloper"},"JasonBrownDeveloper"))),(0,r.kt)("p",null,"A long standing issue with DS3 controller axis detection in Linux\nprevented people from using them with the OnePad plugin, but no longer\nthanks to JasonBrownDeveloper"),(0,r.kt)("p",null,"Relevant PR: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/pull/667"},"Minimum code needed to get Dualshock 3 working with onepad\non recent linux and evdev\nreleases")),(0,r.kt)("p",null,"Thanks to all the GIT contributions during these 1,5 months and to all\nthe active testers who encourage development to continue! The next\nprogress report will probably come at the end of September since\nvacations will happen and we're never on time anyway!"))}m.isMDXComponent=!0},70888:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/folder-memcards-s-5e3bed7efd598d935200924c8e0960e5.jpg"},43780:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/gow1-hdr-broken1-s-14c48aa7fd5e6cb10e0ab2004baa18de.jpg"},36097:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/gow1-hdr-broken2-s-8a18172a81487234f3cf3e801d4988a1.jpg"},97775:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/gow1-hdr-fixed1-s-d4f46f0bf19699b980123fdf0ff10d52.jpg"},24141:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/gow1-hdr-fixed2-s-f4294f796e386b58c79f60c4fd39fbc8.jpg"},4470:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/haunting-ground-broken-s-a80e795a6aebc193805f857a5f9572a8.jpg"},82807:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/haunting-ground-fixed-s-80d55789db33392af75f1306061db0d3.jpg"},31145:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/silent-hill3-broken-s-95dce4980368d6acadf66845868a6374.jpg"},85746:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/silent-hill3-fixed-s-81164636d0810986c3c6826ca9de8c1b.jpg"},62830:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/7-8-2015-logo-c79e9e70622349181967993f21c19316.jpg"}}]);