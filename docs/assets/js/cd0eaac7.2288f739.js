"use strict";(self.webpackChunkpcsx_2_net=self.webpackChunkpcsx_2_net||[]).push([[9986],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},22580:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={authors:["jake stine"],date:new Date("2010-01-31T00:00:00.000Z"),description:"One problem that has plagued PCSX2 since as long as most anyone can remember is it's general inflexibility and instability when flipping between windowed and fullscreen modes",draft:!1,tags:["devblog"],title:"A New Kind Of Fullscreen"},i=void 0,l={permalink:"/pcsx2-net-www/blog/2010/a-new-kind-of-fullscreen",editUrl:"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/a-new-kind-of-fullscreen/index.mdx",source:"@site/blog/2010/a-new-kind-of-fullscreen/index.mdx",title:"A New Kind Of Fullscreen",description:"One problem that has plagued PCSX2 since as long as most anyone can remember is it's general inflexibility and instability when flipping between windowed and fullscreen modes",date:"2010-01-31T00:00:00.000Z",formattedDate:"January 31, 2010",tags:[{label:"devblog",permalink:"/pcsx2-net-www/blog/tags/devblog"}],readingTime:2.95,hasTruncateMarker:!0,authors:[{name:"Jake Stine",key:"jake stine"}],frontMatter:{authors:["jake stine"],date:"2010-01-31T00:00:00.000Z",description:"One problem that has plagued PCSX2 since as long as most anyone can remember is it's general inflexibility and instability when flipping between windowed and fullscreen modes",draft:!1,tags:["devblog"],title:"A New Kind Of Fullscreen"},prevItem:{title:"PCSX2 0.9.7 Sneak Peek!",permalink:"/pcsx2-net-www/blog/2010/pcsx2-0-9-7-sneak-peek"},nextItem:{title:"PCSX2/Mac - Release Update!",permalink:"/pcsx2-net-www/blog/2009/pcsx2-mac-release-update"}},s={authorsImageUrls:[void 0]},p=[],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"One problem that has plagued PCSX2 since as long as most anyone can\nremember is it's general inflexibility and instability when flipping\nbetween windowed and fullscreen modes. This was something we really\nsought to address as we re-write the user interface in 0.9.7."),(0,r.kt)("p",null,"In 0.9.6 the situation was grim: The flip never really worked right in\nDX9 -- there's an \"escape hack\" that completely shuts down the emulator\njust to flip out of fullscreen mode. Hitting alt-enter is usually less\nforgiving (the plugin handles it, and doesn't allow PCSX2 to completely\nshut everything down and restart). In DX10 things were better: alt-enter\ntypically works a couple times, but do it too often, or get an unlucky\nflip, and it'll still result in lost or corrupted video and possibly a\ncrash depending on video drivers and (lack of) luck."),(0,r.kt)("p",null,"In 0.9.7 we've completely re-done our approach to fullscreen. Instead of\nusing what Microsoft DirectX calls ",(0,r.kt)("strong",{parentName:"p"},"Exclusive Mode")," (you can read\nabout the programmer-centric details of it\n",(0,r.kt)("a",{parentName:"p",href:"http://msdn.microsoft.com/en-us/library/ee417025.aspx"},"here")," ), we're\ntaking a more modern approach and using a special type of maximized\ndesktop window instead. Like anything there's some advantages and\ndisadvantages to this new approach:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Advantages of the new fullscreen method:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Works perfectly in DX9 and DX10 alike."),(0,r.kt)("li",{parentName:"ul"},"No more risk of visual corruption or crashes, and no need to\nshutdown the emulator to avoid them."),(0,r.kt)("li",{parentName:"ul"},"Much faster and seamless flips."),(0,r.kt)("li",{parentName:"ul"},"Works with any GS plugin, regardless of how the GS plugin is\nimplemented."),(0,r.kt)("li",{parentName:"ul"},"Always uses your LCD display's optimal resolution (assuming you have\nit set in the desktop as such, and you should)."),(0,r.kt)("li",{parentName:"ul"},"Integrates better with your desktop -- Alt-Tab, TaskBar, popup\nerrors, etc. are much less prone to being... annoying. (pulling up a\nstrategy guide in a browser window, for example!)"),(0,r.kt)("li",{parentName:"ul"},"Super-easy to implement, from a programming perspective!")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Disadvantages:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A slight bit of extra window management overhead."),(0,r.kt)("li",{parentName:"ul"},"Always uses your desktop resolution on CRT displays (this is an\nadvantage for anyone with an LCD display, but can be a disadvantage\nfor people with CRT displays, depending on your setup .. however few\nof you are left)")),(0,r.kt)("p",null,"The performance benefit of exclusive fullscreen is mostly related to\nAero under Vista/Windows7. in which case the performance is sometimes\n",(0,r.kt)("em",{parentName:"p"},"better")," in a window over exclusive mode (this depending on video\ncard/drivers/etc)."),(0,r.kt)("p",null,'The thing that really sold us on it though is the fact that overhead of\nthe non-exclusive fullscreen mode is minimal on modern GPUs. The only\nreal advantage of using exclusive fullscreen is that it bypasses Aero\nand increases the "multimedia priority" of the app. If you already have\nAero disabled, then neither of those apply anyway. And looking toward\nthe future: the next generation of GPUs will reduce that overhead of\nAero even further to the point where even that will likely not make a\nsignificant impact on performance. So the idea of a seamlessly working\nfullscreen flip for all DirectX incarnations on all incarnations of\nWindows over a rather iffy, unstable, and fragile fullscreen flip that\n',(0,r.kt)("em",{parentName:"p"},"might")," be 2-3% faster on legacy hardware ended up being a no-brainer."),(0,r.kt)("p",null,"We're still leaving the door open for adding optional support for\nexclusive mode fullscreen, since there could still be some use to it for\nspecial scenarios like CRT displays and TV projection; though there's no\ntimetable for the implementation of the option -- and it would depend on\nthe GS plugin to support it properly otherwise it'll still be the\ncorruption/crash bomb that it's always been up to now."))}d.isMDXComponent=!0}}]);