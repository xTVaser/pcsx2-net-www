"use strict";(self.webpackChunkpcsx_2_net=self.webpackChunkpcsx_2_net||[]).push([[7997],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},794:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={authors:["jake stine"],date:new Date("2009-10-13T00:00:00.000Z"),description:"One thing is for sure: The new 0.9.7 betas will use a lot more threads than the current 0.9.6 releases",draft:!1,tags:["devblog"],title:"Thread Counting"},i=void 0,s={permalink:"/pcsx2-net-www/blog/2009/thread-counting",editUrl:"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/thread-counting/index.mdx",source:"@site/blog/2009/thread-counting/index.mdx",title:"Thread Counting",description:"One thing is for sure: The new 0.9.7 betas will use a lot more threads than the current 0.9.6 releases",date:"2009-10-13T00:00:00.000Z",formattedDate:"October 13, 2009",tags:[{label:"devblog",permalink:"/pcsx2-net-www/blog/tags/devblog"}],readingTime:2.665,hasTruncateMarker:!0,authors:[{name:"Jake Stine",key:"jake stine"}],frontMatter:{authors:["jake stine"],date:"2009-10-13T00:00:00.000Z",description:"One thing is for sure: The new 0.9.7 betas will use a lot more threads than the current 0.9.6 releases",draft:!1,tags:["devblog"],title:"Thread Counting"},prevItem:{title:"Global Visitor Stats",permalink:"/pcsx2-net-www/blog/2009/global-visitor-stats"},nextItem:{title:"Thread Synchronization",permalink:"/pcsx2-net-www/blog/2009/thread-synchronization"}},l={authorsImageUrls:[void 0]},c=[],u={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"One thing is for sure: The new 0.9.7 betas will use a ",(0,a.kt)("em",{parentName:"p"},"lot")," more threads\nthan the current 0.9.6 releases. Now this doesn't necessarily mean the\nemulator will take advantage of quad core CPUs better than 0.9.6, least\nnot in a gameplay sense. As I explained in my previous blog, threading\nis as much a function of improving responsiveness and recoverability as\nit is about sharing a workload across multi-core cpus, and so far most\nof the threading implemented into 0.9.7 is the scalable/responsive\nsort."))}p.isMDXComponent=!0}}]);