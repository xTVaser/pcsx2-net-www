"use strict";(self.webpackChunkpcsx_2_net=self.webpackChunkpcsx_2_net||[]).push([[2687],{52991:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/q4-2021-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2022/q4-2021-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2022/q4-2021-progress-report/index.mdx","source":"@site/blog/2022/q4-2021-progress-report/index.mdx","title":"Q4 2021 Progress Report","description":"On track with the marriage of speed and accuracy.","date":"2022-05-10T00:00:00.000Z","formattedDate":"May 10, 2022","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":33.425,"hasTruncateMarker":true,"authors":[{"name":"RedDevilus","url":"https://github.com/RedDevilus","imageURL":"https://github.com/RedDevilus.png","key":"reddevilus"},{"name":"Tellowkrinkle","url":"https://github.com/Tellowkrinkle","imageURL":"https://github.com/Tellowkrinkle.png","key":"tellowkrinkle"},{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refractionpcsx2"}],"frontMatter":{"authors":["reddevilus","tellowkrinkle","refractionpcsx2"],"date":"2022-05-10T00:00:00.000Z","description":"On track with the marriage of speed and accuracy.","draft":false,"hide_table_of_contents":false,"image":"./feature-progrepq42021-bgonly.jpg","tags":["progress-report"],"title":"Q4 2021 Progress Report"},"nextItem":{"title":"New Website!","permalink":"/pcsx2-net-www/blog/2022/new-website"}},"content":"*Looks at the date and notices something.* Yes, my dear readers (or glancers) Q1 2022 should\'ve been published 2 months ago and this is the predecessor to that. Sorry for the delay but there have been several reasons to this almost half year delay. Some of those reasons being the process of making the progress reports:\\n\\n\x3c!-- truncate --\x3e\\n\\n- Publish on private forum thread who has access\\n- Needing it to be HTML without a working preview\\n- Having multiple middlemen to check, update and publish on preview site\\n- Finally go mad at how inefficient the process was that 80% of the time was spent on making sure that all the Pull Requests are listed and pointed correctly instead of actual writing\\n\\nOk, moving on to better news is the the fantastic work from everybody involved in making sure that PCSX2 doesn\'t cave into a lesser program. In case you didn\'t notice we have a new site that brings PCSX2 from 2002 to 2022 as PCSX2 is reborn, and besides, seeing that amazing animation on the homepage is something that you have to decide for yourself on how you feel about it.\\n\\nSo all around we will improve all aspects of the emulator and have better progress reports that cater to the technical, light-hearted or the changelog oriented people. There are also a ton of pictures in this edition of the progress report and I\'m sure that quite a few of you readers are waiting on the new look of the Qt GUI, but that will still take a while to see in fruition to the public.\\n\\nHere is a glimpse of what to expect:\\n\\n<Image src={require(\\"./img/Pic56-QtGlimpse.webp\\").default} />\\n\\nHappy Reading!\\n\\n## <TextGradient startColor=\\"#7828C8\\" endColor=\\"#FF4ECD\\">Core Improvements</TextGradient>\\n\\n### CDVD\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4839\\">CDVD: Implement correct SpindleCtrl handling</PCSX2PRLink>\\n\\nFixes some more videos not playing like Digital Devil Saga and fixes texture issues on Shadowman.\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4853\\">CDVD: Fix possible uncaught exception in CheckDiskTypeFS</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4860\\">CDVD: Implement Disc Swapping</PCSX2PRLink>\\n\\nDisc-Swapping has always been a highly requested feature for multi-disc games which may ask you to swap to the second disc half-way through the game.\\n\\nOthers that use it as more as an addendum to unlocking more items in games such as Dynasty Warriors 5. Another game like Alter Echo which requests to put the original disc back when you eject the game even though it has only 1 disc. Surprisingly the SingStar series might handle this the best as it can swap songs via disc-swapping and sure there is a button to do disc-swapping but it correctly handles swapping without it.\\n\\nAs you see, there are multiple behaviors possible when you are using the disc-swapping functionality (e.g. ejecting games) ranging from quite a few games being fine and nothing happening until it requires new data and thus likely crash to giving you error messages or simply freezing.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4871\\">CDVD: Time reads by sectors per second instead of bytes + Some rotational latency</PCSX2PRLink>\\n\\nAnother refinement on how the disc emulation handles reading and latencies which again improves the timing which the PS2 so desires.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4881\\">CDVD: Simulate 1 sector read ahead</PCSX2PRLink>\\n\\nQueues 1 sector from a future read as ready which fixes Star Ocean 3 stuttering and Winning Eleven 8 crashing.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4913\\">CDVD: Reset VM on sceCdPowerOff writes</PCSX2PRLink>\\n\\nInstead of forcefully \u2018pulling the cord\u2019 when you reset or press the power button on a real console once, it will send a signal to reset. So it acts more like how the console worked.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4927\\">CDVD: Buffer up to 16 sectors</PCSX2PRLink>\\n\\nBuffers up to 16 sectors on a DVD from its current position.\\n\\nDocumentation from developers shows that the DVD drive will always read 16 sectors as a minimum, so this means if it reads in advance, it can buffer up a bunch of sectors to be read off quickly by the DMA.\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4992\\">CDVD: set the correct RTC year when input recording</PCSX2PRLink>\\n\\nChanges how the date is handled for input recording as some games like Metal Gear Solid 3 are sensitive about the date for time-based events.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5056\\">CDVD: Adjust DMA timing based on PS1 timings.</PCSX2PRLink>\\n\\nThe DMA timing calculations were changed to be based on the PS1 DMA timings, but with the difference in bus widths considered, leading to closer DMA timings for CDVD which in turn fixed SpongeBob Lights, Camera, Pants.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5142\\">CDVD: Fix some read timing logic</PCSX2PRLink>\\n\\nImproves the timing of read times when buffering sectors but also corrects the status of the CDVD when running certain commands.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5174\\">CDVD: Some Error handling, Status+Ready Flag changes and fix CdStop</PCSX2PRLink>\\n\\nCorrects some of the statuses and IRQ reasons available to the CDVD, correcting the status of the CDVD controller in certain games. In turn it fixes certain games that were spinning eternally in a black screen or seem to just freeze on the spot like Spyro, Aberenbou Princes, Evergrace and more.\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5182\\">CDVD: Check file actually opened before proceeding</PCSX2PRLink>\\n\\n### VU\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4901\\">COP2: Simplify reg allocation</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4907\\">Fix unparenthesized macro input</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4910\\">microVU: Use uncached reg when clamping for FMAC instructions</PCSX2PRLink>\\n\\nThis was causing broken lighting in 64-bit mode, due to the larger number of registers available. Ft gets loaded and cached, but then the FMAC instructions clamp it in all modes except none, which disturbs the cached value (mismatched with the VU state). Jak happens to rely on this value not being clamped, so it was \\"okay\\" in 8-register mode because it had to be reloaded.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4917\\">Savestates: Add missing things from Savestates</PCSX2PRLink>\\n\\nMakes savestates more robust by giving more information so as to lessen the chance of breaking the game.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5048\\">microVU: Preserve XGKick cycles in delay slot</PCSX2PRLink>\\n\\nPreserve XGKick cycles calculated when there is a memory write in a delay slot, also added handling for xgkick sync on single instructions.\\n\\nPreviously there was no handling on single instructions (evil blocks) so that\'s sorted. The other problem was if there was a mem write in a branch delay slot, it would add the XGkick cycles it needed to run, then erase them! causing the sync to go out, this resolves it.\\n\\n### SPU2\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"5027\\">SPU: Fix videos in Stolen</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5183\\">SPU2: Add Cubeb backend, remove Portaudio and SDL2 backends</PCSX2PRLink>\\n\\nThe current stable (1.6 as of writing) had multiple back-ends namely Xaudio2, DirectSound, PortAudio, WaveOut. DirectSound was being a buggy mess to maintain, WaveOut wasn\'t much better, PortAudio was fine and Xaudio2 was de facto standard on the Windows side. Now Cubeb replaces PortAudio as its successor and keep Xaudio2 as a back-up. Keep in mind in Cubeb the latency slider states 100ms in the GUI but isn\'t exactly true as it automatically uses a very low latency automatically based on your system:\\n\\nBest Case:\\n\\n(Cubeb) Minimum latency: 10.00 ms (480 audio frames)\\n\\nWorst Case:\\n\\n(Cubeb) Minimum latency: 25.00 ms (1200 audio frames)\\n\\nIf it\'s above 25.00 ms you either have a computer issue like corrupt drivers or your computer is far too weak.\\n\\nXaudio2 can\'t handle the same low latency that Cubeb has without bad skipping and warping even on better systems. I hope you guys like the sound. How time-stretching actually works is that you see the first video frame and the sound comes after the targeted sound latency, which for years was defaulted to 0.1 seconds of latency.\\n\\n<PCSX2PRLink authors=\\"xantares\\" prNums=\\"5238\\">Rename ConfigSoundtouch.cpp to ConfigSoundTouch.cpp</PCSX2PRLink>\\n\\n### PAD\\n\\n<PCSX2PRLink authors=\\"JosephLees\\" prNums=\\"4809\\">GUI(linux): Abort \'set all buttons\' & fixed window size</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"4985\\">Create a shared pad header, get rid of the originals, and do some cleanup.</PCSX2PRLink>\\n\\n### USB\\n\\n<PCSX2PRLink authors=\\"Florin9doi\\" prNums=\\"5032\\">USB: Gametrak/RealPlay</PCSX2PRLink>\\n\\nThis Pull Request made the last non-working game work and looks more like a current Linus Tech Videos about VR with all those wires than a PS2 accessory. I\'ll stick to my Black Nintendo Wii instead of this seemingly weird copy-cat.\\n\\n<PCSX2PRLink authors=\\"Florin9doi\\" prNums=\\"5184\\">USB: Sony DPP-MP1 printer emulation</PCSX2PRLink>\\n\\nMost users won\'t see any usage with this and that is fine but the goal of emulating the endless USB and PAD devices do scare me, here is a small subset of still needing to be emulated: <https://github.com/PCSX2/pcsx2/issues/4763>\\n\\n### DEV9\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4421\\">Convert DEV9 config dialog to wxWidgets</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4933\\">DEV9: Fix Windows config saving/loading</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4940\\">DEV9: DNS Logger Crash fix</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4960\\">DEV9: Don\'t shadow return value of GetAdaptersAddresses (Pcap)</PCSX2PRLink>\\n\\nShadowing dwStatus for the return value of GetAdaptersAddresses will prevent the return value of second call from being inspected in the following if statement.\\n\\nIf the user had a large amount of network adapters, this would prevent the code from getting the adapter information of a the selected pcap adaptor.\\n\\nThe equivalent TAP adapter code is already correct.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"5074\\">DEV9: Enable pcap non-blocking</PCSX2PRLink>\\n\\n### IPU\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5173\\">IPU: Overhaul DMA transfers</PCSX2PRLink>\\n\\nChanges how DMA Transfers are handled for example some games like them to be in a specific order.\\n\\nFixes <https://github.com/PCSX2/pcsx2/issues/5168> (Top Trumps).\\n\\nFixes <https://github.com/PCSX2/pcsx2/issues/4063> (Phase Paradox).\\nImproves the moving billboard quality in Test Drive (Master has corruption).\\n\\nFixes video hang in Eggo Mania/Egg Mania - Eggstreme Madness (patch no longer required).\\n\\nFixes Smackdown Shut Your Mouth Titantrons.\\n\\nFixes Gladiator - Sword of Vengeance videos (patch no longer required) Partial <https://github.com/PCSX2/pcsx2/issues/3489>.\\n\\nFixes <https://github.com/PCSX2/pcsx2/issues/4360> (Flipnic UFO mission hang).\\n\\n### Debugger\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4865\\">Debugger: Fix Goto in Disasm option for memory view</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4885\\">Debugger: Separate symbol maps for EE and IOP</PCSX2PRLink>\\n\\nAdds a new member function to the DebugInterface for retrieving the symbol map for the CPU and uses this where relevant instead of accessing the map directly.\\n\\nPreviously there was only one symbol map, which doesn\'t make a whole lot of sense. This prepares for future work on IOP symbol detection.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4926\\">Debugger: Support multi-line assembling</PCSX2PRLink>\\n\\nWhen multiple lines of opcodes are selected, the \'Assemble Opcode(s)\' context menu and M-key shortcut will in turn reassemble all of those opcodes.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4974\\">Debugger: Initial memory search implementation</PCSX2PRLink>\\n\\nNow you can finally go into a search for specific memory address or string instead of scrolling just like in cheat engine.\\n\\n<Image src={require(\\"./img/Pic59-DebuggerView.webp\\").default} />\\n\\n- I think Fobes needs a hug for this secretive message.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4983\\">Debugger: Make the register list DPI aware (Windows)</PCSX2PRLink>\\n\\nFixes the debugger view for registers when the system DPI is not the default 100%.\\n\\n<ImageCompare left={require(\\"./img/Pic57-DebuggerRegisterBefore.webp\\").default} right={require(\\"./img/Pic58-DebuggerRegisterAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4997\\">Debugger: Reset breakpoint skip on savestate load</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"5003\\">Debugger: Fix breakpoint edit window on linux</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"5016\\">Debugger: Allow access to all of 0xBXXXXXXX</PCSX2PRLink>\\n\\nNot sure why certain memory was blocked from being modified, this will alleviate all memory restrictions.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"5031\\">Debugger: Make memory dialog transparent</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"5050\\">Debugger: Format search hits with proper specifier</PCSX2PRLink>\\n\\nMake sure certain text doesn\'t hard-crash the search. (Print size_t with %zu instead of %d)\\n\\n### Input Recording\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4945\\">input-rec: Use a constant RTC for power-on recordings</PCSX2PRLink>\\n\\nGives a specific date for input recording (speedrunning).\\n\\n### Miscellanous Core\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4861\\">Config: Fix folder memory cards initial load</PCSX2PRLink>\\n\\nFolder memory cards weren\'t recognized as a memory card being plugged-in unless you opened the config dialog.\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4914\\">CI: Retain Workflow Artifacts permanently via Github Releases</PCSX2PRLink>\\n\\nThis pull request has brought permanent downloadable (pre)releases on GitHub itself instead of just using Orphis which will not make everything more central but makes it easier to tag commits that are made outside of a pull request and just force-pushed the changes to the project. *stares at certain people that have been naughty*.\\n\\nIf you want to see more details, Vaser has written an essay-like detail on it - <https://github.com/PCSX2/pcsx2/pull/4914>\\n\\nSo it will pre-compile working versions of the nightlies/dev and future stable versions on GitHub forever instead of only temporary on GitHub or what was used in the past being AppVeyor (nickname: Slowveyor) which took easily 10-20 minutes per build.\\n\\nThe nice thing about actions is that it can do multiple builds in parallel for free and can also publish these now permanent builds which are again linked on pcsx2.net as GitHub requires you to have an account in addition to being logged in so you have enough options.\\n\\n## <TextGradient startColor=\\"#7828C8\\" endColor=\\"#FF4ECD\\">GS Improvements</TextGradient>\\n\\n### GS\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3577\\">GS: Merge assembly files in GS</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"3642\\">Convert GS Settings dialog to use wxwidgets</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3940\\">GSVertexTrace::FindMinMax improvements</PCSX2PRLink>\\n\\nThis PR contains the following changes:\\n\\n- Prevents clang from optimizing out our denormal-removal shuffles (10x faster than before for people who compile with clang!)\\n- Run divides on four elements at a time instead of two elements and two useless numbers\\n- Remove inaccurate stq\\n  - With the above division improvements, on processors with partially-pipelined division (Ivy    Bridge and later, Bulldozer and later), accurate stq is actually faster (according to both IACA of inaccurate vs accurate and LLVM MCA). On older CPUs expect performance to be about 2/3 of the old algorithm before taking into account improvements from not double-checking vertices.\\n  - There seems to be a check of accurate_stq when the OGL backend is deciding whether to use  geometry shaders to process sprites.\\n\\nIn the end, ignoring clang issues, GSVertexTrace::FindMinMax goes from taking about 3% of MTGS thread runtime to 1.5% on my computer. (Most of the time was spent doing OpenGL things so if you have a more efficient OpenGL driver it might make more of a difference for you)\\n\\n<PCSX2PRLink authors=\\"iMineLink\\" prNums=\\"4094\\">GS-hw: fix Burnout games black sky.</PCSX2PRLink>\\n\\nBurnout games weren\'t emulated correctly due to the texture cache being the biggest pain in the GS side, which you can avoid by switching to the Software renderer and then switching to HW. The game downloaded the texture and then modified it to finally draw it on the CPU side.\\n\\nNow no more shenanigans in having to switch or ignore the sky issue, there is another game that has a similar issue a shooter called \'Black\' (A recurring theme that PS2 game title names fit with their badly emulated issues). Black hasn\'t been fixed yet, perhaps in the future.\\n\\n<SliderCompare before={require(\\"./img/Pic5-BurnoutBefore.webp\\").default} after={require(\\"./img/Pic6-BurnoutAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4346\\">Spin before sleeping threads to reduce thread sleeps/wakes</PCSX2PRLink>\\n\\n\\"Drawing triangles is super easy to parallelize!  GPUs are super parallel, and it should be nice and easy to spread a software renderer across lots of CPU cores!\\" is probably what most people think.  And this is generally true, if you\'re trying to software render for a normal PC graphics API like OpenGL.  But we\'re emulating a GS.  That\'s okay though, it\'s still a just bunch of triangles, right?  PCSX2 has a software renderer, and it lets you set the number of cores it used, so we can see how well it scales.  And if you messed with that number, you\'d generally find that going above 3 worker threads didn\'t help much.  In some games, like Hitman Blood Money, you\'d get the best performance with 0 worker threads.  What?\\n\\nThe culprit is thread synchronization.  But why would you need to synchronize worker threads when drawing a bunch of triangles?  It turns out some PS2 games like to use the result of a previous draw as the texture for another draw.  Whenever a game does this, one thread could need pixels drawn on another thread, so we have to sync them all up.  PC games do this too, but they\'ll usually only do this a few times per frame, rendering an entire image before reading it.  When processing effects, PS2 games like to do this on small parts of images at a time, resulting in huge numbers of thread synchronizations.  Ratchet & Clank, which previously saw speed start to die off at around 3 worker threads, requires about 500 synchronizations to draw a single frame.  Hitman Blood Money, whose title screen\'s FPS previously ran in the single digits, sees a whopping 10,000 synchronizations in a single frame, or 600,000 per second!  Ouch!\\n\\nSo what went into one of these synchronizations?  Before this PR, the control thread would see the need for synchronization, go to the first worker thread, see that it was still running, and go to sleep.  When that worker thread finished its work, it would wake up the control thread, which would then go through the rest of the worker threads, checking that they were finished as well.  While this was happening, the worker threads would each see that they have no work to do, and go to sleep themselves.  Then, the control thread would decode the image they just rendered into the format worker threads can read, at which point it would submit the next piece of work for the worker threads to process, and go through and wake all the worker threads back up.\\n\\nSleeping and waking threads is pretty fast, but it\'s not *that* fast.  One round trip seems to take around 5-10 microseconds on most computers.  Which seems pretty fast, until you compare that to the average time one of the threads spends rendering a pixel: 5-10 *nanoseconds*.  So in the time all these threads spent going to sleep and waking up, a single thread could have rendered 1000 pixels!  Another way to look at it is how much time Hitman Blood Money spends watching its threads sleep and wake rendering a frame: 50-100ms.  That\'s like 10-20 fps, and we haven\'t even rendered anything!\\n\\nSo how do we solve this?  Well you could say \\"just sync less\\", and we are working on that (some of the more recent autoflush PRs have helped here), but that\'s not an especially easy solution.  The easy solution is \\"just don\'t go to sleep\\".  In the new implementation, threads keep spinning, staring at the status variable, for up to 50 microseconds before going to sleep.  Maybe not the best use of CPU time, but it brings the time for one round trip communication from 5-10 microseconds down to just 0.2 microseconds, or 200 nanoseconds, an over 10x improvement.  With this, using multiple threads manages to not be slower than 0 threads on even Hitman Blood Money, though it isn\'t much faster either.  For less sync-intensive games, the falloff point for increasing threads has increased and is now usually in the 4-5 thread area (assuming you have that many cores on your CPU), bringing PAL R&C3\'s FPS from having dips into the mid 30s to a smooth locked 50 on a Ryzen 5 5600X.\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4348\\">Replace cached GSOffset with live calculations</PCSX2PRLink>\\n\\nThe way the PS2\'s GS stores images in memory is a bit special.  If you took a piece of memory and just read it like normal, your image would look like a scrambled mess.  The GS actually has a different scrambling for each of its image formats, often referred to as swizzles, which allowed devs to do more effects on the shader-free GS.  As a result, PCSX2 has to deal with a lot of different possible swizzles.\\n\\nCalculating swizzled offsets for every pixel of an image every time you read it would be pretty slow, so GSOffset was created to work around this.  A GSOffset stored a list of memory offsets from the top left pixel in an image to each pixel on the left edge, and a list of offsets from a pixel on the left edge to each pixel not on the left edge.  This took up 16kb, but it allowed PCSX2 to go from some pixel coordinates to the memory address of that pixel with two table lookups and two additions.  Since a GSOffset was only valid for a specific combination of texture format, texture size, and texture starting address, a new GSOffset was generated for each unique combination of those a game used.\\n\\nFor most games, this worked fine.  But a few games, including MLB Power Pros, Remote Control Dandy SF, and Ultimate Spider-man, liked to throw garbage data at the GS register that describes the information for the current texture.  For for each piece of garbage data, PCSX2 would create a new 16kb GSOffset, filling up a 32-bit application\'s 4GB address space and running out of memory in just 40 seconds.  (Sure, 64-bit has access to more memory, but if it filled up 4GB in 40 seconds, even a computer with 64GB of ram wouldn\'t last long...)  So why not just clean up unused GSOffsets and free them?  GSOffset was clearly not made with this in mind.  It didn\'t provide anything to help with actually using its data, so any code that wanted to use it had to do all the calculations manually.  Some code pulled pointers from the GSOffset and threw them all over the place.  Cleaning all that up for liveness tracking would have been a pain, and the lack of nice methods for using its data was also annoying, so we instead opted for replacing GSOffset entirely with a new class that didn\'t require any runtime allocations (and therefore had nothing to track).\\n\\nThe new GSOffset takes advantage of the fact that the table of offsets from a pixel on the left edge to any other pixel doesn\'t actually depend on the texture size or starting address, only on the texture format.  One of these tables is created for each of the PS2\'s supported texture formats by the compiler, which is possible because there\'s a fairly small number of them.  The rest of the calculations (e.g. the left edge calculation) are done whenever they\'re needed, taking advantage of the fact that images are usually read left to right, top to bottom, so while a 512x512 texture has about 260 thousand pixels, reading it using the GSOffset would only run the slightly slower left edge pixel calculation 512 times.  In the end, this slightly slower calculation was offset by the reduction in time it took to look up and create GSOffsets, resulting in no performance regression from this change.\\n\\n<PCSX2PRLink authors=\\"Sergeanur\\" prNums=\\"4385\\">GS: Simulate scan mask (fix transparency in MGS2 & MGS3)</PCSX2PRLink>\\n\\nFor what feels like forever, transparency didn\'t work correctly for Metal Gear Solid 3 and other games such as Gran Turismo 4.\\n<SliderCompare before={require(\\"./img/Pic1-MGS3Before.webp\\").default} after={require(\\"./img/Pic2-MGS3After.webp\\").default} />\\n<SliderCompare before={require(\\"./img/Pic3-GT4Before.webp\\").default} after={require(\\"./img/Pic4-GT4After.webp\\").default} />\\n<SliderCompare before={require(\\"./img/Pic47-GTConcept2002TokyoGenevaBefore.webp\\").default} after={require(\\"./img/Pic48-GTConcept2002TokyoGenevaAfter.webp\\").default} />\\n<SliderCompare before={require(\\"./img/Pic49-TouristTrophyBefore.webp\\").default} after={require(\\"./img/Pic50-TouristTrophyAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4757\\">Improved stats printout from sw renderer</PCSX2PRLink>\\n\\nIf you want to printout your stats from the SW renderer, it doesn\'t look as readable as it was badly aligned and has no header.\\n\\n<ImageCompare left={require(\\"./img/Pic60-SWPrintoutBefore.webp\\").default} right={require(\\"./img/Pic61-SWPrintoutAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4850\\">GS-hw: Don\'t write clamped depth test value to depth buffer when ZMSK is enabled.</PCSX2PRLink>\\n\\nFixes broken shadows from Kingdom Hearts Re-Chain which produced lines.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4859\\">GS: Cleanup ini ranges for some values.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4863\\">GS: Fix OSD, Shade Boost slider values not showing.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4887\\">gs-tc: propagate texture shuffle format on readback</PCSX2PRLink>\\n\\nDue to the way some effects work on the GS and how our Texture Cache handles it, sometimes the wrong texture format can be remembered, which will cause it to get stored in an incorrect memory format when it is saved back to the real GS memory for downloading to the EE core. This PR corrected this behaviour and properly fixes the flashlight in the Silent Hill series:\\n\\n<ImageCompare left={require(\\"./img/Pic19-SilentHillBefore.jpg\\").default} right={require(\\"./img/Pic20-SilentHillAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4891\\">GS: Revert be7e1163b4f7e3fe19876462fb26cd082ffb3ab4</PCSX2PRLink>\\n\\nThis PR reverts an older commit from 2013 (1.2 era) which had wrong assumptions on texture region repeating and how the clamping is handled along with it. Multiple games were affected on the visual side or even performance-side.\\n\\nTest Drive Limited (Blue roads):\\n\\n<Image src={require(\\"./img/Pic43-TestDriveUnlimited.webp\\").default} />\\n\\nKaan Barbarian Blade (Black Character Model):\\n\\n<Image src={require(\\"./img/Pic44-Kaan.webp\\").default} />\\n\\nThe Chronicles of Narnia - The Lion, The Witch and The Wardrobe (Heat Haze Effect of the fire):\\n\\n<SliderCompare before={require(\\"./img/Pic63-Narnia1Before.webp\\").default} after={require(\\"./img/Pic64-Narnia1After.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4906\\">GS: Use stream buffer for vertices/indices/uniforms</PCSX2PRLink>\\n\\nThis will certainly help AMD GPUs on Windows but it does help NVIDIA GPU users too as the default behaviour was to stall (essentially wait and stop for new instructions) which caused bad performance.\\n\\nThese charts below lists 3 different systems that will give you an easier way to tell how much it could help:\\n\\n<BarChart chartDataUrl={require(\\"./charts/Chart1-4906.yaml\\").default}/>\\n<BarChart chartDataUrl={require(\\"./charts/Chart2-4906.yaml\\").default}/>\\n<BarChart chartDataUrl={require(\\"./charts/Chart3-4906.yaml\\").default}/>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4919\\">GS: gsstate (the old gsdx one) cleanup</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4941\\">GS: Use custom allocator for SW renderer</PCSX2PRLink>\\n\\nThis new behavior improves the software renderer quite drastically in a good way and handles it more specifically in certain situations. I would even state that the software renderer has never been this fast even compared to the older stable versions as I always tried to play True Crime NYC and never got full speed in the software renderer and now it\'s handling it with ease.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4952\\">GS: Further state cleanup + fixes for older dump compatibility</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4965\\">GS: Let draw happen even if invalid, log invalid draws</PCSX2PRLink>\\n\\nIn some scenarios, the ZBUF or FRAME values may get set to invalid data, but on draws where they are not getting used. Before this would completely ignore the draw which caused problems, however this lets it continue since the data it needs is valid.\\n\\n<SliderCompare before={require(\\"./img/Pic45-StarOceanBefore.webp\\").default} after={require(\\"./img/Pic46-StarOceanAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4966\\">GS: Fix up CLUT offset handling in 32bit I8 mode</PCSX2PRLink>\\n\\nThis pull request fixes several games with the wrong colors, which depended on the CLUT (Color Look-up table) which basically is a value corresponding to a color palette an example being the RGB values (255, 0, 0) which means full red color, for example. The issue arose around the fact that the 256 colour palette is split in to 16 chunks of 16 colours and it can update it at any one of these chunks, unfortunately memory writes only really worked if it was updated on either chunks 0, 3, 7, 11 or 15, others would break down. Further to this the behaviour when it was asked to update the end of the buffer only was incorrect (The dirt in GTA: San Andreas relied on this!), which has now been corrected.\\n\\nA few examples but not limited to:\\n\\n<SliderCompare before={require(\\"./img/Pic9-HarleyBefore.jpg\\").default} after={require(\\"./img/Pic10-HarleyAfter.jpg\\").default} />\\n<SliderCompare before={require(\\"./img/Pic11-RomanceBefore.jpg\\").default} after={require(\\"./img/Pic12-RomanceAfter.jpg\\").default} />\\n<SliderCompare before={require(\\"./img/Pic13-SanAndreasBefore.jpg\\").default} after={require(\\"./img/Pic14-SanAndreasAfter.jpg\\").default} />\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4980\\">Miscellaneous fixes for macOS</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4993\\">GS-ogl: Remove device, driver checks in GLLoader.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5000\\">GS:SW: Fix fog on x64 avx2</PCSX2PRLink>\\n\\nFixes a bug where \'f\' would be incorrect for the blue channel when fogging was enabled on the rendering of a sprite on avx2 x64.\\n\\nLike you see this purple grass on Hitman which everybody should agree isn\'t realistic and is a bug:\\n\\n<Image src={require(\\"./img/Pic62-HitmanPurpleGrass.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5006\\">GS: Only reload Auto MIPs on TEX base change</PCSX2PRLink>\\n\\nThe handling of MTBA was previously not handled very well and was somewhat of a mystery, we have since discovered the correct behaviour for when it can be triggered through restrictions in texture sizes and formats, which this PR attempted to correct, enough to fix Parappa The Rapper 2 and Ape Escape 3.\\n\\nActually this pull request is fine, but we discovered later is that the formula for updating the MIP addresses was incorrect, but also the pending draws needed to be flushed if these new MIPMAP values were different.  It does remain that hardware mode has difficulty handling mip-maps.\\n\\n<SliderCompare before={require(\\"./img/Pic39-ParappaBefore.webp\\").default} after={require(\\"./img/Pic40-ParappaAfter.webp\\").default} />\\n<SliderCompare before={require(\\"./img/Pic41-ApeEscapeBefore.webp\\").default} after={require(\\"./img/Pic42-ApeEscapeAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5013\\">GS: Fix Half Pixel Offset and Half Screen Fix config swap</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5024\\">GS SW: Handle flat prims without float conversion</PCSX2PRLink>\\n\\nLarge floats are not handled very well in the software renderer due to the range being limited by signed integers but also some precision is lost by being single floats which only have a precision of 24bits. This PR makes it so flat triangles are treated like sprites and the Z values are passed as integer so no precision is lost, which fixes games which use flat triangles to draw UI/2D screens.\\n\\n<SliderCompare before={require(\\"./img/Pic7-EvangelionBefore.webp\\").default} after={require(\\"./img/Pic8-EvangelionAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5026\\">GS-gui: Change blending option from None to Minimum.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5029\\">GS/OpenGL: Use shader+draw for CopyRectConv</PCSX2PRLink>\\n\\n<BarChart chartDataUrl={require(\\"./charts/Chart4-5029.yaml\\").default}/>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5035\\">GS: Improve FixedTEX0 accuracy</PCSX2PRLink>\\n\\nThe calculation of how to handle texture sizes wasn\'t perfect and would cause graphical issues when upscaling such as Final Fantasy X.\\n\\n<ImageCompare left={require(\\"./img/Pic37-FFXBefore.webp\\").default} right={require(\\"./img/Pic38-FFXAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5054\\">GS-hw: Adjust/minor optimization on SW blend shader a bit</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5061\\">GS-hw: Improve how we handle AA1 draws</PCSX2PRLink>\\n\\nIn the last progress report (Q3 2021) there have been improvements to how Edge Anti-Aliasing works for the software renderer (lines and triangles type), this time the hardware renderer has also been improved for several games such as Doko Demo Issho series, FIFA 2002 and other unknown games.\\n\\nHowever it has only been fixed on the lines type but not the triangles type which is used a ton for a game like Final Fantasy X. Hopefully in the future we can get feature parity with the software renderer which handles both types correctly and while the issue on hardware renderer is about the same it will be look worse in the severity factor.\\n\\n<SliderCompare before={require(\\"./img/Pic33-DokoHWBefore.webp\\").default} after={require(\\"./img/Pic34-DokoHWAfter.webp\\").default} />\\n<SliderCompare before={require(\\"./img/Pic35-FIFA2002HWBefore.jpg\\").default} after={require(\\"./img/Pic36-FIFA2002HWAfter.jpg\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5064\\">GS-d3d11: Properly set afix in EmulateBlending.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5067\\">GS/OpenGL: Use CreateRenderTarget() for temp HDR target</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5072\\">GS-wx: Fix some gui interaction.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5087\\">GS: Unify HW texture caches</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5088\\">GS-glsl/fx: Split color clamp/wrap in it\'s own function.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5098\\">GS Debugger: Fix Length of dump.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5103\\">GS-hw: Sample depth on green channel</PCSX2PRLink>\\n\\n<SliderCompare before={require(\\"./img/Pic21-HitmanBefore.webp\\").default} after={require(\\"./img/Pic22-HitmanAfter.webp\\").default} />\\n<SliderCompare before={require(\\"./img/Pic23-ImpossibleBefore.webp\\").default} after={require(\\"./img/Pic24-ImpossibleAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5110\\">GS-hw: Try to use a mix of HW/SW blending in more situations.</PCSX2PRLink>\\n\\nThis will improve the blending behavior on default settings. Blending affects many things such as the lighting, shadows and more.\\n\\n<SliderCompare before={require(\\"./img/Pic15-ColossusBefore.webp\\").default} after={require(\\"./img/Pic16-ColossusAfter.webp\\").default} />\\n<SliderCompare before={require(\\"./img/Pic17-MGS2Before.webp\\").default} after={require(\\"./img/Pic18-MGS2After.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5128\\">GS-ogl: Optimize fragment shader uniform buffer.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5135\\">GS-hw: Optimize pabe (per pixel alpha blending)</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5138\\">GS: Replace separate HW renderers with single shared renderer</PCSX2PRLink>\\n\\nIn the past all the hardware renderers like OpenGL, Direct3D11 all had their own code locations which causes a lot of duplicated code and if someone made an improvement to one they shouldn\'t forget improving the other hardware renderers which causes code debt if they do.\\n\\nNow they all will share more code with each other.\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5139\\">Fix broken resources</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5154\\">GS: Check CLUT dirty write on vertex kick</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5180\\">GS: Fix looping over pages of textures with massive strides</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5194\\">GS/OpenGL: Add a shader/program cache</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5196\\">GS: Move afix check to high blend level</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5197\\">GS-hw: Fix recent alpha max check.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5198\\">GS: Unify constant buffers between renderers</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5208\\">GS: Add missing override specifier to a few files</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5213\\">GS-hw: Extend Blend mix to work when alpha is higher than 1.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"5223\\">GS-hw: Mirror anisotropic filtering behavior on Direct3D11 like OpenGL, and allow it to run on Nearest texture filtering</PCSX2PRLink>\\n\\n## <TextGradient startColor=\\"#7828C8\\" endColor=\\"#FF4ECD\\">Misc Improvements</TextGradient>\\n\\n### GUI\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4451\\">Allow relative elf file paths on command line</PCSX2PRLink>\\n\\nInstead of the absolute path C:/User/Documents/PCSX2/ELF/test.elf, you can do things like ELF/test.elf instead.\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"4468\\">IPC: rename to pine</PCSX2PRLink>\\n\\nIPC is a generic name for this function so PINE was chosen as it\'s replacement. Especially when it\'s already useful for RPCS3 and other potentially other emulators or programs.\\n\\n<PCSX2PRLink authors=\\"MrCK1\\" prNums=\\"4747\\">Savestates: Small refactoring</PCSX2PRLink>\\n\\nIn the times always knoweth, there lies an evil power known as entropy but one angry kot has arisen to the challenge to bring order to chaos. Okay, maybe not as epic as the first sentence makes you believe but CK1 made sure to automatically bring a subfolder per-game instead of one blob (root) of savestates inside the \'sstates\' folder.\\n\\nWhat does it solve you wonder? Well, my dear reader if you do have several games and you make a lot of savestates in multiple slots (Don\'t look at me) you will gain the ability to have an easier overview which ironically kinda mimics how a real memcard structure works. If you want to compare it, just save normally on your memcard save and make sure it\'s a folder memcard to see the differences and similarities.\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4867\\">WX: Fix GS hotkeys losing values after reboot</PCSX2PRLink>\\n\\nMakes sure that the hotkeys still retain their function after rebooting.\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4876\\">Fix memory card saving and trace log setting loading/saving</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4882\\">GUI: remove presets 4,5,6</PCSX2PRLink>\\n\\nPreset 4,5,6 (Preset 1 is bad too to be fair) were removed as they only brought specific improvements for specific hardware and it wasn\'t good in most cases anyway as it just did some random EE cyclerate and cycleskip.\\n\\nPCSX2 shouldn\'t obfuscate with mostly useless settings that will only appeal a minority.\\n\\nPersonally there should be only 3 modes for people:\\n\\n- Preset 2 which are the default settings (good for weaker computers that don\'t have enough cores)\\n- Preset 3 which is just Preset 2 + MTVU  (it is free performance for the taking for good hardware)\\n- Custom global and custom per-game settings (any other situation that does not benefit the other two above ones)\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4883\\">GUI : remove EE Cycle Skipping 3</PCSX2PRLink>\\n\\nSince all these major timing changes, this isn\'t really useful and broke more often than not.\\nMore often than not downclocking the EE Cyclerate will give better results for the more lower-end hardware.\\n\\nThough even in it\'s current state Cycleskip 1 and 2 will have decent results for Shadow of The Collosus which didn\'t run full speed on the \'PlayStation 2\'.\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"4888\\">Add the current profile to the status bar.</PCSX2PRLink>\\n\\nThe main window will now say what preset you are using.\\n\\n<Image src={require(\\"./img/Pic51-PCSX2Preset.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4896\\">GS Debugger: Show \\\\</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4905\\">Replace GSWnd with GL context wrappers, remove pDsp</PCSX2PRLink>\\n\\nThis is preparation part 2 to bring in the new Qt GUI.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4931\\">Core: Few more warnings fixup.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"italodirenzo93\\" prNums=\\"4975\\">Add \\\\</PCSX2PRLink>\\n\\nIf you moved or renamed your ISOs, you either had to nuke the recently played list, ignore it or set it back how it was before. More granular control on how you want to handle latest games played.\\n\\n<Image src={require(\\"./img/Pic52-RemoveMissingFiles.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4986\\">PCSX2-GUI: Fix GUI inconsistencies</PCSX2PRLink>\\n\\nWhile not as exciting as a new fix for a game, increased performance on better compatibility this will make the text more aligned with the rest of the windows. Though it did have a meaningful change that the maximum audio latency is now 200 instead of 750.\\n\\nThe default is still 100 ms (0.1 seconds of audio latency) on Xaudio2 but technically lower with Cubeb if you read that section and if you really need 750 ms (0.75 seconds of audio latency) then it\'s unlikely you will have a good experience on PCSX2. You may want to consider upgrading your computer in that case.\\n\\nCan you spot the differences?\\n\\n<Image src={require(\\"./img/Pic53-DEV9GUI.webp\\").default} />\\n<Image src={require(\\"./img/Pic54-PADGUI.webp\\").default} />\\n<Image src={require(\\"./img/Pic55-SPU2GUI.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4989\\">WX: Fix `pxExplore` on macOS</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"5030\\">GUI: Bring back F6 string (Aspect Ratio)</PCSX2PRLink>\\n\\nDoesn\'t need much explaining as it was gone by accident to show the keybinding for aspect ratio. Emulation development can have it fair share of regressions.\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5134\\">Rebase more de-wx-ifying from last month</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5220\\">GSDumpDialog: Cache length instead of querying every packet</PCSX2PRLink>\\n\\n### GameDB\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4768\\">GameDB: Typo Cleanup</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4868\\">GameDB :add \'SingStar ABBA\' entry</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4869\\">GameDB: Add VU clamping to Monster Rancher 3</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4877\\">GameDB: Add missing entry</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4935\\">GameDB: Add \'VUKickstart\' to \'Maken Shao\' games </PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4981\\">GameDB: Add and fix SingStar Entries</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Tokman5\\" prNums=\\"4984\\">GameDB: Add and fix Power Pros series</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4991\\">GameDB: Add EE clamping to \'Shadow of Zorro\' and \'Evil Twin - Cyprien\'s Chronicles\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5004\\">GameDB: Add nearest rounding to \'Hitman - Contracts\' and various fixes </PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5007\\">GameDB: Add \'GIFFIFOHack\' to \'Gunfighter 2 - Legend of Jesse James\'</PCSX2PRLink>\\n\\n<SliderCompare before={require(\\"./img/Pic31-GunfighterBefore.webp\\").default} after={require(\\"./img/Pic32-GunfighterAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5020\\">GameDB: Add EE-Rounding and VU-Rounding to various entries</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5023\\">GameDB : Add various fixes for various games and remove not needed patches </PCSX2PRLink>\\n\\n<SliderCompare before={require(\\"./img/Pic29-OnimushaBefore.webp\\").default} after={require(\\"./img/Pic30-OnimushaAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5049\\">GameDB : Add fixes for various games </PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5057\\">Gamedb: Remove the patch for Virtua Fighter 4</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5058\\">GameDB: Purge patches for \'Knockout Kings 2002\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5060\\">GameDB: Fix Fuuraiki 2 patch</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5073\\">GameDB: Add fixes for \'Shadow Man - 2econd Coming\' and \'Ghosthunter\' games.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5093\\">GameDB: Add \'VIFFIFOHack\' to \'Men in Black II: Alien Escape\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5097\\">GameDB: Add \'VUKickstartHack\' to \'Crash Twinsanity\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5106\\">GameDB: Add patches to the \'K-1 World\' series games add EE clamping full to \'D1 Professional Drift Grand Prix Series\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5114\\">GameDB: Add EEclamping full to \'Shinobido Takumi\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5116\\">GameDB: Add VU clamping to \'MVP Baseball 2003\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5118\\">GameDB: Add EEtiminghack to \'MGS2\' and change VU- and EE-rounding for \'Primal\' and add missing entries </PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5145\\">GameDB: Add patches to the \'Netsu Chu!\' series and  \'Samurai 7\' series</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5148\\">GameDB: Add EE-clamping to \'Chou Saisoku! Zokusha King B.U.\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5150\\">GameDB: Add EE-clamping to \'Dark cloud 2\'</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5153\\">GameDB: Add patches to 2k games</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Tokman5\\" prNums=\\"5158\\">Add \\\\</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5166\\">GameDB: Add more 2k games patches</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5172\\">GameDB: Add gamefixes to \'Titeuf Mega-compet\' and patch \'Yamiyo ni Sasayaku - Tantei Sagara Kyouichirou\' series</PCSX2PRLink>\\n\\n<SliderCompare before={require(\\"./img/Pic27-TiteufBefore.webp\\").default} after={require(\\"./img/Pic28-TiteufAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5178\\">GameDB: Add EE Clamping to \'Digimon Battle Chronicle\' and fixes to other games</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5185\\">GameDB: Change VU-clamping on \\\\</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5187\\"> GameDB: add VU-clamping to \\\\</PCSX2PRLink>\\n\\nThe game had wrongly colored eye textures (yellow/blue) but are now correctly white:\\n\\n<ImageCompare left={require(\\"./img/Pic25-UltimateBefore.webp\\").default} right={require(\\"./img/Pic26-UltimateAfter.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5199\\">Merge the Qt branch: Part 1</PCSX2PRLink>\\n\\nThe new GUI is moving along very well, but is not at feature parity as the current WX-Widgets GUI is. Please be patient when it will be released to you guys.\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5234\\">GameDB: Remove patches for  \'Neo Contra\' and add EE rounding and clamping</PCSX2PRLink>\\n\\n### Maintenance\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4140\\">Remove wxString \u2194\ufe0e std::string implicit conversions</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4709\\">GS Include Cleanup</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4786\\">Remove configuration coupling to GUI</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4818\\">Add partial LTO to CMake</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4822\\">EE: Fix JIT exits on 64-bit Windows</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4855\\">Fix some compile warnings spewed by MSVC x64</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4872\\">FreeBSD fixup</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4908\\">Remove 30-day artifact retention on windows builds</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4929\\">Remove GTK dependency on macOS</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4938\\">Fix compilation with LTO on GCC</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4970\\">actions: create automatic controller db updating workflow</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4973\\">actions: cleanup discord embed links and add release body</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"qurious-pixel\\" prNums=\\"4978\\">Create AppRun hook to handle variables</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4982\\">GHActions: Don\'t shallow clone submodules</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4994\\">actions: increase max linux build times as well until cache-hit rate is reliable</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4999\\">CMake: Always default `CMAKE_BUILD_PO` off</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"orbea\\" prNums=\\"5010\\">Update libchdr</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"5033\\">Update the FAQ, as well as some general cleanup.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5039\\">3rd Party: Update rogue file to correct BSD license</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5040\\">Build: Remove old unused cheatscpp.h file</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"5043\\">GitHub: Update and add new issue template for non-game related bug reports</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"MrCK1\\" prNums=\\"5051\\">3rdparty: Upgrade soundtouch lib to 2.3.1</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"MrCK1\\" prNums=\\"5052\\">3rdparty: Upgrade xbyak to 6.00</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"5059\\">actions: Only announce `pre-release` releases</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"kenshen112\\" prNums=\\"5077\\">Fixes to CMake and version upgrade with CMake</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"dependabot\\" prNums=\\"5083\\">Bump mathieudutour/github-tag-action from 5.6 to 6.0</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"dependabot\\" prNums=\\"5084\\">Bump actions/cache from 2.1.6 to 2.1.7</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"5090\\">Readme : update links</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5091\\">GHActions: Fix Mac build</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"5099\\">GameDB / Memcards - Replace `yaml-cpp` with `rapidyaml`</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"5100\\">Linux and Windows CMake Builds: Change output executable to lowercase</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5108\\">VS: Add some missing vcxproj filters</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"5115\\">Only pass C++ flags to C++ files.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"5132\\">Make native builds default on Linux when using build.sh. Remove unused switch.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5152\\">CMake: Remove gio dependency on macOS</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5161\\">VS: Fix location of shaders in project</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"shiorid\\" prNums=\\"5215\\">FreeBSD: fix compilation</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5219\\">GHActions: Fix game controller db updater</PCSX2PRLink>\\n\\n### Other\\n\\n<PCSX2PRLink prNums=\\"4843\\">PGIF: Remove force fifo clear on GP1 (00-01)</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4856\\">Common/StringHelpers: Fix printing of 64-bit pointers</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4890\\">IOP Recompiler: Fix BIOS trace logging on 64bit</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4900\\">Common: Fix AT&T mixup in FastJmp code</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4920\\">Config: Fix zoom/stretch options not updating on Apply</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4943\\">Misc: Fix more warnings.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4972\\">EE JIT: Backup shift on LDR/L if rs==rt</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4979\\">CI:Add build date to program log of nightly builds</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"github-actions\\" prNums=\\"5001\\">pad-linux: Update to latest controller database</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5019\\">VSProps: Set MultiProcessorCompilation in CodeGen props</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"5037\\">GIF: Modify fifo read behaviour</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"5141\\">EERec: Remove zero-distance jmp in full fpu mode</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"5164\\">Common: Fix GetWorkingDirectory on unix</PCSX2PRLink>\\n\\n## Metadata\\n\\nSee you in our next progress report that is the first quarterly of 2022.\\n\\nQ4 2021:  \\n(dev1838 to dev2185) (2021-10-01 - 2021-12-31)"},{"id":"/2022/new-website","metadata":{"permalink":"/pcsx2-net-www/blog/2022/new-website","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2022/new-website/index.mdx","source":"@site/blog/2022/new-website/index.mdx","title":"New Website!","description":"If you\'re reading this post, that means we\'ve migrated to our new website.  Expect further changes and improvements as we iron out the details.","date":"2022-03-18T14:14:03.480Z","formattedDate":"March 18, 2022","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.54,"hasTruncateMarker":true,"authors":[{"name":"Vaser","url":"https://github.com/xTVaser","imageURL":"https://github.com/xTVaser.png","key":"vaser"}],"frontMatter":{"authors":["vaser"],"date":"2022-03-18T14:14:03.480Z","description":"If you\'re reading this post, that means we\'ve migrated to our new website.  Expect further changes and improvements as we iron out the details.","draft":false,"image":"./feature-poor-perf-splash.webp","tags":["devblog"],"title":"New Website!"},"prevItem":{"title":"Q4 2021 Progress Report","permalink":"/pcsx2-net-www/blog/2022/q4-2021-progress-report"},"nextItem":{"title":"Life is short, embrace it","permalink":"/pcsx2-net-www/blog/2022/life-is-short"}},"content":"For a myriad of reasons, we\'ve migrated to a new website.  It should be much easier to maintain and edit -- so hopefully this translates into more interesting articles, quicker progress-reports and eventually a more streamlined experience for finding game compatibility issues.\\n\\n\x3c!-- truncate --\x3e\\n\\nOld blog posts and articles will slowly be moved over to this site with the old URL formats being preserved.  This means that in the long-term, there should be no dead links.\\n\\nNo migration is complete without some small hiccups though, and there will likely be some rough edges that need to be smoothed out, so bear with us!\\n\\n<SliderCompare before={require(\\"./img/old.webp\\").default} after={require(\\"./img/new.webp\\").default} />"},{"id":"/2022/life-is-short","metadata":{"permalink":"/pcsx2-net-www/blog/2022/life-is-short","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2022/life-is-short/index.mdx","source":"@site/blog/2022/life-is-short/index.mdx","title":"Life is short, embrace it","description":"There are events that happen in your life that make you sit back and question your own mortality and if you are doing everything you can to appreciate what you have","date":"2022-01-09T14:14:03.480Z","formattedDate":"January 9, 2022","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.385,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2022-01-09T14:14:03.480Z","description":"There are events that happen in your life that make you sit back and question your own mortality and if you are doing everything you can to appreciate what you have","draft":false,"image":"./feature-nobbs66.png","tags":["devblog"],"title":"Life is short, embrace it"},"prevItem":{"title":"New Website!","permalink":"/pcsx2-net-www/blog/2022/new-website"},"nextItem":{"title":"AetherSX2 brings PCSX2 to mobile","permalink":"/pcsx2-net-www/blog/2021/aethersx2-brings-pcsx2-to-mobile"}},"content":"There are events that happen in your life that make you sit back and question your own mortality and if you are doing everything you can to appreciate what you have, events that are meant to test our humanity and remind us that our time on this earth is only temporary.\\n\\n\x3c!-- truncate --\x3e\\n\\nToday this reminder came in the form of our beloved team member [Nobbs66](https://forums.pcsx2.net/User-Nobbs66) or as he was known in real life, Gavin Schulte, who on the 8th Jan 2022 woke up feeling unwell, and later went to the hospital suspecting appendicitis; This turned out to be a splenic aneurysm which ruptured and took his life despite the excellent health workers attempts to save him.  Gavin was at the young age of 24 and lived by his partner [Blyss Sarania](https://forums.pcsx2.net/User-Blyss-Sarania); They both loved and supported each other very much, and they both became something of a love story of the forum (better than Twilight, right?), and to see it end in such a sudden and tragic way has just been heart-breaking for all of us.\\n\\nGavin was such a kind person, always liked to joke and string you along for the ride, he was our prankster but it was never malicious, he was always good by everyone and tried to do his best for everybody, but yet we have to say goodbye to one of our beloved friends in the most cruel fashion.  Our hearts go out to his family and to Blyss of course, who will be suffering the most during this time, we will be there for you where we can be.\\n\\nRest in Peace, Gavin Schulte, 1997-2022\\n\\n<Image cols={4} src={require(\\"./img/gavin.webp\\").default} />"},{"id":"/2021/aethersx2-brings-pcsx2-to-mobile","metadata":{"permalink":"/pcsx2-net-www/blog/2021/aethersx2-brings-pcsx2-to-mobile","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2021/aethersx2-brings-pcsx2-to-mobile/index.mdx","source":"@site/blog/2021/aethersx2-brings-pcsx2-to-mobile/index.mdx","title":"AetherSX2 brings PCSX2 to mobile","description":"As you have probably seen by now, there is a new Android emulator in town called AetherSX2, which shows to have very promising performance and compatibility","date":"2021-11-24T00:00:00.000Z","formattedDate":"November 24, 2021","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.265,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2021-11-24T00:00:00.000Z","description":"As you have probably seen by now, there is a new Android emulator in town called AetherSX2, which shows to have very promising performance and compatibility","draft":false,"image":"./feature-AetherSX2sm.webp","tags":["devblog"],"title":"AetherSX2 brings PCSX2 to mobile"},"prevItem":{"title":"Life is short, embrace it","permalink":"/pcsx2-net-www/blog/2022/life-is-short"},"nextItem":{"title":"Q3 2021 Progress Report","permalink":"/pcsx2-net-www/blog/2021/q3-2021-progress-report"}},"content":"An exciting bit of news! As you have probably seen by now, there is a new Android emulator in town called AetherSX2, which shows to have very promising performance and compatibility. While the latter is due to it being based on an LGPL licensed emulator for PC (that\'s us!), the former is due to the clever work of the developer Tahlreth.\\n\\n\x3c!-- truncate --\x3e\\n\\nAs you can expect, at first we were very skeptical about this, due to the whole situation with DamonPS2 that you may remember; a new Android emulator appearing needed to be approached with caution. But instead of being met with hostility, the developer was very forthcoming and friendly, and was more than willing to discuss the remaining barriers, and the path to overcome them.\\n\\nSince there have also been several people concerned about the licensing behind PCSX2, we decided to try and explain the situation and how it pertains to the GPL and LGPL license.\\n\\nPCSX2\'s core code is LGPLv3 licensed, which is compatible with the GPLv3 license, and all the plugin code which has been merged during the 1.7 dev cycle was relicensed to LGPL with authorisation from the authors, too. However, there\'s also 3 bits of GPL code used in the project that remain:\\n- Some debugger code from PPSSPP\\n- The FreeType library which is used for our OSD\\n- libmpeg2 which is used for video decoding\\n\\nThe existence of these 3rd party GPL parts means that PCSX2 as a combined works needs to comply to the GPLv3 license but our source code that we own remains LGPL.&nbsp; By distributing the code when requested we comply with the GPLv3 license. See the GNU FAQ [here](https://www.gnu.org/licenses/gpl-faq.html.en#IfLibraryIsGPL) and [here](https://www.gnu.org/licenses/gpl-faq.html.en#AllCompatibility). If these mentioned libraries are removed, the entire project would become purely LGPL licensed.\\n\\nThese concerns of course extended out to this new emulator, and we had to reach out about it to Tahlreth. After a good discussion with him about these issues, we have been assured that it will no longer be a problem by the time the emulator releases. Right now the only piece of GPL code they need to contend with is libmpeg2, which can be replaced with FFmpeg, which is under the LGPL license; this is something we planned on doing in the future, since libmpeg2 is over a decade old. As for the aforementioned debugger and Freetype code, they no longer exist. Aether has its own OSD and no debugger, meaning the emulator will be entirely LGPL.\\n\\nIn addition, the developer very kindly let us see an early alpha of the emulator, and it runs better than most of us expected! We are really looking forward to recommending it to all those wanting PCSX2 on Android, as this is probably the best it\'s gonna get.\\n\\nFor final words, we\'d like to warn the community about false information and fake software. So far, even we have caught numerous fake APKs, (ongoing) impersonation attempts, faked/stolen videos, brigading, and misinformation regarding AetherSX2. We want to emphasize that it is currently in closed beta, and is only available for select people. While there is currently no version available to the public, the emulator is going to be free once released, collect no data, and is not planned to be distributed outside of the Google Play Store.\\n\\nFor your own safety, be sure NOT to:\\n\\n- Download or install any APKs that are shared through youtube links or other sources, as likely contain viruses or copies of different emulators\\n- Pay attention to people claiming to be a developer other than /u/Tahlreth on Reddit\\n- Believe anybody is affiliated with AetherSX2 unless confirmed by /u/Tahlreth\\n- Trust any social media outlet except the official subreddit /r/AetherSX2, unless trusted news sources report on it, Tahlreth (at time of posting) has no other social presence such as Discord\\n\\nPlease wait for follow-up announcements and information from Tahlreth directly on [/r/AetherSX2](https://www.reddit.com/r/AetherSX2/).\\n\\n![](./feature-AetherSX2sm.webp)"},{"id":"/2021/q3-2021-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2021/q3-2021-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2021/q3-2021-progress-report/index.mdx","source":"@site/blog/2021/q3-2021-progress-report/index.mdx","title":"Q3 2021 Progress Report","description":"The last plugin has been merged, and much more!","date":"2021-11-13T23:33:07.017Z","formattedDate":"November 13, 2021","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":13.665,"hasTruncateMarker":true,"authors":[{"name":"RedDevilus","url":"https://github.com/RedDevilus","imageURL":"https://github.com/RedDevilus.png","key":"reddevilus"},{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"}],"frontMatter":{"authors":["reddevilus","lightningterror"],"date":"2021-11-13T23:33:07.017Z","description":"The last plugin has been merged, and much more!","draft":false,"hide_table_of_contents":false,"image":"./feature-progrepq32021.webp","tags":["progress-report"],"title":"Q3 2021 Progress Report"},"prevItem":{"title":"AetherSX2 brings PCSX2 to mobile","permalink":"/pcsx2-net-www/blog/2021/aethersx2-brings-pcsx2-to-mobile"},"nextItem":{"title":"Q2 2021 Progress Report","permalink":"/pcsx2-net-www/blog/2021/q2-2021-progress-report"}},"content":"The last plugin has been merged, and much more!\\n\\n\x3c!-- truncate --\x3e\\n\\n## Core Improvements\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"4436\\">Core/GS: Merge last plugin GSdx into the Core</PCSX2PRLink>\\n\\nAs we finally merge the last plugin namely the one responsible for the graphics settings (upscaling, blending, shaders) we can look back towards the past releases. Plugins were once a great source to decouple the core team and separate contributors so neither one wasn\'t blocked for doing improvements, however, these plugin creators diminished over the years until 2016 had not many advancements:\\n\\nThere was pretty much only ongoing work for USBqemu-wheel by jackun and CLR-DEV9 by TheLastRar, not only that the core team had better replacements over time and the last plugin creators also became de facto more a core contributor and residing in the discord group. While we do lose some other notable plugins that are highly requested like Nuvee for LightGuns, OnePad legacy which handled controller remapping but these are only temporary drawbacks as the pros outweigh the cons as you don\'t need to scour our website or GitHub for plugins and fewer clicks in the GUI.\\n\\nIt\'s also one of the reasons why Q2 2021 was on the meager side, it blocked a lot of contributors potential work or even would invalidate other PRs.\\n\\n### DEV9\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4220\\">Add Internal DNS server</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4834\\">Auto Gateway Fix for winPcap backend</PCSX2PRLink>\\n\\nIn this quarter TheLastRar has added a fix for the gateway which is the route outside your local network as it will now work manually or automatically. There is also the new internal DNS server if you know what the hosts file on your computer is, it\'s that. If you don\'t know you can compare it to a telephone book where it has your contacts with their names (URL/Websites) and their telephone number (IP addresses / Location) this is available in your ini folder.\\n\\n### Counters\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4621\\">Reset Timer Count Regardless of Interrupt Enable</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4647\\">Correct H-Blank for 1080i mode</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4690\\">COP0 PCCR: Don\'t update counters if counting is disabled</PCSX2PRLink>\\n\\n- Gets rid of the spooky apparition in Grand Theft Auto 3 if you watch the intro.\\n- This is kind of just enabling the old code which was kind of correct, but the old code didn\'t ignore the time passed, so this also updates the last cycles.\\n\\n> RedDevilus: \\"I\'ve recently bought GTA 3 second-hand and did my regular testing phase when I heard talks about a cloned character, it was not triggered on my screen because I skipped the intro FMV. So if anyone says we only fix certain games or big bugs, you can look again. It was a minor bug that was actually a regression. Meanwhile, before the fix, I had my own methods of solving the issue but refraction wasn\'t happy with this brute-force approach\\"\\n\\n<Image cols={6}src={require(\\"./img/github_red_gta3.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"9892624242fc548d836f0f664b440a31436c76bd\\"> Fix scanline count for double strike modes</PCSX2PRLink>\\n\\n### MTVU\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4503\\">Enable T-Bit to work with MTVU</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"98b19656c9f79c11c22a8ecc07521c42f9e256d1\\">VU: Fix address masking in MTVU</PCSX2PRLink>\\n\\n### VU\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4539\\">Improve sync with VU Kickstart, loosen without kickstart</PCSX2PRLink>\\n\\nThis tightens the VU Sync with the EE when Kickstart is enabled to fix some SPS in PAL Ratchet games, also loosened it slightly when Kickstart is disabled to improve the speed of games that don\'t require it.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4694\\">Optimise entering VU JITs</PCSX2PRLink>\\n\\nThis is a pretty huge performance uplift on multiple games, it\'s one of the hugest gains (with the exception being the frametimes tolerance PR) of the dev build cycle.\\n\\nKeep in mind the Speed percentage for the title bar on top of the viewport (also referred to as the emulation window) are the emulator frames called VPS, or in full Vsync per second in essence, how much the emulator refreshes but not the game itself which would be the Internal Frames or real FPS. It could be 60 VPS and 60 FPS (like Final Fantasy X pause screen) or 60 VPS with 20 FPS or other combinations like SOCOM II menus are 33-34 FPS even though it reports 60 VPS so you can feel the differences.\\n\\nAnother side note is that for normal PC games the internal resolution = viewport but in PCSX2 case, it\'s separated in Graphics Settings for upscaling and in General Settings where GS Window is, is the location of how big your viewport (window size) would be.\\n\\nHere is an example of 3 tested games:\\n<Image cols={6}src={require(\\"./img/3chart_VU_JITs.webp\\").default} />\\n\\n- Ratchet: +12.36%\\n- Tekken: +19.8%\\n- My Street: +1.91%\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"93e5f86e243161cceaefdfd02216d509632414ac\\">Mask start addresses</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"ddb300027cad1fab71286665614ddcc461cbb93f\\">Improve sync during interlock and Scratchpad VU mem writes</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"b919de9dd181f5b2b9984b01768c6d5720404e2e\\">Adjust sync timing for VU Kickstart - Fixes Crash Twinsanity</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"154ed57633503ff7ab8f99254a874bae0d2392bf\\">Remove the need to pass VU struct to XGKick function</PCSX2PRLink>\\n\\n### microVU\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4487\\">Consolidate I-bit hacks into one generic one</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4703\\">Skip VU1 instructions on VU0</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4719\\">Combine mVU0cacheReserve and mVU1cacheReserve</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4767\\">Replace XGKick hack with synced XGKick option</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"8f82cd11b9e8e8d9ccc30be91a7b99be47e13e1b\\">Avoid half-completed program loading null block</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4668\\">Don\'t emit add reg, 0 in a few instructions #4668</PCSX2PRLink>\\n\\n### GIF\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4619\\">Reimplement GIF FIFO to enable only when it is needed</PCSX2PRLink>\\n\\n### VIF\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4726\\">VU int improve</PCSX2PRLink>\\n\\nOur interpreters were frankly inaccurate and slow, this Pull Request has improved the accuracy in turn fixing a lot of visuals on uncountable games. Most people won\'t notice this change but it can help in comparing between the speedy recompilers if there is a bug hiding in plain sight.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"97bfe08c04a6bc45f4f77c95078095c62f4a370b\\">Only enable reverse FIFO hack if VIF1 is still active</PCSX2PRLink>\\n\\n### SPU2\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4530\\">Delete broken/unused alsa backend</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"MrCK1\\" prNums=\\"4574\\">Minor cleanup</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4581\\">Remove NEVER_SKIP_VOICES</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4582\\">remove unused variable</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"MrCK1\\" prNums=\\"4591\\">Remove user options for disabling reverb and de-alias filter</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4648\\">Remove Waveout backend from Windows</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4699\\">Adjust DMA timings for IRQ\'s and small packets</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4700\\">Don\'t initialise sound buffer if it\'s not open</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4774\\">Disallow KeyOn within 2T of last KeyOn</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"CookiePLMonster\\" prNums=\\"4803\\">PortAudio: Remove DirectSound backend</PCSX2PRLink>\\n\\nPerhaps an oversight as we removed DirectSound module but it was still listed as a Host API for PortAudio, reason for removal is it tends to break audio samples to even refuse to work at all. In the future, it would be nice to have Cubeb as an audio module.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2,Ziemas\\" shas=\\"06d6001b0cc869c955ab18b110a0d3d963849ad1\\"> Add rogue BIOS loop point which Megaman X7 relies on</PCSX2PRLink>\\n\\n### USB\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4571\\">Freeze mode enum for keyboardmania</PCSX2PRLink>\\n\\n### CDVD\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4578\\">CHD: Fix parent search on windows</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"4645\\">Fix CdlReadS for PS1 games with CDDA</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"4646\\">Implement SCMD 0x27</PCSX2PRLink>\\n\\n- Implement SCMD 0x27 to allow PS1 games to boot on SCPH-50009 and DTL-H50009 bios.\\n- According to krat0s, this command should return PS1 Disc Serial.\\n- Disc Serial is later used by ps1drv itself to find matching game config.\\n\\nNote: While DTL consoles are known to use region-free PS1 bios, SCPH-50009 uses Asia/Japan PS1 bios, and region lock applies here.\\n\\nFor the observant people if you have looked at our compatibility rating you may have noticed that we had 0 games for several months until we detected that the Chinese entries and BIOS were different in code and very few exist in our proximity. Now we are up to 2 entries (actually 1 but the forum compatibility needs an update).\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4702\\">Fix up Pause and some Status behavior</PCSX2PRLink>\\n\\nCorrectly sets the CDVD Status after a Pause command and corrects how the CDVD Status is handled during N-Commands. Also adjusted game fixes as necessary for known fixed games. Some games refused to boot as PCSX2 ignored the correct way to handle them.\\n\\n### IPU\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"4526\\">IPU: Fix SETTH threshold masks</PCSX2PRLink>\\n\\n- According to available sources, it\'s 8:0 for transparency, and 24:16 for translucency.\\n- Currently, PCSX2 is masking bits 8 and 24 making them always 0.\\n\\nIn essence, IPU handles FMV/cutscenes and this PR improves some issues with them.\\n\\nHype Time Quest: Before &gt; After\\n\\n<ImageCompare left={require(\\"./img/Hype-Time-Quest-befores.webp\\").default} right={require(\\"./img/Hype-Time-Quest-afters.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"4613\\">IPU: Store thresholds for color conversions in u16, bump savestate version</PCSX2PRLink>\\n\\n### Debuggers\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4638\\">Debugger: Add option to display VU0F registers as floats</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"JayFoxRox\\" prNums=\\"4644\\">Debugger: Fix vmulai and vmaddai disassembly</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4671\\">Debugger: Purge 64 / 32 bit register view options</PCSX2PRLink>\\n\\nRemove the option to view &gt; 32 bit registers as 32 bit or 64 bit and instead display the entire register value.\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4741\\">Debugger: CtrlRegisterList: Fix warning and screw up</PCSX2PRLink>\\n\\n### Misc core\\n\\n<PCSX2PRLink authors=\\"TellowKrinkle\\" prNums=\\"4742\\">Emitter: Use 64-bit operations on x64</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"fjtrujy\\" prNums=\\"4636\\">HostFS: Add remove file functionality</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"4642\\">PGIF: Code refactoring/cleanup</PCSX2PRLink>\\n\\nPlaying PS1 games has been a passion for some but we don\'t recommend it in its current state. However, we made some big improvements but it\'s better to use a dedicated PS1 emulator like DuckStation.\\n\\nHere are some example comparisons of the improvements we witnessed:\\n\\nResident Evil: Before &gt; After\\n<SliderCompare before={require(\\"./img/RE-befores.webp\\").default} after={require(\\"./img/RE-afters.webp\\").default} />\\n\\nStreet Fighter EX Plus Alpha: Before &gt; After\\n<SliderCompare before={require(\\"./img/SF-EX-befores.webp\\").default} after={require(\\"./img/SF-EX-afters.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4676\\">IOPBios: Fix OOB read when IRQ line is invalid</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4739\\">EE JIT: Implement SDR/SDL, LDR/LDL instructions</PCSX2PRLink>\\n\\nThis has a very huge performance lift, though this is the best-case scenario if it uses these instructions.So don\'t expect games to reflect such large performance increases like these charts would initially suggest.\\n\\n<Image cols={6}src={require(\\"./img/Ref_SDL_SDRs.webp\\").default} />\\n\\nAbove were refraction\'s results from the homebrew ELF, located here: SDL/SDR LDL/LDR Homebrew ELF\\n\\nBelow are the results of RedDevilus on the same homebrew which taxed the registers.\\n\\n<Image cols={6}src={require(\\"./img/red_SDL_SDR.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"627f216bf770c4ff1b7f2f9c4f2c3b3f293680ce\\"> Core: Reset game CRC when rebooting. Avoids previous games patches being loaded</PCSX2PRLink>\\n\\nAn oddity was discovered where patches meant for one game were accidentally injected into another which effectively broke games. Oops!\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4667\\">iR5900: Use a signed multiply for MULT1 const prop</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4748\\">R5900: Fix LWL did not sign extending in interpreter</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4548\\">IOP Interpreter: Warn on branches to zero</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"CookiePLMonster\\" prNums=\\"4523\\">Misc: Replace ATL with WIL</PCSX2PRLink>\\n\\nWhile this may seem an innocent library API change (how it interprets everything from instructions to clicks)\\n\\nDefinition of WIL: The Windows Implementation Libraries (WIL) is a header-only C++ library created to make life easier for developers on Windows through readable type-safe C++ interfaces for common Windows coding patterns.\\n\\n> Silent: \'I used their CoInitializeEx that explodes loudly on failure, so regressions = quietly ignored errors in the code started showing up spectacularlyATL-&gt;WIL refactor itself isn\'t that interesting, if anything those regressions wereas they were issues that were always around but quietly ignored instead of manifesting themselves in an obvious way.\'\\n\\nSo as you can refer from Silent\'s statement, it led to a domino effect in that lots of things seemed to break from audio to wherever, as seems consistent with PCSX2 how did this even work in the first place to then see old bugs float to the surface hiding in wait. Every day PCSX2 becomes less hacky and has a more sane codebase. You can imagine the chaos and the confusion it brought to many when trying to comprehend it all not only in terms of the PS2 but how PCSX2 has implemented it.\\n\\n## GS Improvements\\n\\n### Misc GS\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4508\\">GS-hw: Enable pabe bit only when sw blending is enabled</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"stenzek\\" prNums=\\"4615\\">GS: Manage draw rectangle in GS instead of wx</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4632\\">GS-d3d11: Cleanup fxaa and external shader</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4633\\">GS-d3d11: Minor Blend changes</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4664\\">GS-GUI: Add 7x Multiplier</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4682\\">GS-GUI: Enable Software Edge Anti-Aliasing by default</PCSX2PRLink>\\n\\nThis option helps several games on Software renderer but it won\'t help on a Hardware Renderer as it\'s not implemented at this time.\\nSome examples where AA is useful to fix issues:\\n\\nFinal Fantasy X: Before &gt; After - [#983](https://github.com/PCSX2/pcsx2/issues/983)\\n\\nLook at the weird line on the tree (bottom left) and the black triangle that is right of Tidus.\\n\\n<SliderCompare before={require(\\"./img/FFX_blue_wrong_SWs.webp\\").default} after={require(\\"./img/FFX_blue_correct_SWs.webp\\").default} />\\n\\nFinal Fantasy X: Before &gt; After - [#3341](https://github.com/PCSX2/pcsx2/issues/3341)\\n\\nLook at the blue triangle below Tidus.\\n\\n<SliderCompare before={require(\\"./img/ffx_wrong_sws.webp\\").default} after={require(\\"./img/FFX_correct_sws.webp\\").default} />\\n\\nDoko Demo Issho - Toro to Ippai, Toro to Kyuujitsu: Before &gt; After - [#4674](https://github.com/PCSX2/pcsx2/issues/4674)\\n\\nLook at the eyes of these weird cat characters.\\n\\n<SliderCompare before={require(\\"./img/toro_wrong_SWs.webp\\").default} after={require(\\"./img/toro_correct_SWs.webp\\").default} />\\n\\nFootball 2002: Before &gt; After\\n\\nLook at the number 4 on the orange shirt.\\n\\n<SliderCompare before={require(\\"./img/Football_2002_wrong_sws.webp\\").default} after={require(\\"./img/Football_2002_correct_SWs.webp\\").default} />\\n\\nSyphon Filter - Dark Mirror: Before &gt; After\\n\\nLook at the shadows of the character, a harder one to see than the other comparisons.\\n\\n<SliderCompare before={require(\\"./img/Syphon_dark_mirror_wrong_sws.webp\\").default} after={require(\\"./img/Syphon_dark_mirror_correct_SWs.webp\\").default} />\\n\\nThese are just a few examples, of course there are more.\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4706\\">GS: Update tooltip to remove reference to DirectX</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4789\\">GS-GUI: Add tooltip for Dithering</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4811\\">GS: Test for th for tex0 flush</PCSX2PRLink>\\n\\n<ImageCompare left={require(\\"./img/VampireNightBrokenBulletss.webp\\").default} right={require(\\"./img/vampire_fixeds.webp\\").default} />\\n\\n## Misc Improvements\\n\\n### GUI\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4512\\">Re-order config settings</PCSX2PRLink>\\n\\nIt will look closer to the layout of 1.6 stable release, help with muscle memory and visual cues.\\n<PCSX2PRLink authors=\\"Florin9doi\\" prNums=\\"4532\\">Set missing icons and update titles</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4620\\">Rehaul BIOS / Folder Selector</PCSX2PRLink>\\n\\nBIOS and folder tabs are now together in General Settings (Used to be called Emulation Settings)\\nThis will make it easier to find settings with fewer clicks, although there is a height issue that forces you to scroll for the time being.\\n\\n<Image cols={6}src={require(\\"./img/rehaul_BIOSs.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4640\\">AppMain: Fix no$ symbol loading for elfs</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4663\\">Misc: Fix lastpath updating when using the --elf cmdline arg</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4675\\">WX: Make position validation multi-monitor aware</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4750\\">Config: Normalize limiter values before saving</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4756\\">Stdio console on mac</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4791\\">Select a bios by default</PCSX2PRLink>\\n\\nThis will automatically click on the first BIOS in the list if you haven\'t selected one, affecting First-time Wizard and in General Settings. It\'s nice for the User Experience and it hopefully grows on you when using dev builds.\\n\\n<Image cols={6}src={require(\\"./img/BIOSs.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4798\\">Fix crash on assertion in newer wx</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4838\\">Make \'Synchronized MTGS\' UI settings exclusive to debug/devel</PCSX2PRLink>\\n\\nThe setting below has been quite the staple in releases and it has actually no business in here as its only purpose is debug and not the greatest at that.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4844\\">Move Vu overflow flag checks to a Gamefix + reorganise panel</PCSX2PRLink>\\n\\n### GitHub/CI\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4509\\">Update PR labelers to match GS merge</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4522\\">Split AVX2 and non-AVX2 windows builds</PCSX2PRLink>\\n\\nAt the start of this report was the last GS merge, it has produced one minor annoyance. We couldn\'t keep all 3 GS plugins, we removed SSE2 plugin (which frankly was bad anyway) then there was SSE4 and AVX2.\\n\\nWhat is PCSX2-AVX2?\\n\\nPCSX2 uses SIMD instructions to process graphics. The following are the SIMD instruction sets PCSX2 supports:\\n\\n- AVX2: Newest and fastest. Recommended for CPUs released in the last 8-10 years.\\n- SSE4: Older, still fast. Recommended for older CPUs which do not support AVX2.\\n- SSE2: Oldest, and slowest. Recommended only if your CPU is too old for SSE4.\\n\\nWhich one do I pick?\\n\\n- 1.6.0: PCSX2 will choose the appropriate plugin for you automatically.\\n- 1.7.0: Try pcsx2-avx2.exe. If the program fails to start, then use pcsx2.exe.\\n\\nSo in essence, if you have a 4th gen intel or higher with exception the Pentiums you are probably fine or AMD Ryzen series. In the future this will turn back into a single exe where it\'s default SSE4 with a checker to enable AVX2 if you support it.\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4529\\">Remove dashes from build names</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4840\\">Bump macos version to 11</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4657\\">GitHub: Switch to new issue forms</PCSX2PRLink>\\n\\n### Other misc\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4501\\">macOS: Fix async file reader error handling</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"CookiePLMonster\\" prNums=\\"4527\\">KeyboardQueue: Remove a Windows-specific critsec</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4554\\">3rdparty: add webpd project</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4566\\">Misc: Don\'t update homebrew when not necessary</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4570\\">Dependencies: Update GHC 1.5.4 to 1.5.8</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4592\\">Dependencies: Update OpenGL dependencies</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"GiantEnemyCrab\\" prNums=\\"4651\\">Misc: Add StartupWMClass to desktop file</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4670\\">Add Linux distro information to program log</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4701\\">App: Add Windows exe version information</PCSX2PRLink>\\n\\n### GameDB Improvements\\n\\nAs always there are many GameDB changes per quarter, since there are too many to even list we will just link the date range for merged pull requests, not counting directly pushed commits to master. List can be found at [GameDB Q3 2021](https://github.com/PCSX2/pcsx2/pulls?q=is%3Apr+is%3Aclosed+merged%3A2021-07-01..2021-09-30+base%3Amaster+sort%3Aupdated-desc+label%3AGameDB).\\n\\n[#4556](https://github.com/PCSX2/pcsx2/pull/4556) Noteworthy changes include patches for unplayable games which makes the games playable from [this](https://forums.pcsx2.net/Thread-Fixing-unplayable-games) thread. [RedDevilus](https://github.com/RedDevilus) took the patches and opened a pull request adding the patches to the GameDB.\\n\\nThank you all, see you in our next coverage, cheers.\\n\\n## Metadata\\n\\nQ3 2021:\\n(dev1300 to dev1837) (2021-07-01 - 2021-09-30)"},{"id":"/2021/q2-2021-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2021/q2-2021-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2021/q2-2021-progress-report/index.mdx","source":"@site/blog/2021/q2-2021-progress-report/index.mdx","title":"Q2 2021 Progress Report","description":"Q2 2021 Progress Report","date":"2021-07-05T00:00:00.000Z","formattedDate":"July 5, 2021","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":6.685,"hasTruncateMarker":true,"authors":[{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"},{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["lightningterror","bositman"],"date":"2021-07-05T00:00:00.000Z","description":"Q2 2021 Progress Report","draft":false,"hide_table_of_contents":false,"image":"./feature-progrepq22021.webp","tags":["progress-report"],"title":"Q2 2021 Progress Report"},"prevItem":{"title":"Q3 2021 Progress Report","permalink":"/pcsx2-net-www/blog/2021/q3-2021-progress-report"},"nextItem":{"title":"Q1 2021 Progress Report","permalink":"/pcsx2-net-www/blog/2021/q1-2021-progress-report"}},"content":"Q2 2021 Progress Report\\n\\n\x3c!-- truncate --\x3e\\n\\n## Core Improvements\\n\\n### DEV9\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4381\\">DEV9: Do not apply byteswapping to TX/RX FIFO writes/reads</PCSX2PRLink>\\n\\n- Remove the byte swapping done to TX/RX FIFO writes/reads performed via registers.\\n- Fixes Twisted Metal: Black Online Public Beta v. 1.0 unable to initialize network adapter.\\n\\n<PCSX2PRLink authors=\\"macmenot\\" prNums=\\"4364\\">Add ATA Idle Immediate (E1) stub</PCSX2PRLink>\\n\\n- Fixes HDD support for Street Fighter Alpha Anthology.\\n\\n<PCSX2PRLink authors=\\"macmenot\\" prNums=\\"4403\\">Consistently prefix all console output with DEV9</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4429\\">Update ATA code for wchar GHC</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4496\\">PCAP, check size of read packet</PCSX2PRLink>\\n\\n- In PCAP, check size of read packet. If the size exceeds the buffer we are using, drop the packet.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4448\\">Always use binary mode for HDD file</PCSX2PRLink>\\n\\n- Opening the file in binary mode is the intended behaviour (and was done in the most common situation),\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4449\\">Fix potential out of bounds access when manual DNS1 & automatic DNS2 are used together</PCSX2PRLink>\\n\\n- If DNS1 was manually specified, but DNS2 set to be automatically assigned, an off by one error could result in an out of bounds access to an array of adapter DNS addresses.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4442\\">Increase min HDD size to 40GiB</PCSX2PRLink>\\n\\n- Most games expect a HDD of 40GiB in size, and may fail to install as a result (and display a confusing error message).\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4304\\">Internal DHCP support</PCSX2PRLink>\\n\\n- Adds an internal DHCP similar to what CLR\\\\DEV9 offers for PCAP & TAP.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4433\\">Correctly populate DNS2 field with DNS2 IP</PCSX2PRLink>\\n\\n- Correctly populate DNS2 field with DNS2 IP in the DHCP section of the network ui.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4435\\">Sleep instead of yield in RxThread</PCSX2PRLink>\\n\\n- Yield might not leave the thread asleep long enough to prevent it from causing excessive CPU load.\\n- This also brings PCSX2 inline with CLR_DEV9 (which also sleeps for 1ms).\\n\\n### Memory Cards\\n\\n<PCSX2PRLink authors=\\"CookiePLMonster\\" prNums=\\"3941\\">Folder memcards: Add an index file to track order of files</PCSX2PRLink>\\n\\n> Adds an index file for folder memory cards in order to track timestamps\\nand order of files in the FAT partition properly. This normally\\nshouldn\'t matter, but there are at least a few games (ie. GTA games)\\nwhich rely on the order of files on the memory card. Previously, folder\\nmemcards would not care about the order and populate the partition in\\nwhatever order the host filesystem provided the files (so, in the case\\nof NTFS partitions, alphabetically). In reality, FAT partitions don\'t\\nspecify the order of files, which means in practice they are sorted to\\nthe order of creation.\\n\\n- Fixes saving in GTA games with folder memory cards.\\n\\n### microVU\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"6f7890b709d5e3f7f5b824781e493455efc92339\\">Fix mistake when setting Status Flag bits for Signed/Zero</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"3825\\">Change default of latency slider</PCSX2PRLink>\\n\\n### GIF\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"b60765e976f6b1c45117bbdd042f8d6698c63002\\">Remove MTVU spam that isn\'t required</PCSX2PRLink>\\n\\nSolves stuttering in MTVU mode in some games, and gets rid of some\\nannoying asserts which mean nothing.\\n\\n### SPU2\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"3825\\">Change default of latency slider</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"17519c21b4eeefbadaad3374bd98bdd43d44f1a6\\">Fix hi def audio streaming</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4474\\">Remove cycleptr, grab current cycles directly</PCSX2PRLink>\\n\\n- This just changes the SPU2 to get the current IOP cycle directly instead\\nof through a pointer. The non-pointer path seems to have been given up\\non anyway and there seems to be little reason for hiding it behind a\\npointer.\\n- This removes the path where SPU2 runs off the provided cycle argument to\\nSPU2Async, but that was unused anyway.\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4437\\">Make SPU use theDMA registers from iopHw.</PCSX2PRLink>\\n\\nThe SPU was managing its own DMA Addresses, this makes it use the iopHw\\nfunctionality for this instead.\\n\\n### PAD\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"4331\\">Just enablepressure on CMD 0x4F</PCSX2PRLink>\\n\\nFixes Warriors of Might and Magic GamePad not functioning properly.\\n\\n<PCSX2PRLink authors=\\"Lahvuun\\" prNums=\\"4466\\">Fix gamepad choice not affecting rumble test on Linux</PCSX2PRLink>\\n\\nThis change causes the currently selected GamePad to rumble instead of\\nthe first one.\\n\\n### Eyetoy\\n\\n<PCSX2PRLink authors=\\"Florin9doi\\" prNums=\\"4415\\">Motion buttonsupport.</PCSX2PRLink>\\n\\n### Debuggers\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4345\\">Bios threadview support.</PCSX2PRLink>\\n\\n### Misc core\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4399\\">Core / VU: Disable MTVU when VU1 Interpreter is selected.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"3860\\">Remove FPUCompare Hack</PCSX2PRLink>\\n\\nThe hack is no longer needed as full Clamping mode can be used instead.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4461\\">DifferentiateImpossible block clearing message from IOP & EE</PCSX2PRLink>\\n\\nPrefix the \\"Impossible block clearing failure\\" with \\"\\\\[IOP\\\\]\\" or\\n\\"\\\\[EE\\\\]\\" depending on the recompiler.\\n\\n<PCSX2PRLink authors=\\"Nobbs66\\" prNums=\\"4425\\">Fix Emulated PSXGPU Version.</PCSX2PRLink>\\n\\nPreviously it was thought that the PS2 would emulate the v2 GPU, but\\nhardware tests show that it emulates the V0 GPU.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2,tadanokojin,PSI-Rockin\\" prNums=\\"4460\\">Make DMA\'s instant during the BIOS</PCSX2PRLink>\\n\\n> This hackfixes the BIOS to avoid a Data Cache bug caused a DMA buffer\\nbeing overwritten during a transfer without waiting, which messes up the\\nfonts in the BIOS. Fixing this correctly would require implementing the\\nData Cache, which is something which would make the emulator basically\\nunusable, so this is a reasonable solution, it is only enabled during\\nthe BIOS screen.\\n\\n- Fixes certain bios revisions rendering text incorrectly.\\n\\n<PCSX2PRLink authors=\\"TellowKrinkle\\" prNums=\\"4498\\">MoverecConstBuf memory near recompiler memory</PCSX2PRLink>\\n\\n- Fixes an issue where recConstBuf was too far away from the main recompiler to LEA in 64-bit builds.\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"4482\\">Fix disc drivepath issues on Windows.</PCSX2PRLink>\\n\\n- Fixes [#3910](https://github.com/PCSX2/pcsx2/issues/3910) - CDVD Regression: Booting a physical disc inserted after opening PCSX2 doesn\'t work. (Regression only affects Windows).\\n- Fixes an issue where the drive choice is cleared if there is no disc in the selected drive when PCSX2 is first opened (Should only affect Windows, but non-Windows only code is touched too).\\n\\n## GSdx Improvements\\n\\n### Misc GSdx\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4350\\">Removepartial and full crc hack levels on release builds</PCSX2PRLink>\\n\\n- Normal users shouldn\'t really need to choose partial or full since automatic already does that.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4383\\">Some minorcleanups.</PCSX2PRLink>\\n\\n## TAS (Tool Assisted Speedrun) Utility Improvements\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4382\\">Resolve crash when closing emulator involving GUI elements</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"e50a4463a532379296a7bc97195f899aa215514d\\">Add close box to New Input Recording</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4393\\">Allow configuration of the frame advance amount</PCSX2PRLink>\\n\\n- Adds a GUI configurable setting to control how many frames the frame-advance feature should advance.\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4392\\">Add warning when creating a save-state recording</PCSX2PRLink>\\n\\n- Adds a brief warning explaining why you may want to avoid save-state recordings, and what would have to be done if a bad state is achieved.\\n\\n## IPC (Interprocess Communication) Improvements\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"4337\\">Remove possiblememory corruption due to strcat on provided pointer</PCSX2PRLink>\\n\\n## GameDB Improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"467659200dd8165444eae402350b56f8ec2f26cf\\">Add patches for Elemental Gerad and K-1 Grand Prix 2006</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4388\\">Adds fixesfor Energy Airforce - Aim Strike , K-1 World Grand Prix 2006</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4405\\">add NearestEErounding to SSX and SSX tricky</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"icup321\\" prNums=\\"4462\\">Add Kickstartfor Rayman Raving Rabbids.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4478\\">Adds VUclamping mode extra to Enthusia Professional Racing</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4488\\">Remove nolonger needed \'OPHFLagHack\' for Naruto - Uzumaki Chronicles 2</PCSX2PRLink>\\n\\n## Misc Improvements\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4278\\">Grayout InstantVU1 when MTVU is enabled.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4377\\">Revise consolewith newline on compile + title</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4416\\">Swap buttonsBrowse... and Ask when booting and default to unchecked state</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4378\\">change window todebug in the menu and move blockdump to the debug menu</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4431\\">update the 2smaller app icons.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Mrlinkwii\\" prNums=\\"4438\\">change \'Consoleto Stdio\' to \'Program Log to Stdio\' in UI</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Florin9doi\\" prNums=\\"4454\\">Rename PSXreferences to PS1 distinguish between PS1 and DVR</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"4329\\">RemoveSSE2/SSE3 support</PCSX2PRLink>\\n\\nMoving forward with our goal to clean up and modernize the code we are\\nremoving SSE2/3 support.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4444\\">Save ELF lastpath when auto-running an elf</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4343\\">Enable GSdebugger on CI artifacts</PCSX2PRLink>\\n\\nAdds an CI environment variable to enable GS debugger on CI artifacts.\\nThis can also be enabled locally to enable the GS debugger.\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4418\\">Validate GameDBchanges in GitHub Actions.</PCSX2PRLink>\\n\\nCurrently, the emulator will fully validate the GameDB, which is how\\nwe\'ve been catching these recent mistakes. But this adds a CI check to\\nvalidate the file in a very similar manner at build time.\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4180\\">CI: Add an explicit flag to retain debugging artifacts (.pdb, .exp, .lib, etc) in Windows builds.</PCSX2PRLink>\\n\\n## Conclusion\\n\\nAnd that\'s all from us, see you next time in our 2021 Q3 Report!\\n\\n## Metadata\\n\\nQ2 2021:\\n(dev1164 to dev1299) (2020-04-01 - 2020-06-30)"},{"id":"/2021/q1-2021-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2021/q1-2021-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2021/q1-2021-progress-report/index.mdx","source":"@site/blog/2021/q1-2021-progress-report/index.mdx","title":"Q1 2021 Progress Report","description":"Once again we are back with another progress report bringing you amazing progress.","date":"2021-04-09T00:00:00.000Z","formattedDate":"April 9, 2021","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":12.005,"hasTruncateMarker":true,"authors":[{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"}],"frontMatter":{"authors":["lightningterror"],"date":"2021-04-09T00:00:00.000Z","description":"Once again we are back with another progress report bringing you amazing progress.","draft":false,"hide_table_of_contents":false,"image":"./feature-progrepq12021.webp","tags":["progress-report"],"title":"Q1 2021 Progress Report"},"prevItem":{"title":"Q2 2021 Progress Report","permalink":"/pcsx2-net-www/blog/2021/q2-2021-progress-report"},"nextItem":{"title":"Q4 2020 Progress Report","permalink":"/pcsx2-net-www/blog/2020/q4-2020-progress-report"}},"content":"Once again we are back with another progress report bringing you amazing progress.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Core Improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4115\\">PAD/Counters: MakeVSync Queue adjustable in the UI. Extra Pad update.</PCSX2PRLink>\\n\\nNew UI option (ini option has been there a while) so users can choose between a little bit extra performance or reduced input lag.\\n\\nAlso added the PAD Update to the VSync call in Counters as it seemed to reduce input lag marginally.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4066\\">IPU: Return contentsof the bottom of the FIFO in CMD except FDEC/VDEC.</PCSX2PRLink>\\n\\nThis is based on the work by [@PS1-Rockin](https://github.com/PSI-Rockin) on Dobiestation but modified based on the theory that it always returns the first 32bits of the FIFO unless an FDEC/VDEC command is executed, however FDEC is basically doing this anyway, but VDEC returns decoded information.\\n\\nFixed videos for probably all broken EA games, but namely:\\n\\n- F1 2001\\n- F1 2002\\n- Neo Contra\\n- Shox\\n- Theme Park Rollercoaster/World\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4225\\">IPU: Fill Input FIFOon command end ready for next command.</PCSX2PRLink>\\n\\nDance Summit 2001: So basically what the game does is it does some IPU\\nstuff, but the DMA is left with 1 QWC left to be read on the DMA, on the\\nhardware this will normally be flushed in to the FIFO. The game then\\ndoes a FIFO reset (To get rid of it) then starts another DMA. The\\nproblem we have is because we still had the DMA pending for 1 QWC, it\\nignored the new DMA start and the IPU would hang up waiting for data to\\nbe fed in. This PR resolves that problem.\\n\\nTest Drive: Also added DMA 4 (To IPU) being flushed if BCLR is called\\nwithout first stopping the DMA.\\n\\nSet the Picture type on VDEC to I-Picture if set to 0 in the IPU\\\\_CTRL,\\nthis fixes a bunch of Eyetoy games which incorrectly set this register.\\n\\n- Fixes EyeToy Play(1-3).\\n- Fixes Bakufuu Slash!! Kizna Arashi.\\n- Fixes Kaiketsu Zorro Mezase! SIF0 and SIF1 stall control.\\n- Fixes Test Drive: IPU hang in middle of Event 5.\\n\\n### DEV9\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4062\\">Support 16bit reads/writes to SPD\\\\_R\\\\_PIO\\\\_DATA & SPD\\\\_R\\\\_PIO\\\\_DIR</PCSX2PRLink>\\n\\nThis improves [#3192](https://github.com/PCSX2/pcsx2/issues/3192), the online beta now sends a DHCP Discover packet, although it appears to be invalid.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4059\\">Generate unique MAC for TAP</PCSX2PRLink>\\n\\nAn unique MAC is needed for full compatibility with XLink Kai.\\n\\nUses a method similar to what was done for PCAP.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"3932\\">Add HDDemulation</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4214\\">Merge _DEV9*() functions into *Net(), and check ethEnable before calling InitNet()</PCSX2PRLink>\\n\\nPreviously, the ethEnable config value was not checked before starting network RX net thread.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4219\\">Fix crash on Linux when we fail to open the adapter</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4149\\">Re-add PCAP(both bridged and switched) on windows</PCSX2PRLink>\\n\\n### CDVD\\n\\n<PCSX2PRLink authors=\\"rtissera,SleepyMan,siddhartha77\\" prNums=\\"4314,4045\\">Add CHD compression format support</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4146\\">Increase buffer for DVD_LAYER_DESCRIPTOR.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4236\\">Implement mechacon command 0xEF</PCSX2PRLink>\\n\\n### microVU\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"ee07f860fc1dd7e8ada6c13903bb3a592b8d4864\\">microVU: Implement Overflow checks</PCSX2PRLink>\\n\\nFixes Superman Returns.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"413fd004da0ba46786b878683f6b177ad1bdcde7\\">microVU: Fix jump caching when using doJumpAsSameProgram</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"c9bc6eac69a3ceea6dffe6cec07b17caa1e2fc6e\\">microVU: Fix P flag instance on Ebit</PCSX2PRLink>\\n\\nAlso small fix for flag statuses on M-Bit on Branch.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"0f7044a90f62f84db4844292bb2bcc7d4cc7626b\\">microVU: Removed full flag optimisations</PCSX2PRLink>\\n\\nThey were unused, broken and cluttering up the code.\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"4198\\">Fix Esinopcode</PCSX2PRLink>\\n\\nSomeone accidentally used bad function to analyze ESIN opcode on microVU, that generated bad values due to wrong register field being used.\\n\\nFixes X2 - Wolverine\'s Revenge.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"f9d96f55a538ce373f1662a5554d8052173940b1\\">microVU: move the overflow flags to the correct position</PCSX2PRLink>\\n\\n### VIF\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"ddffd9acd671ee3165061980554d4a36c86eeb5e\\">VIF: Fix MPG VU Address wrapping</PCSX2PRLink>\\n\\nFixes Boogie.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"89991594de89b0068efd906286b5a39cc7c8186f\\">VIF: Clean up some old (incorrect) code</PCSX2PRLink>\\n\\n### SPU2\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4074\\">SPU2: Attempt 96khz sample rate if 48khz fails (WASAPI).</PCSX2PRLink>\\n\\nWASAPI is terrible and doesn\'t support sample rate conversion in shared\\n(normal) mode and requires exclusive mode.\\n\\nThis PR basically attempts to double the PS2 sample rate of 48khz to\\n96khz as this tends to be the other windows default. If this fails it\\nwill put a log message to say you need to use Exclusive mode.\\n\\nNote: When using PS1 game emulation you will need to use exclusive mode,\\nnothing I can do about this (44.1khz doesn\'t divide nicely from 48khz or\\n96khz).\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4057,4085\\" shas=\\"f1e44bfd47e3761388ebb5cc8ca4db78bb24916c\\">SPU2: Improve DMA/IRQ timing</PCSX2PRLink>\\n\\n- Fixes The Simple 2000 Series Vol 51 - The Senkan (AKA The Battleship) which was not booting with anything but ZeroSPU2\\n- Fixes The Simpsons, problem was due to an ADMA refill bug.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"f5d89062e02933b5dc4e090ff7c7f4dc5368ef26\\">SPU2: Update voices before DMA reads, reset OutPos on reset</PCSX2PRLink>\\n\\nImproves the booting reliability of GTA VC, especially on consecutive boots without closing the emulator.\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4134\\">Switch to a more accurate noise algorithm</PCSX2PRLink>\\n\\nThis algorithm comes from PCSX-R and is an implementation of Dr. Hell\'s research.\\n\\nThe previous implementation was a simple LFSR and did not use the\\nprovided noise clock from the ATTR register.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4171\\">SPU2: Improve ADMA behaviour/timing.</PCSX2PRLink>\\n\\n- Hopefully improves the crackling in burnout 3.\\n- Fixes music looping in Ratatouille.\\n- Fixes Vexx clicking sound (Partial ADMA transfers).\\n- Fixes the Dolby Pro Logic video missing sound in Primal (Partial ADMA transfers).\\n- Fixes Splinter Cell panning audio problem and high pitched noises in cut-scenes.\\n- Fixes Myst 3 panning audio problem.\\n- Fixes Dynasty Warriors 5 stuttering videos when Dolby is enabled.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"e0394921e98136547176f9a224a9bb9084fbda47\\">SPU2: Tighten AutoDMA IRQ timing</PCSX2PRLink>\\n\\nFixes games which monitor the MADR while transferring.\\n\\nFixes Tom & Jerry in War of the Whiskers jumpy music.\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4210\\">Adjust interpolation implementations</PCSX2PRLink>\\n\\nThese seems to be have been adjusted to match the output of catmull-rom\\nwhich is really the one in the wrong by being twice as loud.\\n\\nAs a result of the interpolated output being at a reasonable level we\\ncan use ApplyVolume to apply the ADSR volume.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4203\\">SPU2: Make sure cache hits match previous block decoded samples.</PCSX2PRLink>\\n\\nCaching blocks of ADPCM is a bit sketchy because the previous samples\\n(which it uses to generate the new ones) can change depending on if it\'s\\nthe start of the voice on or if it has looped around, so you can end up\\nwith blips and glitches in the sample stream, this should avoid that\\nproblem whilst not making the cache completely unusable.\\n\\nShould get rid of clicking and popping noises in loops samples.\\n\\nFixes Sphinx and the Cursed Mummy sound distortion.\\n\\nAlso fixes remaining blips in Vexx.\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4195\\">Add Gaussian interpolation</PCSX2PRLink>\\n\\nThis implements the actual SPU interpolation as documented by nocash.\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4226\\">Resample reverb input/output</PCSX2PRLink>\\n\\nThe reverb runs at half the sample rate of the rest of the SPU so a\\nchange of sample rate is required. The way this is currently done is by\\ndecimating when down-sampling and duplicating samples when up-sampling\\nwithout doing any filtering.\\n\\nThis adds proper filtering to this process, the filter coefficients are\\nfrom Mednafen but we think they were originally found by Neill Corlett.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"f42befadf10493a8ccb5a021de416cc1efeb5e03\\">SPU2: Try to recover DMA pointer after savestate load</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4186\\">SPU2: Ignore LSAL/H Writes after key on if voice sets loop point.</PCSX2PRLink>\\n\\nFixes behaviour with loop address writes within 4T\'s of a voice keying\\non which is what the old Delay Cycles tried to address, if the voice\\nsets its own loop point the write from hardware is ignored.\\n\\nFixes Mafia music loops.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"ce8047bd8cb8d036ed3ba4e9cd2f85743f018ccd\\">Reset IRQ Status when swapping game in case it got set previously</PCSX2PRLink>\\n\\n### Memory Card\\n\\n<PCSX2PRLink authors=\\"Ziemas\\" prNums=\\"4113\\">Memorycards: Fix out of bounds array access in folder memcards.</PCSX2PRLink>\\n\\nDon\'t keep the DataClusterInUse bit when accessing the next cluster.\\n\\nWith this folder memcards work on 64bit.\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"2995\\">Memorycards: Add support for OpenPS2Loader VirtualMemoryCards.</PCSX2PRLink>\\n\\nAdds some basic support to OPL VMC files (.bin) that use 512 bytes\\npages.\\n\\nNormal pages are 528 bytes long, those extra 16 bytes contain 12 bytes\\nof ECC data.\\n\\n### Debuggers\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4252\\">Debugger: Add \\\\</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4289\\">Debugger: Require emulator start before enabling Break/Run button.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4326,4287\\">Misc: Support more BIOSes for the Debugger Thread View.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"4271\\">GS/Core: Implement the new generation of GS Debugger.</PCSX2PRLink>\\n\\nThis is a full in-core reimplementation of GSDumpGUI. It will be used\\nfor GS Debugging once GSdx is merged in to the core.\\n\\nOne step closer in to merging GSdx in to the core.\\n\\n### Misc core\\n\\n<PCSX2PRLink authors=\\"monster860\\" prNums=\\"3011\\">Implements IOPbreakpoints</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4234\\">Execute breakpoints for the interpreter</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TellowKrinkle\\" prNums=\\"4205\\">Don\'t Destroy() modals</PCSX2PRLink>\\n\\nOn macOS it prevents the parent window from regaining focus. By\\n\\n<PCSX2PRLink authors=\\"Nobbs66\\" prNums=\\"4223\\">PGIF: PS1DRV handlesbit 28 of GPU Status register, not PGIF.</PCSX2PRLink>\\n\\nFixes several PSX games:\\n\\n- Castlevania: Symphony of the Night\\n- Twisted Metal\\n- Pink Panther\\n\\n<PCSX2PRLink authors=\\"jackun\\" shas=\\"c695a7eabbac4c3a0138b6eeb0e9005ff708f985\\">USB: usb-mic: Send 1ms worth of samples for 48kHz and 8kHz sample rates</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"CookiePLMonster\\" prNums=\\"4310\\">USB: Improve Force Feedback test so it doesn\'t block UI.</PCSX2PRLink>\\n\\nThis modifies DirectInput USB Force Feedback test not to block the UI.\\nInstead of performing the test synchronously on the UI thread, a timer\\ngets created which advances the test every half a second.\\n\\n<PCSX2PRLink authors=\\"Florin9doi\\" prNums=\\"4232\\">Eyetoy mirroring</PCSX2PRLink>\\n\\n- Fixes Bakufuu Slash! Kizna Arashi.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4250\\">Core: Preserve read only bits in the COP0 config register.</PCSX2PRLink>\\n\\nThe read-only bits in question are the Instruction cache size (IC) and\\nthe Data cache size (DC).\\n\\nBefore this MTC0 would freely write to the entire config register.\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4123\\">Core: Implement proper %s handling for syscall 117 (0x75).</PCSX2PRLink>\\n\\nThis makes the syscall iterate through the format string which can be\\nconsidered \\"slow\\" but this syscall is only going to be used for\\ndebugging purposes.\\n\\n<PCSX2PRLink authors=\\"Tupelov\\" prNums=\\"4255\\">Core: Added support for little endian data for patches.</PCSX2PRLink>\\n\\nAllows users to use the leshort, leword, and ledouble datatypes inside\\ntheir patches. Using these datatypes ensures that values in the memory\\nview appear the same as the values in the patch.\\n\\nThis was made with easing patch development in mind as now developers\\ncan make patches without having to reverse endianness. This is\\nespecially useful when using programs like ghidra that displays\\ninstructions in little endian.\\n\\n## GSdx Improvements\\n\\n<PCSX2PRLink authors=\\"lightningterror,tadanokojin\\" prNums=\\"4206\\">GSdx-hw: Implement per pixel alpha blending (PABE).</PCSX2PRLink>\\n\\nImproves shadow/lighting effects on certain games, both HW renderers\\nsupport the feature.\\n\\nSo far we have a few games that see an improvement:\\n\\nFixes Strawberry Shortcake character shadow/lighting.\\n\\nFixes Cartoon Network Racing shadow/lighting.\\n\\nAnd for those that enjoy some image comparisons:\\n\\nCartoon Network Racing: Before -&gt; After\\n\\n<SliderCompare before={require(\\"./img/cnr_before_s.webp\\").default} after={require(\\"./img/cnr_after_s.webp\\").default} />\\n\\nStrawberry Shortcake: Before -&gt; After\\n\\n<SliderCompare before={require(\\"./img/ss_before_s.webp\\").default} after={require(\\"./img/ss_after_s.webp\\").default} />\\n\\n### Misc GSdx\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"3973\\">Some GUI changes</PCSX2PRLink>\\n\\nChanged some options:\\n\\n- Large framebuffer renamed into conservative framebuffer.\\n- Dithering context menu re-ordered.\\n- 8-bit textures renamed into GPU Palette Conversion.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"dabfff8b3562f1424526812681bb2beafb560aa0\\">GSdx-hw: Get rid of some extra branches/conditions in DATE selection</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"4182\\">Fix alignment of font</PCSX2PRLink>\\n\\nShould fix invisible characters.\\n\\n<PCSX2PRLink authors=\\"GovanifY,F0bes,turtleli\\" prNums=\\"4188,4261,4320\\">GSdx: Switch to unicode</PCSX2PRLink>\\n\\nThis brings GSdx one step closer to be merged with the core.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"4270\\">GSdx-d3d11: Cleanup gsdevice11.cpp warnings reported on codacy.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TellowKrinkle\\" prNums=\\"4131,4288\\">Use constexpr to initialize AVX vectors without AVX instructions </PCSX2PRLink>\\n\\nList of removed CRC hacks:\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4082\\">Remove Unofficial CRCs</PCSX2PRLink>\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"f6e12f82de7fbdb15ccbf574eb8552fb54c47ac2\\">Gsdx-hw: Remove Bully crc hack, it broke a bunch of effects</PCSX2PRLink>\\n\\n## TAS (Tool Assisted Speedrun) Utility Improvements\\n\\n<PCSX2PRLink authors=\\"sonicfind\\" prNums=\\"4019\\">Recording: Reorganize and realign InputRecordingControls.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"sonicfind\\" prNums=\\"4060\\">Recording: GUI Improvements around savestate-based input recordings.</PCSX2PRLink>\\n\\n## IPC (Interprocess Communication) Improvements\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"4262\\">Socket re-usability</PCSX2PRLink>\\n\\nThis avoids port overfills on windows, while increasing performance\\nsubstantially on platforms that do port overfills.\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"4267\\">Add a slot system</PCSX2PRLink>\\n\\nThis allows multiple emulator sessions to run at the same time and\\nwindows user to configure their used port to their preferred one.\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"4272\\">Fix type polymorphism & checkbox</PCSX2PRLink>\\n\\nSome versions of wxWidgets are more sensitive than others on dynamic\\ncasting, so instead I used a C style cast to prevent any crash.\\n\\n## GameDB Improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"4b71dd3c08e0f98afe9965a6c38b4262053d8c6b\\">GameDB: Remove patches for Quake 3 videos, no longer required</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"7512c01ca6ff861a1dc70066345ccbcb31445061\\">GameDB: Removed no longer required FMV skip patches</PCSX2PRLink>\\n\\nList of removed patches for games include:\\n\\n- BDFL Manager 2005 (EU)\\n- F1 Racing Championship (Japan and EU regions)\\n- Paris-Dakar Rally (EU)\\n\\n<PCSX2PRLink authors=\\"RedPanda4552\\" prNums=\\"4259\\">GameDB: Add improved Xenosaga save crash prevention patch.</PCSX2PRLink>\\n\\nUpdated patch rewrites a chunk of game code to decrement JPEG quality,\\nrather than just immediately floor it. Allows thumbnails to still look\\nkind of okay.\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"4187,4249\\">Add patchesfor KOF series</PCSX2PRLink>\\n\\nFixes depth precision, game fills upper 16bits of depth with 0xFFFF.\\nThis results in a really high 32 bit value which is then converted to\\nfloat because both HW and SW renderers lack double precision the lower\\n16 bits of the initial 32 bit value lose precision.\\n\\n## Misc Improvements\\n\\n<PCSX2PRLink authors=\\"kenshen112\\" prNums=\\"3999\\">Add GHC Filesystem</PCSX2PRLink>\\n\\nThis adds GHC filesystem to pcsx2 common utilities.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4073\\">3rdparty: PortAudio: Upgrade PortAudio to latest master.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4277\\">3rdparty: Update Libsamplerate to 0.2.1.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"3991\\">Keyboard Shortcuts Strings</PCSX2PRLink>\\n\\nBased on <https://wiki.pcsx2.net/Hotkeys>.\\n\\n<PCSX2PRLink authors=\\"laenion\\" prNums=\\"4216\\">Fix compilation in path with spaces</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"F0bes\\" prNums=\\"4283\\">Fix various Debug Tools Codacy complaints</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"TellowKrinkle\\" prNums=\\"4010\\">Fix paths on macOS</PCSX2PRLink>\\n\\nMacOS was using linux paths rather than wx\'s macOS-specific subclass,\\nwhich doesn\'t match how the app is installed in macOS (all paths should\\nbe relative to the executable).\\n\\nAlso adds steps to copy missing resources into the app bundle.\\n\\n<PCSX2PRLink authors=\\"rtissera\\" prNums=\\"4243\\">Purge GSNull plugin entirely</PCSX2PRLink>\\n\\nThe plugin is obsolete, GSdx already provides Null(no display functionality).\\n\\n<PCSX2PRLink authors=\\"RedPanda4552\\" prNums=\\"4201\\">GUI: Prevent Vsync setting from being wiped on preset changes.</PCSX2PRLink>\\n\\nReapplies the currently applied vsync mode when changing preset options.\\n\\n<PCSX2PRLink authors=\\"MrCK1\\" prNums=\\"4230\\">Remove unused code</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"4244\\">Avoid presets from resetting VsyncQueueSize</PCSX2PRLink>\\n\\nThe VsyncQueueSize setting is currently affected by presets, would\\nrevert to default on start as well. Since the setting is not grayed out,\\nthis change makes it be unaffected.\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"3556\\">GUI: If available, enable menu option to load backup savestate when a game is first launched</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"4306\\">GUI: Visually indicate the current savestate slot in the load/save menu</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"sonicfind\\" prNums=\\"4036\\">Capture: Optimizations with file names, SPU2 recording, and capture menu gui</PCSX2PRLink>\\n\\nAddresses some oversights involving transferring a file name between the\\nGS & SPU2 recording setups.\\n\\nAdds a new audio toggle setting that allows a user to control whether a\\nWAV file should be generated alongside a video recording. In doing this,\\nbehavior for when SPU2 recording fails to be setup becomes more defined\\nand consistent.\\n\\nAdditionally, F12 will now route to sMainFrame if GUI is active as to\\nkeep the capture menu GUI accurate to the current state.\\n\\n## Conclusion\\n\\nAnd that\'s all from us, see you next time in our 2021 Q2 Report!\\n\\n## Metadata\\n\\n2021 Q1:\\n(dev818 to dev1163) (2020-01-01 - 2020-03-31)"},{"id":"/2020/q4-2020-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2020/q4-2020-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2020/q4-2020-progress-report/index.mdx","source":"@site/blog/2020/q4-2020-progress-report/index.mdx","title":"Q4 2020 Progress Report","description":"This quarter has been really amazing for us and for our users that enjoy using PCSX2.","date":"2021-03-08T00:00:00.000Z","formattedDate":"March 8, 2021","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":13.11,"hasTruncateMarker":true,"authors":[{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"}],"frontMatter":{"authors":["lightningterror"],"date":"2021-03-08T00:00:00.000Z","description":"This quarter has been really amazing for us and for our users that enjoy using PCSX2.","draft":false,"image":"./feature-q4-2020-report.webp","tags":["progress-report"],"title":"Q4 2020 Progress Report"},"prevItem":{"title":"Q1 2021 Progress Report","permalink":"/pcsx2-net-www/blog/2021/q1-2021-progress-report"},"nextItem":{"title":"Q3 2020 Progress Report","permalink":"/pcsx2-net-www/blog/2020/q3-2020-progress-report"}},"content":"This quarter has been really amazing for us and for our users that enjoy\\nusing PCSX2.\\n\\n\x3c!-- truncate --\x3e\\n\\nWe\'ve made some outstanding progress, hope you guys enjoy the read.\\n\\n# Core Improvements\\n\\n## Plugins merger in to core continuation\\n\\nAs we mentioned in our previous report we are continuing merging the\\nplugins in to the core which bring us variety of benefits.\\n\\nFor people that used different plugins for specific features that aren\'t\\navailable in the plugins we merged don\'t worry, we are working on adding\\nthose features as well, be patient.\\n\\nCurrently the following plugins have been merged in to the core:\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3782\\">Merge DEV9ghrz into core</PCSX2PRLink>\\n\\nDEV9: For the DEV9\\nfeature that handles PS2 hard disk drive and Ethernet emulation we\\nmerged the dev9ghzdrk plugin in to the core.\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3756\\">Merging SPU2-X into core</PCSX2PRLink>\\n\\nSPU2: For the SPU2\\nfeature that handles PS2 audio we merged the SPU2-X plugin in to the\\ncore.\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3889\\">Merge USB into core</PCSX2PRLink>\\n\\nUSB: For the USB\\nfeature we merged the USBqemu-wheel plugin in to the core.\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3994\\">Merging PAD into core</PCSX2PRLink>\\n\\nPAD: For the PAD\\nfeature that handles PS2 controller input we merged LilyPad for Windows\\nusers and OnePad 2.0 for Linux/Mac. In the future we will transition and\\ncombine both of them so all missing features get added.\\n\\n## Counters improvements\\n\\n<PCSX2PRLink authors=\\"RedPanda4552,refractionpcsx2\\" prNums=\\"3785\\">Counters: Tighten tolerances on framelimiter and smooth out frame pacing</PCSX2PRLink>\\n\\nComparing PCSX2\'s old framelimiter with RTSS showed there was room for\\nimprovement. Frametimes regularly would jump up and down in various\\nsituations. This change smooths out frame pacing substantially across\\nthe board (easily visible in RTSS). We have some comparisons below which\\nyou can see the differences, alternatively our users can check out the\\nrelative PR for more details.\\n\\nNote: Master(Before) and (After)\\n\\nRatchet & Clank 2\\n\\n![](img/r-c-2-frame-pacing.gif)\\n\\nChampions - Return to Arms\\n\\n![](img/champions-return-to-arms-frame-pacing.gif)\\n\\nMetal Arms - Glitch in the System\\n\\n![](img/metal-arms-frame-pacing.gif)\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"3862\\">Counters: account for vertical frequency differences in non-interlaced analog modes</PCSX2PRLink>\\n\\nTiming adjustments for double strike analog modes.\\n\\nFixes Beatmania IIDX 3rd-8th Style.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"71176332042b004c2e05a517f481687d6fc39914\\">Counters/Vsync: Do correct number of HBlanks per VSync for PAL/NTSC</PCSX2PRLink>\\n\\n## MTVU Improvements\\n\\nWe are happy to announce that we have made great progress this time\\naround in improving MTVU compatibility with a bunch of games. The MTVU\\nlist with remaining compatibility issues can be seen at\\n[\\\\#1669](https://github.com/PCSX2/pcsx2/issues/1669).\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4035\\">MTVU: Improve compatibility with games that do GS SIGNAL/LABEL/FINISH</PCSX2PRLink>\\n\\nImprove compatibility with games that use FINISH/SIGNAL/LABEL on the GS\\nthrough VU1 when using MTVU.\\n\\nPerformance impact is reasonably minimal, within a couple of percent of\\nmaster. Although I cannot guarantee the reliability although it looks\\ngood, it\'s a huge improvement and a vast majority of the games listed\\nare now playable with MTVU.\\n\\nIf a game does a double SIGNAL, that still won\'t work.\\n\\nFixed Games when using MTVU:\\n\\n- Backyard Basketball\\n- Baroque\\n- Batman: Vengeance\\n- Crash Nitro Kart\\n- Gradius V\\n- Heatseeker\\n- King\'s Field IV\\n- Marvel Ultimate Alliance\\n- Medal of Honor: Rising Sun\\n- MTVs Celebrity Deathmatch\\n- Summon Night Gran-These: Horobi no Ken to Yakusoku no Kishi\\n- Tony Hawk games\\n- X-Men Legends 2\\n- Yu-Gi-Oh! Capsule Monster Coliseum\\n\\nSlowdown in games using MTVU Fixed:\\n\\n- 007 Agent Under Fire\\n- 007 Everything or Nothing\\n- TimeSplitters 2\\n- TimeSplitters Future Perfect\\n\\nHomebrew Fixes:\\n\\n- Aura for Laura\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4043\\">VIF: Always update MTVU thread with Row/Col Changes</PCSX2PRLink>\\n\\n- Fixes graphical issues in Fatal Frame 2 when swapping to MTVU.\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"4053\\">tiMTVU: Clean up GS SIGNAL/LABEL/FINISH communicationtle</PCSX2PRLink>\\n\\n- Fixes atomic usage and ensures all communication goes in one direction.\\n\\nAlso removed some forced 4-byte alignment, for 4-byte types it\'s\\nunnecessary and for 8-byte types it\'s either unnecessary or harmful.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"c9a5443539e5f2ec2a9719a39743fe9f36da551f\\">VIF: Slightly optimise when Row/Col are written to MTVU</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"155cf385bda43668ab3ebd7abf07940ed6047eef\\">microVU: Flush running VU1 program when toggling MTVU on</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"7b7278bc85fa3becd39c47168fe6c912523b4d43\\">VIF: Fix MPG bug incrementing addresses properly when using MTVU</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3813\\">COP2: Make sure the status flag gets updated on DIV/SQRT/RSQRT</PCSX2PRLink>\\n\\nFixes Yanya Caballista running slow (patches removed).\\nFixes Disney\'s Treasure Planet\'s crazy camera (that flies off) and\\nground displacement.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3957\\">MFIFO: Maintain VIFDMA status and Empty condition on VIF reset</PCSX2PRLink>\\n\\nDon\'t decrement/change VIF1 QWC on VIF1 FIFO write.\\n\\nThis involves removing an old VIF reset hack which was put in for Donald\\nDuck Quack Attack, but doesn\'t seem to be needed anymore (game uses\\nT-Bit on VU which has been fixed since this hack was placed in and could\\nlikely have been the problem).\\n\\nFixes ScarFace when switching to progressive mode.\\n\\n## microVU improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"0448b4902c5e158af5bb654422d05eb78ceafa83\\">microVU: Fixed bug in E-bit conditional branches</PCSX2PRLink>\\n\\nFixes DT Racer\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3865\\">microVU: Fix program range wrapping</PCSX2PRLink>\\n\\nFixes constant recompilation in IHRA Drag Racing and Dawn of Mana\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3797\\">microVU: Make sure flags are exact on M-bit</PCSX2PRLink>\\n\\nFixes Gungrave\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3971\\">microVU: Keep start PC, modify prog search to avoid recompilation</PCSX2PRLink>\\n\\nFix some M-Bit stuff to reduce programs created and fix them happening\\non branches.\\n\\nHopefully shouldn\'t be much in the way of compatibility changes, but\\nshould cut down the recompilation of MicroVU0 programs due to the change\\nin how VU0 operates and how things are going to work going forward. MGS3\\nwent down from 115 (and climbing) to around 13. Crash Twinsanity went\\ndown from 32 by the main menu to about 15.\\n\\nThis also sets up some future work of synchronising VU1.\\n\\nAlso fixes a bug in VIF when using MTVU, fixes Def Jam Fight for NY when\\nusing MTVU, maybe others.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"03445d0b553fc5a8275e5df91fe004a5e10607a2\\">microVU: Add check when loading quick block from program</PCSX2PRLink>\\n\\nSometimes (CoD Finest Hour) can somehow end up with blocks missing from\\na program, it still finds the current program, so we check if the block\\nexists, if not, recompile new ones.\\n\\n## SIF improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3808\\">SIF: Fix attempting to write junk when FIFO full</PCSX2PRLink>\\n\\nFixes Ghosthunter\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3779\\">SIF: Transfer SIF0 junk for partial QW transfers from IOP</PCSX2PRLink>\\n\\nFixes True Crime: Streets of LA. Backport from Dobiestation\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3955\\">DMA: Correctly emulate QWC 0 on NORMAL transfers</PCSX2PRLink>\\n\\nThis removes 2 hacks on the IPU for Enter the Matrix and Mana Khemia\\n\\nOn the PS2 if a NORMAL DMA transfer is started with QWC 0, the DMA\\noverflows and transfers another 0xFFFF quadwords on top of the\\nunderflowed one, this correctly emulates that.\\n\\nI did have to do a \\"kind of\\" hack to make Mana Khemia work properly, the\\ngame relies on the IPU to take some time to decode macroblocks, but we\\nhandle them instantly, so I had to place an artificial delay on starting\\nthe DMA to let it catch up and do what it needs to do. It shouldn\'t have\\nany negative impacts.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3936\\">BIOS/HLE: Use BIOS settings on Fastboot</PCSX2PRLink>\\n\\n- Fixes bad fonts when booting a game in fast boot.\\n\\n- Selects correct language for games depending on your BIOS setting when\\nusing fast boot.\\n\\nIt also makes normal boot works for your language even if you have a\\ndifference between BIOS region and game region but you will need to go\\ninto BIOS and apply that or let the default settings handle it based on\\nyour BIOS. [\\\\#4018](https://github.com/PCSX2/pcsx2/pull/4018) .\\n\\n- Stops games such as Guitar Hero 2 from crashing on fast boot.\\n\\n- Displays corrects timezones in games.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3969\\">IPU: Stop IPU0 looping when there\'s no data for it to read</PCSX2PRLink>\\n\\n- Fixes bad slowdowns in Ratchet games when using EE Timing fix caused by\\nbad IPU streams.\\n\\n## VIF improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"678829a5b2b8ca7a3e42d8edc9ab201bf00b0fe9\\">VIF: Don\'t rush finish VU programs</PCSX2PRLink>\\n\\n- Fixes remaining SPS in Shadowman.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"4003\\">VIF: Don\'t start transfer if VIF1/0 is stalled</PCSX2PRLink>\\n\\n- Also Fix missing VIF status check on MFIFO.\\n\\n- Fixes hang in Batman Vengeance, game stalls the VIF during an MFIFO\\ntransfer then stops and starts VIF while it\'s stalled, in the old code\\nthis causes it to ignore the stall and continue as normal, this PR fixes\\nthat behaviour.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"a4553e821ffadf8a7c95e44a8ca7750d7f5df72f\\">VIF: Allow VIF1 to continue if stalled and the FIFO is reversed</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"843650e79ecf02b2234728f5d9ab34767da4242b\\">VIF: Mask VU program address on MSCAL/MSCNT instructions</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"97b74fa6ea81a1e213aa7bbdc8b5d7f5b2c27d83\\">VIF: MSCNT address is -1, so don\'t mask it</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"2409486c2dc51346d6c04c4ff9297b9fce66d8b5\\">VIF: Fixed undefined behaviour of Unpack V3-16 in final QW write</PCSX2PRLink>\\n\\nFixes bad geometry in Homerun.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3998\\">VU: Synchronise VU1, added speedhack for old behaviour</PCSX2PRLink>\\n\\nThis synchronises VU1 with the EE and VU0 (as close as we can). A new\\nspeedhack has been added to replicate the old behaviour, which is on by\\ndefault unless you\'re using the Safest preset. Games which require the\\nnew behaviour have an entry in the GameDB to disable it.\\n\\nFixed Games:\\n- Fixes SPS in Shadowman 2encond Coming.\\n- Fixes \\"Noodles\\" in Parappa the Rapper 2 (box in the top left).\\n- Fixes floor corrupt textures and console error spam in Dropship.\\n- Slightly improves World series baseball 2k3 but it\'s still broken, just\\ndoesn\'t run at sub 1fps anymore.\\n\\n# SPU2 improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3961\\">SPU2: Delay DMA Reads to prevent overrun</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3959\\">SPU2: Get rid of the need for delay cycles</PCSX2PRLink>\\n\\n- Fixes the entire list of games that required alternative delay cycle\\nhandling in [\\\\#2371](https://github.com/PCSX2/pcsx2/issues/2371) .\\n\\n- Fixes sound issues in Megaman X7.\\n\\n*Note: This has been re implemented in Q1 with a better solution where\\nit doesn\'t cause issues.*\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"3968\\">SPU2: Change VolumeSteps from 42 to 5</PCSX2PRLink>\\n\\nThis will change the jumps from 42 to 5, scroll wheel will still be 2\\nand all the arrows keys on 1.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"3d3c0395965fc71ab57035d15b9a5430fae5dca7\\">SPU2: Fix Address masks for voices + Effect area</PCSX2PRLink>\\n\\n- Fixes reverb in The Suffering.\\n\\n# USB improvements\\n\\n<PCSX2PRLink authors=\\"CookiePLMonster\\" prNums=\\"4042\\">USB: Force Feedback fixes</PCSX2PRLink>\\n\\nThis PR partially addresses [\\\\#3926](https://github.com/PCSX2/pcsx2/issues/3926)\\nand corrects a range of issues with wheel\'s Force Feedback emulation.\\n\\n# CDVD improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3877\\">CDVD: Adjust read speed depending on if in inner/outer edge</PCSX2PRLink>\\n\\n- Fixes Shadowman 2 Second Coming textures.\\n- Fixes Arctic Thunder loading problems.\\n- Fixes looping music on ONI title screen and skipping dialogues.\\n- Fixes Klonoa 2 missing audio.\\n- Fixes SPS at the beginning of matches in Next Generation Tennis 2003\\n(Ronald Garros).\\n\\n<PCSX2PRLink authors=\\"kenshen112\\" prNums=\\"3899\\">CDVD: Check register 14 (ps1 status register) for cd speed and CDDA</PCSX2PRLink>\\n\\n# DEV9 improvements\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3740\\">DEV9: New TAP based networking interface</PCSX2PRLink>\\n\\nA new TAP based networking interface was added to DEV9, which is usually\\na cleaner and simpler solution than the libpcap based one we used up\\nuntil now. This essentially mirrors the inner workings of all modern\\nVPNs.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"4021\\">DEV9: Cancel read of TAP device on suspend/shutdown</PCSX2PRLink>\\n\\n*Note: Wincap removal is not mentioned as it\'s re added in Q1 with some\\nmodifications.*\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"3928\\">GameDB: Replace GameDB with a YAML equivalent</PCSX2PRLink>\\n\\nImprove the format of the current GameDB slightly and simplify the code\\naround the handling the file itself. Before it was an extended .ini file\\nformat that relied on WX libraries.\\n\\nServe as a proof of concept for the YAML library / format that will be\\ncoming soon with the larger configuration overhaul.\\n\\n# Misc core improvements\\n\\n<PCSX2PRLink authors=\\"Nobbs66\\" prNums=\\"3791\\">PGIF/PS1: Correct PGIF Register bit masks</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"3806\\">Gamefix: Purge FMV in SW gamefix</PCSX2PRLink>\\n\\nThe gamefix/hack was broken and kind of pointless, it will be better to\\nproperly fix the issues instead so we got rid of it.\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"3844\\">CDVD: Fix iLinkId issues, fixes timing issues with some BIOS revisions on Time Crisis 2 and 3</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"0d1a5831449c4f31993ca4838dd1c39707e96cce\\">DMA: Handle undefined Chain mode tags</PCSX2PRLink>\\n\\n- Fixes DT Racer speed issues.\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3874\\">JIT: Fix FPU IEEE float conversion on x64</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2,psi-rockin\\" prNums=\\"3778\\">IOP DMA: Always fire interrupts for SIF0/SIF1</PCSX2PRLink>\\n\\nBackport from Dobiestation.\\n\\n- Fixes Knockout Kings 2001 hang on boot.\\n\\nFor more technical information please see [this](https://www.patreon.com/posts/sins-of-ps2-2001-42262496) post.\\n\\n<PCSX2PRLink authors=\\"TheLastRar\\" prNums=\\"3935\\">Core: Don\'t reopen everything when we just want to reopen the CDVD</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"3743\\">Core: send osd log event when snapshot is taken</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3604\\">PNACH: New patch type: apply repeating codes also on load</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3651\\">x86emitter: Register class improvements</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin,refractionpcsx2\\" prNums=\\"4023\\">GS: Properly mirror GS reads to CSR</PCSX2PRLink>\\n\\n- Puts in the correct behaviour for GS reads.\\n\\n- Fixes Supadoopa\'s Funslower demo.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" shas=\\"c998a51f71f6a81a2f4f0c9d27c85714d74ccd57\\">IOP DMA: Only acknowledge SPU2 DMA interrupt if DMA hasn\'t been cancelled</PCSX2PRLink>\\n\\n- Fixes Gregory Horror Show bad audio.\\n\\n---\\n\\n# TAS (Tool Assisted Speedrun) Utility Improvements\\n\\n<PCSX2PRLink authors=\\"xTVaser,sonicfind\\" prNums=\\"3627\\">Recording: Add menu items for recording controls with keyboard shortcuts</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"3356\\">Recording: Overhaul of Recording Tool\'s VirtualPad</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"sonicfind\\" prNums=\\"4047\\">Recording: Properly cancel an input recording on a bad initial savestate</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"sonicfind\\" prNums=\\"3789\\">Recording: Resolve VirtualPads not drawing for some games</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"sonicfind\\" prNums=\\"3845\\">GUI: Internalize VirtualPad and Upgrade NewRecordingFrame</PCSX2PRLink>\\n\\nSimplifies virtualPad access. This will be useful later down the line\\nwhen more virtualPads are added.\\n\\nNewRecordingFrame has improved functionality.\\n\\n---\\n\\n# GSdx Improvements\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"3858\\">GSdx: Properly init gsclut function ptrs</PCSX2PRLink>\\n\\nGS reads lower 3 bits of PSM to determine if format is 8/4 bit and thus\\nwhether to write the clut into the clut buffer. Behavior is now\\ncorrectly emulated.\\n\\nFixes international superstar soccer.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3873\\">GSdx-hw: Cleanup blending code a bit</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3765\\">Gsdx-hw: Move EmulateAtst in common hw renderer code</PCSX2PRLink>\\n\\nUse shared code, instead of duplicates for each renderer.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3905\\">GSdx: Remove TV Shader hotkey toggle (F7)</PCSX2PRLink>\\n\\nPlenty of users misclicked this setting and don\'t know how to switch\\nback since it\'s a rarely used option. We got rid of the hotkey toggle\\nfor a quality of life change.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3891\\">GSdx-hw: Don\'t always set MaxDepth on ps/fs</PCSX2PRLink>\\n\\nSeems that it provides a very small fps increase.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3880\\">GSdx: Change DATE accuracy option from a list to a checkbox</PCSX2PRLink>\\n\\nFor OpenGL it will behave as previously if Full option was selected\\n(more accurate).\\n\\nFor Direct3D10/11 it will behave as previously if Basic option was\\nselected (less accurate).\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3927\\">GSdx-ogl: Fix anisotropic filtering on OpenGL</PCSX2PRLink>\\n\\nAnisotropic filtering was broken on OpenGL ever since Trilinear\\nfiltering was introduced (1.3.1 era), hopefully nobody noticed and we\\nfixed the issue!\\n\\nNote that it won\'t work properly on AMD due to broken driver, issue has\\nbeen reported and they are working on a fix.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3714\\">GSdx-ogl: Check MinMax for PSConstantBuffer</PCSX2PRLink>\\n\\nFixes Silent Hill 3 character textures.\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"3985\\">GSdx: Remove some broken buffer width correction code</PCSX2PRLink>\\n\\nRemoves some code that was meant to correct a condition on the GS where\\n8-bit and 4-bit formats are assigned a buffer width that is not\\ndivisible by 2. Given that the code just forced it to be even (almost\\ncertainly not correct) and was some kind of workaround dating back 13\\nyears I\'m opting to remove it. If someone can give me an example of a\\ngame that is broken without this code I\'ll look into it again but it\\nseems like a fairly rare condition.\\n\\nFixes graphical issues in Galaxy Angel.\\n\\nList of removed CRC hacks:\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"3908\\">Star Wars - Force Unleashed. Hack replaced by a gamedb patch since it\'s not a GSdx issue</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"56893a07312183a525b5c6f7e1576bb4e3c6a1e4\\">Removed/merged duplicate hacks for Radiata Stories, Star Ocean 3, and Valkyrie Profile 2</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"d0dd60f295075a9f8ea98ef539430d0b6031e290\\">Bleach Blade Battlers. Hack no longer needed, effects rendered properly</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"d5adcdd1b217c4537e50f673a70b3eb5d38c991d\\">God of War 2. Hack partially removed because upscaling issues can not be resolved with upscaling hacks</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"85c3ee823fa9d111e2039d6664bc5d63dc21672f\\">Sly 2 and 3. Hacks removed, effects emulated properly, upscaling issues can be resolved with upscaling hacks</PCSX2PRLink>\\n\\n---\\n\\n# Misc Improvements\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"3531\\">GUI: Add \'Screenshot As...\' feature to Capture options</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"4007\\">GUI: Fixes speedhacks panel from shrinking when moving the slider, most noticeable when using DPI scaling</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3633\\">Misc: More Mac build/fixes</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"MrCK1\\" prNums=\\"4044\\">PAD-Windows: Remove obsolete code related to the output window</PCSX2PRLink>\\n\\n---\\n\\nAnd that\'s all from us, see you next time in our 2021 Q1 Report!\\n\\n## Metadata\\n\\n2020 Q4:\\n(dev818 to dev1163) (2020-01-01 - 2020-03-31)"},{"id":"/2020/q3-2020-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2020/q3-2020-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2020/q3-2020-progress-report/index.mdx","source":"@site/blog/2020/q3-2020-progress-report/index.mdx","title":"Q3 2020 Progress Report","description":"On the previous report the highlight was GSdx improvements mostly. This one on the other hand is Core changes, and A LOT of core changes. Enjoy!","date":"2020-10-01T00:00:00.000Z","formattedDate":"October 1, 2020","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":9.485,"hasTruncateMarker":true,"authors":[{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"}],"frontMatter":{"authors":["lightningterror"],"date":"2020-10-01T00:00:00.000Z","description":"On the previous report the highlight was GSdx improvements mostly. This one on the other hand is Core changes, and A LOT of core changes. Enjoy!","draft":false,"tags":["progress-report"],"title":"Q3 2020 Progress Report"},"prevItem":{"title":"Q4 2020 Progress Report","permalink":"/pcsx2-net-www/blog/2020/q4-2020-progress-report"},"nextItem":{"title":"Q2 2020 Progress Report","permalink":"/pcsx2-net-www/blog/2020/q2-2020-progress-report"}},"content":"On the previous report the highlight was GSdx improvements mostly. This\\none on the other hand is Core changes, and A LOT of core changes. Enjoy!\\n\\n\x3c!-- truncate --\x3e\\n\\n# GSdx Improvements\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3507\\">(Direct3D10/11 HW) SetupIA, allow sprite conversion to be done on the CPU when applicable</PCSX2PRLink>\\n\\nPort from OpenGL\\n\\n- Helps sprite rendering inLets Make a J-League Pro Soccer Club (see image comparison below).\\n\\nBefore\\n\\n![](img/Lets-Make-a-J-League-Pro-Soccer-Club-before-resize.webp)\\n\\nAfter\\n\\n![](img/Lets-Make-a-J-League-Pro-Soccer-Club-after-resize.webp)\\n\\n## Other GSdx Changes\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"3508\\">(Direct3D10/11) Modernize swapchain and device creation</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"3516\\">(Direct3D10/11) Remove legacy d3dcompiler code.</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3534\\">(HW) Improve dithering.Gets rid of line artifacts down the screen due to 16bit colour limitations</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"3575\\">(OpenGL HW) Fix/improve line scaling. Port from Direct3D 10/11</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3739\\">(OpenGL HW) Swap DATE_GL42 with DATE_GL45 on sw blending draw</PCSX2PRLink>\\n\\nIt will allow to run sw blending with DATE draw (DATE Accuracy Full) which was previously DATE_GL42 by default\\n\\n<PCSX2PRLink authors=\\"JibbityJobbity\\" prNums=\\"3562\\">(OpenGL) Remove GLX in favor of EGL</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3705\\">(OpenCL) OpenCL renderer removed</PCSX2PRLink>\\n\\n(OpenCL) OpenCL renderer which was barely maintained and rarely used for debug purposes only has been completely removed in our quest for cleaning up the codebase\\n\\n<PCSX2PRLink authors=\\"RedDevilus,lightningterror\\" prNums=\\"3706\\" shas=\\"0c67dc99f7adf1f4bac88c67ac895fe84ac9c750\\">(HW) Add dithering option to HW renderers</PCSX2PRLink>\\n\\n- Dropdown menu for 3 options: Off (No Effect/ Been always like this), Scaled (Strongest effect/obvious), Unscaled (Weakest effect/less obvious)\\n- Change Default dithering mode from Scaled to Unscaled\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"3723\\">Purge Direct3D11 Software renderer option</PCSX2PRLink>\\n\\nF9 has been modified on Windows to have the following functionality:\\n\\nIf the renderer config is set to HW, it will toggle between the\\nrespective HW renderer (OGL/DX) and SW\\n\\nIf the renderer config is set to SW, it will toggle between SW and the\\nrenderer returned by GetBestRenderer()\\n\\nBefore\\n\\n![](img/renderer-before.webp)\\n\\nAfter\\n\\n![](img/renderer-after.webp)\\n\\nIn a nutshell it merges the software renderers. There\'s no need to have\\nmultiple ones, and it makes it easier for the end users.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3702\\">Remove DynamicCRCHack feature</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3564\\">Remove unused Uber_ATST shader code</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"b00c603e0bcbe3dc60b8a72ece2e3ddc3a0288c7\\">SMT: Digital Devil Saga 1 & 2, SMT: Nocturne</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"13ff9ab7dbc22cf41e0edf3f8cedbdf19047efc3\\">Time Splitters 2</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"366e7b9dbd447aee61fba1f9441e0d1256ee8aa2\\">Grandia3</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" shas=\\"baabbc3c9fe57eadc8bc3f6539965dc169277999\\">Genji</PCSX2PRLink>\\n\\n\\n---\\n\\n# Lilypad Improvements\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3323\\">Remove PSX/PS1 emulator compatibility</PCSX2PRLink>\\n\\nRemoves the capability of running Lilypad on ps1 emulators that support\\na plugin interface like ePSXe. PS1 games will still be played normally\\nwithout any issue when using PCSX2.\\n\\n---\\n\\n# SPU2-X Improvements\\n\\n<PCSX2PRLink authors=\\"kenshen112\\" prNums=\\"3532\\">Correction of timings reset and audio sample rate for ps1 mode</PCSX2PRLink>\\n\\n---\\n\\n# Core Improvements\\n\\n## 64bit Recompiler support. By [tellowkrinkle](https://github.com/tellowkrinkle) and [beaumanvienna](https://github.com/beaumanvienna)**\\n\\nIt\'s been a long awaited goal for us and we are very happy with the\\nprogress of the 64bit work that\'s been put in recently. That said there\\nare still a couple of issues left to take care of before we start\\nproviding fully working builds to the public on Orphis buildbot. Those\\nthat want to take the risks and still give the 64bit builds a go then\\nthey can fetch appveyor artifacts or build the source code themselves\\nand give it a go Performance should be -/+ 5% for anyone expecting huge performance\\ngains. For the technical details see the following PRs below.\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3524\\">Moves all VTLB pointer manipulation into dedicated classes for the purpose</PCSX2PRLink>\\n\\nShould allow the algorithm to be changed much more easily in the future.\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3523\\">Allocate memory in an x86-64-compatible way</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3512\\">Fix codegen on x86-64</PCSX2PRLink>\\n\\nMakes x86emitter emit the x86-64 machine code you would expect it to.\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle,beaumanvienna\\" prNums=\\"3608\\">64-bit recompilers</PCSX2PRLink>\\n\\nMakes recompilers compatible with x86-64.\\n\\n## Other Core Improvements\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2,psi-rockin\\" prNums=\\"3537\\">EE/IOP: Timer Interrupt Handling</PCSX2PRLink>\\n\\nBackport from Dobiestation\\n\\n- Don\'t interrupt if compare/overflow flag is already set.\\n- Removed GameDB patches for Harry Potter Prisoner of Azkaban and\\nChamber of Secrets as they are no longer required.\\n\\nPSI-Rockin made an excellent post explaining the functionality/technical details. You can read more about it [here](https://www.patreon.com/posts/39218662).\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3539\\">VIF: VIF MSCAL instructions wait on VU T-Bit stop</PCSX2PRLink>\\n\\nFixes the following games from crashing, and removes gamedb patches for\\nthem since they now work properly:\\n\\n- The Sims\\n- Spiderman 3\\n- Sharks Tale\\n- Maybe some bits of Over the Hedge\\n- Pitfall (both demo and full game)\\n- Gumball 3000\\n- Enter the Matrix\\n- Evolution Snowboarding\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3555\\">IPU: Perform an interrupt on IPU_CTRL Reset</PCSX2PRLink>\\n\\nBackport from Dobiestation\\n\\nDoing this reset performs a forced command end, meaning the IPU will run\\nthrough the procedure of ending any command running and telling the core\\nthat it is done, even if there is no command currently active.\\n\\nFixes Fightbox and Sakura Taisen 3.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2,kozarovv\\" prNums=\\"3593\\">VU: Make VU run closer in sync with EE, implement Mbit</PCSX2PRLink>\\n\\nImplement basic cycle counting for COP2 operations, implement COP2 detection while not interlocking, implement Mbit, drastically change cycles required to run for every microprogram. Improved handling of edge cases for scenarios where COP2 updates flags.\\n\\nAs explained [here](https://www.patreon.com/posts/shadow-of-fixing-33354075) in PSI\'s blog post, hardware tests proved that VU run at the same speed as EE mips core. This is important as the EE can read values from VU0 while a VU program is running using COP2 commands such as CFC2 (Copy From COP2/VU0), so it is important to run VU0 at the same speed as the EE, this was particularly important for games using M-Bit synchronization (Mike Tyson, My Street etc) and games which start a VU program and then copy a value to VU0 to be used by the new program, an example of this happening was 24: The Game.\\n\\nDepending on if the game is expecting the value written to be used or written after the register is used, the VU needs to run either ahead or behind and it varies per game, so in this case it\'s essential that we rely on a new gamefix that we implemented calledVU0KickstartHack.\\n\\nFixed games list:\\n\\n- (VIF) Hitman games - Resolve potential crashes with TLB misses or\\nFIFO errors\\n- 24: The Game, Primal, Ghosthunter - No longer need patches to run at\\nfull speed\\n- Air Rescue Ranger - Ground no longer has SPS\\n- Amplitude - FreQ avatars no longer have SPS\\n- Gift, Woody Woodpecker, Kaan - Now runs at the proper speed\\n- Lotus Challenge - Cars are no longer bouncy\\n- My Street - Missing characters are now visible. (Note: they still\\nexhibit a small amount of SPS in microVU0, the VU0 Interpreter does\\nnot have this issue.)\\n- Mike Tysons Heavyweight Box - Characters are no longer asserting\\ntheir dominance by t-posing. See-through characters are also fixed.\\n- Next Generation Tennis 2003 - No longer needs a patch to fix SPS\\n- Nichibeikan Pro Yakyuu: Final League / World Fantasista - Random\\nglitches are gone\\n- Phase Paradox - Lighting and camera in cutscenes are fixed\\n- Rayman 2 Revolution - Resolved character collision issues with the\\nground\\n- Sega Superstars Tennis - SPS on hands/feet is now gone\\n- Tiger Woods PGA Tour 2002 - Fixed player stance\\n- Wakeboarding Unleashed demo no longer crashes at the loading screen\\n(also requires XGKick hack)\\n- Totally Spies Totally Party! - SPS reduced - (Note: requires EE\\nCyclerate + 3 to completely fix.)\\n- Twisted Metal Head-On - Black doors have now proper colors\\n- Wakeboarding Unleashed - No longer hangs getting to the menu on\\nrelease builds\\n- World Series Baseball 2k3 - No longer hangs on the loading screen\\n(game still hasother issues)\\n\\nHere you can see the before (left) and after (right) images.\\n\\n<SliderCompare before={require(\\"./img/Mike-Tysons-Heavyweight-Box-before-resize.webp\\").default} after={require(\\"./img/Mike-Tysons-Heavyweight-Box-after-resize.webp\\").default} />\\n\\n<SliderCompare before={require(\\"./img/MyStreet-Before-resize.webp\\").default} after={require(\\"./img/MyStreet-After-resize.webp\\").default} />\\n\\n<SliderCompare before={require(\\"./img/SegaTennis-Before-resize.webp\\").default} after={require(\\"./img/SegaTennis-After-resize.webp\\").default} />\\n\\n<SliderCompare before={require(\\"./img/TotallySpies-Before-resize.webp\\").default} after={require(\\"./img/TotallySpies-After-resize.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3660\\">microVU: Fix m-bit state and range merging</PCSX2PRLink>\\n\\nFix state saving when m-bit is reached.\\nFix range merging to encompass whole ranges of programs.\\n\\n- Fixes shadows in The Shadow of Zorro\\n- Fixed slight SPS in Totally Spies Totally Party! Still needs Cyclerate +3 however\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3675\\">GS/Counters: Fix CSR Swap and VBlank Interrupt timing</PCSX2PRLink>\\n\\nBackport from Dobiestation\\n\\n- Fixes the Titantron\'s on the WWE games (Except Shut Your Mouth).\\n- Fixes the frame order for the following games, so they look less\\nblurry and don\'t need the interlacing mode swapped:\\n- Soul Calibur 2\\n- World Rally Championship\\n- Mike Tysons Heavyweight Boxing\\n- Urban Reign\\n- Mortal Kombat Shaolin Monks\\n\\nBased on data gathered from PS2 console tests.\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3683\\">VIF: Set decoding status on VIF stall</PCSX2PRLink>\\n\\nRemoves an old VIF hack.\\n\\nFix GIF resets.\\n\\nFixes the memcard screen on Onimusha Blade Warriors, no longer\\ninvisible.\\n\\nReduces frequency of VIF spamming the console in Ratchet & Clank when\\ncompleting the game.\\n\\n<PCSX2PRLink authors=\\"kozarovv\\" prNums=\\"3439\\">Add support for loading rom2</PCSX2PRLink>\\n\\nFixes/adds Chinese bios support. This also fixes a number of Chinese\\nregion games with the added feature.\\n\\nSo far we have 3 games confirmed working:\\n\\n- Ape Escape 2 (SCCS 40001)\\n- XIGO: Zuihou de Touzi XIGO (SCCS 40004)\\n- Gran Turismo 4 (SCCS 60002)\\n\\nOther games on could be fixed as well, someone just needs to test/verify\\nthem. The full list can be seen on the pull request itself.\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3591,3724\\">New WIP Feature: Socket IPC implementation</PCSX2PRLink>\\n\\nAn IPC protocol was added to PCSX2. This feature gives you a header-only C++ library with bindings in C, Python, Rust, Lua and C\\\\# which allows you to communicate with the emulator and the underlying game it emulates. Ever wanted a game to trigger a save state? That\'s how you\'d do it! Want to make advanced TAS tools? AI based players with a fancy GUI to visualize all your neuronal networks? This should do the trick!\\n\\nNote that all the main planned IPC features are not yet merged/developed, so all of this isn\'t possible yet but should be soon.\\n\\nFor more information you can check the PR\'s themselves for details.\\n\\n# The following Plugins have been merged in to the core\\n\\nYou heard it right folks, PCSX2 will require 2 less plugins now to\\nfiddle with.\\n\\n<PCSX2PRLink authors=\\"MonJamp,GovanifY\\" prNums=\\"3518\\">CDVD</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"GovanifY\\" prNums=\\"3716\\">FW (FireWire)</PCSX2PRLink>\\n\\n---\\n\\n# GameDB Improvements\\n\\n<PCSX2PRLink authors=\\"RedPanda4552\\" prNums=\\"3418\\">Add Xenosaga save point crash patch</PCSX2PRLink>\\n\\n- Other GameDB additions or deletions have been done throughout the Q3 cycle as well.\\n\\n---\\n\\n# Misc Improvements\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3424\\">More preliminary work on MACOS support</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"3667\\">Change the console logger\'s theme on the fly</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"3448,3540\\">Update old Dark Theme for the PCSX2 Console to Modern Dark theme</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"3597\\">PCSX2 GUI Menu changes</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"RedDevilus\\" prNums=\\"3457\\">Revision of tooltips/descriptions and other fixes for PCSX2 (LilyPad + others)</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser,turtleli\\" prNums=\\"3687,3702,3719\\">(CI) Move/migrate the project to use Github Actions instead of Appveyor and Travis</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3652\\">Remove unused cheats and browser source files</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"3525\\">More gtk removals and OnePad dialog tweaks</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3611,3614,3623\\">Remove zzogl, gsdx legacy, zerogs and zerospu2 legacy plugins from master branch</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3688\\">(Tools) Moved GSDumpGUI in it\'s own repository</PCSX2PRLink>\\n\\nInitial release has been published as well so developers can download and use it without the hassle of compiling\\n\\n---\\n\\n# TAS (Tool Assisted Speedrun) Utility Improvements\\n\\n<PCSX2PRLink authors=\\"xTVaser,sonicfind\\" prNums=\\"3669\\">Resolve issues around playing and creating input recordings under certain scenarios</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"3293\\">Resolve TAS Recording Issues for Linux / OnePad users</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser,sonicfind\\" prNums=\\"3690\\">Resolve TAS Recording issues which lead to recordings prematurely stopping</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"3299\\">Resolve TAS Recording related hang when PAD plugin is open/closed while a game is paused</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"3480\\">Corrections to TAS recording file\'s header data</PCSX2PRLink>\\n\\n---\\n\\nAnd that\'s all from us, see you next time in our Q4 Report!\\n\\n# Metadata\\n\\n2020 Q3:\\n(dev110 to dev350) (2020-07-01 - 2020-09-30)"},{"id":"/2020/q2-2020-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2020/q2-2020-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2020/q2-2020-progress-report/index.mdx","source":"@site/blog/2020/q2-2020-progress-report/index.mdx","title":"Q2 2020 Progress Report","description":"A huge boost in accuracy that we\'ve accomplished was improving Z-Buffer emulation on both hardware and software renderers","date":"2020-07-25T00:00:00.000Z","formattedDate":"July 25, 2020","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":7.505,"hasTruncateMarker":true,"authors":[{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"}],"frontMatter":{"authors":["lightningterror"],"date":"2020-07-25T00:00:00.000Z","description":"A huge boost in accuracy that we\'ve accomplished was improving Z-Buffer emulation on both hardware and software renderers","draft":false,"image":"./feature-q2-2020-report.webp","tags":["progress-report"],"title":"Q2 2020 Progress Report"},"prevItem":{"title":"Q3 2020 Progress Report","permalink":"/pcsx2-net-www/blog/2020/q3-2020-progress-report"},"nextItem":{"title":"What\'s New In 1.6","permalink":"/pcsx2-net-www/blog/2020/whats-new-in-1-6"}},"content":"\x3c!-- truncate --\x3e\\n\\n# GSdx Improvements\\n\\n<PCSX2PRLink authors=\\"lightningterror,refractionpcsx2,KrossX\\" prNums=\\"3414,3433\\">(HW/SW) Z-Buffer improvements and backport from Dobiestation</PCSX2PRLink>\\n\\nA huge boost in accuracy that we\'ve accomplished was improving Z-Buffer\\nemulation on both hardware and software renderers. What this means is\\nthat a lot of games received a boost in accuracy throughout the ps2 game\\nlibrary. Many text and HUD issues have been resolved. So far these are\\nthe games that we know of that show an improvement:\\n\\n-   Itadaki Street 3 (text display),\\n-   Midnight Club 3 (text input),\\n-   Rozen Maiden DuellWalzer (text)\\n-   F1 2004 (starting lights),\\n-   Alone in the Dark (improper controller display),\\n-   Silent Hill 2 and 3 (textures not showing on different angles such\\nas toilet),\\n-   Syphon Filter: The Omega Strain (weapon HUD),\\n-   Tomb Raider Angel of Darkness (book pictures).\\n\\nFor anyone interested what Z-Buffering is and it\'s technical aspects,\\nthere is a nice wiki page that you can read\\n[here](https://en.wikipedia.org/wiki/Z-buffering) .\\n\\nHere are some eye candy image comparisons from some of the mentioned\\ngames\\n\\nItadaki Street:\\n\\n<SliderCompare before={require(\\"./img/Itadaki-Street-before.webp\\").default} after={require(\\"./img/Itadaki-Street-after.webp\\").default} />\\n\\nRozen Maiden DuellWalzer:\\n\\n<SliderCompare before={require(\\"./img/Rozen-Maiden-DuellWalzer-before.webp\\").default} after={require(\\"./img/Rozen-Maiden-DuellWalzer-after.webp\\").default} />\\n\\nTomb Raider Angel of Darkness:\\n\\n<SliderCompare before={require(\\"./img/Tomb-Raider-Angel-of-Darkness-before.webp\\").default} after={require(\\"./img/Tomb-Raider-Angel-of-Darkness-after.webp\\").default} />\\n\\nAlone in the Dark:\\n\\n<SliderCompare before={require(\\"./img/Alone-in-the-Dark-before.webp\\").default} after={require(\\"./img/Alone-in-the-Dark-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror,tadanokojin\\" prNums=\\"3436\\">(HW) Improved Texture shuffle detection</PCSX2PRLink>\\n\\nTo put it simply it improves the effect detection so that games can be\\nproperly rendered, plus we removed the CRC hacks that were in its place\\nto skip the bad draw calls. So far we know of only two games that hit\\nthe code path such as Onimusha 3 and Devil May Cry 3, but we believe\\nthere are more that we don\'t know of.\\n\\nEverybody loves image comparisons right?\\n\\nOnimusha 3:\\n\\n<SliderCompare before={require(\\"./img/Onimusha-3-before.webp\\").default} after={require(\\"./img/Onimusha-3-after.webp\\").default} />\\n\\nDevil May Cry 3:\\n\\n<SliderCompare before={require(\\"./img/DMC3-before.webp\\").default} after={require(\\"./img/DMC3-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"iMineLink\\" prNums=\\"3131\\">(HW) Invalidate Source with overlapping draw</PCSX2PRLink>\\n\\nImprove texture cache Source objects invalidation logic taking into\\naccount overlapping with current draw.\\nFixes eyes rendering for the Major in Jak 1.\\n\\n<SliderCompare before={require(\\"./img/Jak-before.webp\\").default} after={require(\\"./img/Jak-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"iMineLink\\" prNums=\\"3075\\">(HW) Extend Software Sprite Renderer to Dragonball Z Budokai Tenkaichi 2 and 3</PCSX2PRLink>\\n\\nPreviously we\'ve discussed that we have a new feature called\\nSWSpriteRenderer that we use to properly render the Jak character model\\nin Jak games. Now we are extending the feature as well as improving the\\nSWSpriteRenderer code itself to work on Budokai Tenkaichi 2 and 3 games.\\nThis improves rendering of Kaio-ken effect in Dragonball Z Budokai\\nTenkaichi 2, as well as improve character silhouette in Dragonball Z\\nBudokai Tenkaichi 2 and 3 when a character is hidden from displaying\\nfrom an obstacle (rock for example), as well as properly render\\ncharacter flashing on a charged attack.\\n\\nSo far only Jak and Budokai Tenkaichi 2 and 3 games use this feature. In\\nthe future we plan on finding more games that can benefit from this,\\nfurther improve the feature and always enable it by default along with\\nauto detection.\\n\\nBudokai Tenkaichi 2:\\n\\n<SliderCompare before={require(\\"./img/DBZBT2-before.webp\\").default} after={require(\\"./img/DBZBT2-after.webp\\").default} />\\n\\nBudokai Tenkaichi 3:\\n\\n<SliderCompare before={require(\\"./img/DBZBT3-before.webp\\").default} after={require(\\"./img/DBZBT3-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"3027\\">(HW) Add dithering support</PCSX2PRLink>\\n\\nDithering support has been added on all hardware renderers. Another\\ngreat step in increasing accuracy which further matches or gets close to\\nSoftware renderer. For more specifics about what dithering is you can\\ncheck this link [here](https://en.wikipedia.org/wiki/Dither) . For those\\nwho wish to turn off dithering on the latest development builds they can\\ndo so with the Page Down key which is temporary or edit the GSdx ini\\nfile which is permanent. There are 3 levels. Off, Scaled and Unscaled. A\\nlot of games use dithering so here is an example below from Castlevania.\\n\\n<SliderCompare before={require(\\"./img/castlevania-before.webp\\").default} after={require(\\"./img/castlevania-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3264\\">(HW) Color clip blending improvements</PCSX2PRLink>\\n\\n- Enable non recursive blending when blending is set to None.Previously non recursive blending was enabled only when blending wasset to Basic or higher, and now it will be active on None option aswell as there are 0 drawbacks. It is faster so games will gain acouple of FPS when blending is disabled and it is also moreaccurate. A win - win situation.\\n\\n- (OpenGL) Always use accurate sw blending on Safe/Accurate Framebuffer masking instead of accumulation mode. Fixes shadows inSuperman Shadows of Apokolips, see image comparison below.\\n\\n<SliderCompare before={require(\\"./img/Superman-Shadows-of-Apokolips-before.webp\\").default} after={require(\\"./img/Superman-Shadows-of-Apokolips-after.webp\\").default} />\\n\\n## Other important GSdx changes\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3274\\">(PSX/PS1 emu) PS1 emulator plugin support has been dropped/removed</PCSX2PRLink>\\n\\n(PSX/PS1 emu) PS1 emulator plugin support has been dropped/removed, as the code wasn\'t maintained at all and the feature was barely working. What does this mean? GSdx as a plugin can no longer be used on other ps1 emulators that support a plugin interface such as ePSXe. PS1 titles can still be played using PCSX2.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3304\\">(HW) Custom Resolution has been removed from the GUI</PCSX2PRLink>\\n\\n(HW) CustomResolution has been removed from the GUI. The option didn\'t work properly with many features such as Depth Emulation, Destination Alpha Test and many more, breaking accurate emulation in the process. For anyone still wishing to use Custom Resolution even though we strongly advise against it, they can modify the GSdx ini file.\\n\\n<PCSX2PRLink authors=\\"tadanokojin,PSI-Rockin\\" prNums=\\"3263\\">(HW/SW) Mirror RGBAQ to 0x11</PCSX2PRLink>\\n\\n(HW/SW) Mirror RGBAQ to 0x11. FixesRidge Racer V shadows, see image comparison below.  Backported from Dobiestation.\\n\\n<SliderCompare before={require(\\"./img/Ridge-Racer-V-before.webp\\").default} after={require(\\"./img/Ridge-Racer-V-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3279\\">(HW/SW) Mask A+D addresses</PCSX2PRLink>\\n\\n(HW/SW) Mask A+D addresses. Fixes network configuration wizard display issues on some games, see image comparison below. Backported from Dobiestation.\\n\\n<SliderCompare before={require(\\"./img/network-config-before.webp\\").default} after={require(\\"./img/network-config-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3440\\">(HW) Alpha Stencil hack has been now completely removed from the Direct3D10/11 renderer as well</PCSX2PRLink>\\n\\n(HW) Alpha Stencil hack has been now completely removed from the Direct3D10/11 renderer as well. As it was the case with OpenGL now DATE Accuracy renders the effects properly with little to no side effects, leaving Alpha Stencil completely useless. In 9 out of 10 cases Alpha Stencil used to break plenty of post processing effects which was an awful hack.\\n\\n---\\n\\n# Core Improvements\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"3311,3400\\">IPU Improvements</PCSX2PRLink>\\n\\n- Adds dithering to the RGB32-&gt;RGB16 conversion (see images from Hisshou Pachinko PachiSlot Kouryaku Series Vol 10 - carefully).\\n\\n<SliderCompare before={require(\\"./img/Hisshou-Pachinko-PachiSlot-Kouryaku-Series-Vol-10-before.webp\\").default} after={require(\\"./img/Hisshou-Pachinko-PachiSlot-Kouryaku-Series-Vol-10-after.webp\\").default} />\\n\\n- Adds SSE2 implementation of RGB32-&gt;RGB16 conversion (speed on the opening FMV in Hisshou Pachinko PachiSlot Kouryaku Series Vol 10 goes from \\\\~175% to \\\\~275% with frame limiter disabled using GSdx software mode).\\n\\n- Implements VQ (see images from Klonoa 2).\\n\\n<SliderCompare before={require(\\"./img/klonoa-2-before.webp\\").default} after={require(\\"./img/klonoa-2-after.webp\\").default} />\\n\\n- Removes GameDB patches for Klonoa 2, and revert workaround for Klonoa 2 crashes which are no longer needed.\\n\\n## Other Core changes\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"3386\\">SuperVU legacy recompiler has been completely removed</PCSX2PRLink>\\n\\nSuperVU legacy recompiler has been completely removed. In order to move forward and make things easier (for example adding 64bit support) we have decided to completely remove the legacy SuperVU recompiler\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3361\\">Allow reading of 8bit timers (and other hardware pages)</PCSX2PRLink>\\n\\nAllow reading of 8bit timers (and other hardware pages). Fixes Robin Hood (character not being able to move, enemies not spawning, missing UI elements)\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2\\" prNums=\\"3385\\">Fix situation where a VIF IRQ triggers and the game triggers a STOPcausing the IRQ to never trigger</PCSX2PRLink>\\n\\nFixes Nitro Bike (hanging)\\n\\n<PCSX2PRLink authors=\\"water111\\" prNums=\\"3095\\">Make recLUT not hardcoded to 32 MB</PCSX2PRLink>\\n\\nThis change makes the EE recompiler not hardcoded to working with 32 MB of RAM.This may be helpful if anybody else in the future wants to emulate a PS2 dev kit with 128 MB of RAM\\n\\n<PCSX2PRLink authors=\\"prafullpcsx2,refractionpcsx2\\" prNums=\\"3324\\">Implemented memory mode check in COP0</PCSX2PRLink>\\n\\nThis makes Next Generation Tennis 2003 (Roland Garros French Open 2003) and Spongebob Squarepants Battle for Bikini Bottom (PAL release) work\\n\\n---\\n\\n# SPU2-X Improvements\\n\\n<PCSX2PRLink authors=\\"MonJamp\\" prNums=\\"3244\\">XAudio 2.7 has been removed</PCSX2PRLink>\\n\\nIt\'s no longer needed since Windows 7 is no longer supported\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"3454\\">Rewrite the spu2-x dialog on Linux in wxwidgets</PCSX2PRLink>\\n\\n---\\n\\n# GameDB Improvements\\n\\n<PCSX2PRLink authors=\\"RazielZnot\\" prNums=\\"3376\\">Performance patch fix for Primal and Ghosthunter</PCSX2PRLink>\\n\\nFix for terrible performance in US versions of Primal (all the time) and Ghosthunter (when encountering Teddy Bear and in the moment of Gator-Man\'s rush attack, maybe a few other cases)\\n\\n- Other GameDB additions or deletions have been done throughout the Q2 cycle as well.\\n\\n---\\n\\n# Misc Improvements\\n\\n<PCSX2PRLink authors=\\"tellowkrinkle\\" prNums=\\"3357\\">Preliminary work on macOS support</PCSX2PRLink>\\n\\nIt still needs a lot work but it\'s a great step moving forward\\n\\n<PCSX2PRLink authors=\\"lightningterror,Ryudo300\\" prNums=\\"3477,3423\\">Better DPI scaling support</PCSX2PRLink>\\n\\nFixed some texts being cut off from the GUI on several plugins as well as the glitchy logo when using DPI scaling.\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"3420\\">Switch over the null plugins dialog code to use wxWidgets instead of gtk on Linux</PCSX2PRLink>\\n\\n- Windows 7 and Windows 8 support has been dropped in order to move forward.\\n\\n- There have been other improvements made such as more code cleanups, bug fixes and other improvements but we won\'t mention them since they aren\'t that big of a deal.\\n\\n---\\n\\n# Future Plans\\n\\n64 bit support is in progress and getting along nicely, more work on\\nmacOS support, more juicy new core accuracy improvements that will be\\nmentioned in the next report, more code cleanups, refactoring,\\noverhauling and so on.\\n\\n---\\n\\nAnd that\'s all from us, see you next time in our Q3 Report!"},{"id":"/2020/whats-new-in-1-6","metadata":{"permalink":"/pcsx2-net-www/blog/2020/whats-new-in-1-6","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2020/whats-new-in-1-6/index.mdx","source":"@site/blog/2020/whats-new-in-1-6/index.mdx","title":"What\'s New In 1.6","description":"We understand that everyone is thrilled over the release of our new stable version. In this report, we\'ll be covering all the significant improvements made in our new release in comparison to the previous stable version 1.4.","date":"2020-06-06T00:00:00.000Z","formattedDate":"June 6, 2020","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":7.06,"hasTruncateMarker":true,"authors":[{"name":"Akash","url":"https://github.com/ssakash","imageURL":"https://github.com/ssakash.png","key":"ssakash"}],"frontMatter":{"authors":["ssakash"],"date":"2020-06-06T00:00:00.000Z","description":"We understand that everyone is thrilled over the release of our new stable version. In this report, we\'ll be covering all the significant improvements made in our new release in comparison to the previous stable version 1.4.","draft":false,"hide_table_of_contents":false,"image":"./feature-whatsnew160.webp","tags":["progress-report"],"title":"What\'s New In 1.6"},"prevItem":{"title":"Q2 2020 Progress Report","permalink":"/pcsx2-net-www/blog/2020/q2-2020-progress-report"},"nextItem":{"title":"PCSX2 1.6.0 Is Out!","permalink":"/pcsx2-net-www/blog/2020/pcsx2-1-6-0-is-out"}},"content":"We understand that everyone is thrilled over the release of our new stable version. In this report, we\'ll be covering all the significant improvements made in our new release in comparison to the previous stable version 1.4.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Games which went from nothing to playable\\n\\nThis section covers games which went from not rendering anything to\\nbeing playable, these issues are the most straight forward to fix, we\\ndebug these issues by monitoring all the abnormal activities occurring\\nin the core leading to the game to crash and a solution is worked on to\\ncorrect that behavior.\\n\\n- **Preliminary PSX support** has been added! Go try them out yourself,\\nthough do note that the PSX backward compatibility is still in its\\ninfant state and needs lots of work to be done before it reaches a\\nperfect state.\\n\\n<Image cols={4} src={require(\\"./img/teaser_s.webp\\").default} />\\n\\n- **Dropship United Peace Force** went from not being able to get into main\\nmenu to being playable!\\n\\nAs it turns out, our VU branching subroutines had a longstanding bug\\nwhich failed to account for a branch delay slot inside of another branch\\ndelay slot (this is as stupid as it sounds). In other words, the branch\\nwas being read as a NOP and got stuck running the wrong code until the\\ngame would crash. Never underestimate PS2 developers. If you think they\\nwon\'t do something that\'s forbidden in the manual, you\'re dead\\nwrong.\\n\\n<Image cols={4} src={require(\\"./img/dropship-united-peace-force-s.webp\\").default} />\\n\\n- All of the **World Rally championship**\\n(with the exception of WRC 4 which needs a patch - [get it\\nhere](https://forums.pcsx2.net/Thread-Fixing-unplayable-games) ) games\\nare now playable!\\n\\nThis was fixed by properly handling branches in delay slots, the old\\nbehavior wasn\'t addressing this properly and the new behavior was shown\\nto be accurate to the original hardware through tests ran from the EE\\nPS2 testsuite.\\n\\n- Games which relied on **game specific patches/hacks** no longer need them anymore to boot!\\n\\nDue to series of improvements in our core functions and recompilers,\\ngames like...:\\n- Jak X\\n- Spongebob the Movie\\n- Spongebob Battle for Bikini Bottom\\n- The Incredibles\\n- The Incredibles Rise of the Underminer\\n- Soukou Kihei Armodyne\\n- Garfield Saving Arlene\\n- Tales of Fandom Vol. 2\\n\\n...are now playable without requiring the usage of any hacks or\\ngame specific patches.\\n\\nThis might not come of as a surprise to most users since these games\\nwere still playable in the older versions through the use of game\\nspecific patches, but handling this accurately would mean there are no\\npotential side effects from the game specific patches and it brings us\\none step closer to the goal of emulation accuracy, which we strive to\\nimprove.\\n\\n## Graphics Synthesizer bug fixes\\n\\nThis section covers games which received an improvement in visual\\naccuracy, these issues are mostly hard to debug due to the abnormal way\\nof how the Graphics synthesizer handles most functions and the lack of\\nany proper documentation regarding them, our GS developers however\\nalways try their best to fix them!\\n\\n- GSdx: Implementation of fixed TEX0 context for all renderers\\n\\nFixes texture corruption in games like **Lupin: The Third and James Bond 007 Nightfire**.\\n\\n<SliderCompare before={require(\\"./img/007-nightfire-before-s.jpg\\").default} after={require(\\"./img/007-nightfire-after-s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/lupin_1.4s.jpg\\").default} after={require(\\"./img/lupin_1.6s.jpg\\").default} />\\n\\n- GSdx: Improvements in the D3D11 renderer\\n\\nFor a while, the D3D11 renderer has been lagging behind in terms of\\nemulation accuracy in comparison to the OpenGL renderer, the renderer\\nhas now gone through various improvements by backporting changes like\\nchannel/texture shuffle, depth emulation and texture conversions from\\nOpenGL and is now much improved compared to the 1.4 version.\\n\\n<Image cols={6} src={require(\\"./img/d3d-fixes-before-after.jpg\\").default} />\\n\\n<Image cols={6} src={require(\\"./img/Blood-Will-Tell.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/fifa_street_broken.jpg\\").default} after={require(\\"./img/fifa_street_fixed.jpg\\").default} />\\n\\n- GSdx-PCRTC: Improved calculation of output circuit dimensions and add unsupported functions\\n\\nPreviously the height of the framebuffer was calculated using guesswork\\nbased on the width of the framebuffer. This method was obviously wrong\\nand it caused some conflicts when scaling the buffer for upscaled\\nresolutions. This was fixed by using the height of the output circuit as\\na base for the framebuffer height. This fixed upscaling issues with lots\\nof games which didn\'t have adequate buffer size in 1.4 version.\\n\\n<SliderCompare before={require(\\"./img/CNK-before_s.webp\\").default} after={require(\\"./img/CNK-after_s.webp\\").default} />\\n\\n<SliderCompare before={require(\\"./img/RBR-before_s.webp\\").default} after={require(\\"./img/RBR-after_s.webp\\").default} />\\n\\n- Addition of Feedback write support\\n\\nUsing the feedback write circuit, we can write a specific rectangular area in the\\noutput image to an arbitrary position in a local buffer at an arbitrary\\nsampling rate dependent on the status of feedback write setting\\nregisters. This feature was not implemented before, and implementation\\nof this allows games like Xenosaga to make use of the feedback write\\nmechanism to convert the color to a luminance greyscale. This fix is\\nexclusive to the OpenGL renderer at the moment.\\n\\n<SliderCompare before={require(\\"./img/xenosaga-before-s.jpg\\").default} after={require(\\"./img/xenosaga-after-s.jpg\\").default} />\\n\\n-Improved merge circuit emulation\\n\\nIn some cases the GS is configured to use two side by side display rectangles\\nfor rendering. The rectangles are merged by the GS\'s merge circuit and\\nthe resulting image is sent to the TV. The horizontal position of the\\ndisplay rectangles, however, was ignored when emulating the merge\\ncircuit, which caused image overlap issues where only half the image was\\ndisplayed. The display rectangles\' horizontal position is now taken\\ninto account, which fixes the image overlap issues and makes split\\nscreen mode in Time Crisis 2 and 3 playable.\\n\\n<SliderCompare before={require(\\"./img/timecrisis-before.webp\\").default} after={require(\\"./img/timecrisis-after.webp\\").default} />\\n\\n- Support double scan mode\\n\\nThe output size for games are halved whenever the INT and FFMD flag are set in the\\ndisplay mode registers, however there was a bug which led the halving to\\nbe done twice unintentionally, this behavior was fixed to get proper\\noutput back on games like Gitaroo man.\\n\\n<ImageCompare left={require(\\"./img/gitarooman-broken-s.webp\\").default} right={require(\\"./img/gitarooman-fixed-s.webp\\").default} />\\n\\n<ImageCompare left={require(\\"./img/height-broken-s.webp\\").default} right={require(\\"./img/height-fixed-s.webp\\").default} />\\n\\n- GSdx: Hardware mipmapping support\\n\\nPreviously, all the hardware renderers suffered from mipmapping issues\\ndue to various unimplemented functions. For example, whenever mipmapping\\nis performed, it is necessary to set the base pointer address and the\\nbuffer width of the textures of two (or) more mipmap levels, even this\\nbasic function was not emulated before as there wasn\'t much priority on\\ngetting mipmapping to work on hardware renderers.\\n\\nThe main reasons were that only some few games (around 10-30) had\\nmipmapping related issues which is quite a small amount of games in\\ncomparison to the whole PS2 library and there was also a possibility\\nthat mipmapping could influence the performance negatively, so none of\\nthe developers were planning on tackling it, as at that time, there were\\nfar more severe bugs related to the CLUT, Texture cache, display\\nrectangle setup and Z buffer which were more prioritized. However,\\nmipmapping has now finally been implemented!\\n\\n<SliderCompare before={require(\\"./img/ratchet-before1-s.jpg\\").default} after={require(\\"./img/ratchet-after1-s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/ratchet-before2-s.jpg\\").default} after={require(\\"./img/ratchet-after2-s.jpg\\").default} />\\n\\n- GSdx-HW: Improved texture search and validations in texture cache\\n\\nImprove texture search/invalidation in render target by correctly\\nmatching vertex offset draws with buffer offset reads in the texture\\ncache, the eyes are now properly rendered in hardware mode.\\n\\n<SliderCompare before={require(\\"./img/gsdx-3018-before-s.webp\\").default} after={require(\\"./img/gsdx-3018-after.webp\\").default} />\\n\\n## Core bug fixes\\n\\nThis section covers games which received an improvement in\\ntiming/graphical accuracy through the changes made in the core Vector\\nunits/Emotion Engine, recompilers and their relevant submodules.\\n\\n- Counters: Accurate Hblank calculation for all video modes\\n\\nThe horizontal blanking interval calculation algorithm used by video\\nmodes were modified to adapt to each and every different video mode,\\nthis change led to fixing texture corruption and irregular timings in\\nsome PSX and PS2 games.\\n\\n<Image cols={6} src={require(\\"./img/hblank-fix-s.webp\\").default} />\\n\\n\\n- IPU: Improved emulation of the PACK command\\n\\nThe pack command was modified to convert from RGB32 to RGB16/INDX4\\ninstead of RAW8 to RGB16/INDX4. This change fixed FMV issues in\\n\\"Hisshou Pachinko PachiSlot Kouryaku\\" series of games.\\n\\n<SliderCompare before={require(\\"./img/core-3119-before.webp\\").default} after={require(\\"./img/core-3119-after.webp\\").default} />\\n\\n- VIF: Timing fix for MSCALF, MSCNT instructions\\n\\nPreviously the MSCALF and MSCNT instructions were delayed along with the\\nMSCAL instruction, these instructions trigger the execution of the micro\\ninstructions in VU1. This was done in order to fix the graphics on the\\nSnowblind Engine games such as Baldur\'s Gate: Dark Alliance and\\nChampions of Norrath; However, delaying this seemed to cause quite a few\\nshadow problems on games like Downhill Domination, Twisted Metal and\\npotentially other games. These instructions are now properly handled\\nresolving the issue.\\n\\n<SliderCompare before={require(\\"./img/Downhil-Before_s.jpg\\").default} after={require(\\"./img/Downhil-after_s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/twisted-metal-before_s.webp\\").default} after={require(\\"./img/twisted-metal-after_s.webp\\").default} />\\n\\n- VU0: Fix CFC2 transfers from TPC register\\n\\nAn instruction sequence with the CFC2 instruction had abnormal behavior\\nwhen compared to the PS2 hardware on our tests, this behavior was\\nrectified to bring you no longer levitating skirts in Street Fighter EX\\n3.\\n\\n<SliderCompare before={require(\\"./img/sfex-before-s.webp\\").default} after={require(\\"./img/sfex-after-s.webp\\").default} />"},{"id":"/2020/pcsx2-1-6-0-is-out","metadata":{"permalink":"/pcsx2-net-www/blog/2020/pcsx2-1-6-0-is-out","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2020/pcsx2-1-6-0-is-out/index.mdx","source":"@site/blog/2020/pcsx2-1-6-0-is-out/index.mdx","title":"PCSX2 1.6.0 Is Out!","description":"Huge thanks to everyone that helped get this release ready, over 4 years in the making","date":"2020-05-07T00:00:00.000Z","formattedDate":"May 7, 2020","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":6.71,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2020-05-07T00:00:00.000Z","description":"Huge thanks to everyone that helped get this release ready, over 4 years in the making","draft":false,"tags":["progress-report"],"title":"PCSX2 1.6.0 Is Out!"},"prevItem":{"title":"What\'s New In 1.6","permalink":"/pcsx2-net-www/blog/2020/whats-new-in-1-6"},"nextItem":{"title":"Progress Report - Q3 2019 To Q1 2020","permalink":"/pcsx2-net-www/blog/2020/q3-2019-to-q1-2020"}},"content":"Huge thanks to everyone that helped get this release ready, over 4 years\\nin the making.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe PCSX2 Dev Team wishes everyone happy emulation with the new release.\\n\\nThe below is a list of highlights, see each respective progress report.\\n\\nAt present we only have the new Windows Installer and Binary\\navailable however Linux users can\\ncompile from source by following [this\\nguide](https://github.com/PCSX2/pcsx2/wiki/Installing-on-Linux).\\n\\n# Q3,Q4 2019 - Q1 2020 Changes\\n\\nQ3-Q4 2019, Q1 2010 progress report highlights, read the full report\\n[here](/blog/2020/q3-2019-to-q1-2020/)\\n\\n## GSdx changelog\\n\\nGSdx-HW:Improve search/invalidate texture in render target by correctly\\nmatching vertex offsetted draws with buffer offsetted reads in the\\ntexture cache.\\n\\nGSdx-HW:Implemented Software Sprite Renderer feature which allows to CPU\\nemulate (SSE accelerated) certain sprite draws directly from the HW\\nrenderer.\\n\\nGSdx-HW:Added a dedicated fix for Big Mutha Truckers which allows to\\nrender the shadows properly. This also allowed us to reduce the crc hack\\nlevel so there are less effects skipped.\\n\\nGSdx-HW:Sprite Hack has been completely removed as it is no longer\\nneeded and is replaced by far better alternatives.\\n\\nGSdx-FX:The TFX shader on Direct3D10/11 has been rewritten to match\\nOpenGL code and its\' accuracy for certain effects.\\n\\nGSdx-D3D:Blend no Barrier support has been ported from OpenGL to\\nDirect3D 10/11.\\n\\nGSdx-GUI: Hardware hacks GUI has been updated for better usability.\\n\\n## SPU2-X changelog\\n\\nFixed the noise generator outputting 4.8 kHz tone instead of white\\nnoise.\\n\\n## CDVD changelog\\n\\nPCSX2 now ignores non-existent disc sector reads.\\n\\n## Core changelog\\n\\nPCSX2: Prevent the UI from hanging/locking up when a game boots.\\n\\nPCSX2-tas: TAS Recording functionality has been disabled for 1.6 release\\nas there are some issues to work out (such as hanging/locking up the\\nemulator).\\n\\nPCSX2: DI execution is delayed by one instruction.\\n\\nPCSX2:Reverted back to older VRender/VBlank timings.\\n\\nPCSX2: Partially fixed IPU pack command.\\n\\nPCSX2:Fixed the emulator hanging when pressing F4 too fast when toggling\\nthe Frame Limiter in some occasions.\\n\\nPCSX2:Fixed the emulator hanging when pressing F9 to toggle rendering\\nbetween Hardware and Software in some occasions.\\n\\nPCSX2: Fixed the emulator hanging when pressing F9 to toggle rendering\\nbetween Hardware and Software mode too fast.\\n\\nPCSX2:First Time Wizard now properly selects the correct GSdx plugin\\nbased on the highest instruction set supported by the CPU.\\n\\nPCSX2: Improved pointer patch command handling.\\n\\n## PCSX2 GUI changelog\\n\\nPCSX2: DPI scaling has been improved.\\n\\nPCSX2: Translations have been updated for the release of 1.6.\\n\\n## Miscellaneous changelog\\n\\nGameDB:True Crime: Streets of L.A. (patched).\\n\\nGameDB: The database has been once again updated with the inclusion of\\nmany games with required gamefixes, as well as removal of gamefixes\\nwhich are no longer needed.\\n\\n# Q2 2018-Q2 2019 Changes\\n\\nQ2 2018 - Q2 2019 progress Report highlights, read the full report\\n[here](/blog/2019/from-q2-2018-to-q2-2019/)\\n\\n## GSdx changelog\\n\\nGSdx-HW: Fix half-bottom screen issues on texture/color shuffling.\\n\\nGSdx-TC: Palette management rework.\\n\\nGsdx-HW: implement fixed TEX0 for all renderers.\\n\\nGSdx: OSD improvements and port to Direct3D10/11.\\n\\nGSdx: Accurate Date update and partial port to Direct3D10/11.\\n\\nGSdx-GL: Bypass the texture cache when the framebuffer is sampled.\\n\\nGSdx-GL: Experimental Sparse Texture support.\\n\\nGSdx-D3D: Improved palette support has been ported from OpenGL to\\nDirect3D10/11.\\n\\nGSdx-D3D: GPU accelerate 8 bits texture conversion port from OpenGL to\\nDirect3D10/11.\\n\\nGSdx-D3D: Depth Emulation port to Direct3D10/11.\\n\\nGSdx-D3D: Channel shuffle port to Direct3D10/11.\\n\\nGSdx-D3D: HDR Colclip blend port to Direct3D10/11.\\n\\nGSdx-D3D: Accurate Blend Fbmask port to Direct3D10/11.\\n\\nGSdx-D3D: Partial SW blending port to Direct3D10/11.\\n\\nGSdx-D3D: Alpha hack has been removed completely, replaced with Blending\\nAccuracy option.\\n\\nGSdx-HW: Removal of MSAA support in favor of better optimizations and\\naccuracy.\\n\\nGSdx-HW: Removal of Direct3D9 renderer in favor of better optimizations\\nand accuracy.\\n\\nGSdx-HW: Removal of many no longer needed hacks.\\n\\nGSdx-HW: Add Skipdraw Offset option for Skipdraw hack.\\n\\nGSdx-GUI: GUI update to improve usability.\\n\\n## Core changelog\\n\\nPCSX2-TAS: Input Recording/Playback Functionality (speedrunning tools).\\n\\nVector Units: Fix bug in \\"Branch in Delay Slot\\" Optimization.\\n\\nRecompiler: Fix stall in branch delay slot.\\n\\nPCSX2: Improved GameDB handling.\\n\\nVIF: A VIF core update has been made to fixDowntown Run.\\n\\nGif Unit: Recheck VIF status after a reset is performed when waiting for\\nPATH3 (Fixes Eragon).\\n\\n## PCSX2 GUI changelog\\n\\nPCSX2: \\"FMV Aspect Ratio Switch/Override\\" feature.\\n\\nPCSX2: Save/Load slot improvements, allow to display slot dates.\\n\\n## SPU2-X changelog\\n\\nSPU2-X-GUI: The gui has been updated to improve usability.\\n\\n# Q1 2018 Changes\\n\\nQ1 2018 progress report hightlights, read the full report\\n[here](/blog/2018/q1-2018-progress-report/)\\n\\n## GSdx changelog\\n\\nGSdx-TC: Performance improvement by using custom container.\\n\\nGSdx-TC: Load size calculation in target update.\\n\\nGSdx: Texture Shuffle port to Direct3D.\\n\\nGSdx: Channel Shuffle improvements on Direct3D\\n\\nGSdx: Hack removal/adjustments.\\n\\n## Core changelog\\n\\nPCSX2-Counters: Fix Hblank calculation for DVD video modes.\\n\\n## PCSX2 GUI changelog\\n\\nPCSX2: Add configurable Cheats folder to Components Selectors.\\n\\nPCSX2: Display the video mode on titlebar.\\n\\n## Miscellaneous changelog\\n\\nPlugins: XPad and USBqemu have been moved to the legacy plugins VS\\nsolution.\\n\\nGeneral: Code cleanup.\\n\\nGamedb: Game database has been updated with many new gamefixes included.\\n\\n# Q3-Q4 2017 Changes\\n\\nQ3 & Q4 2017 progress report hightlights, read the full report\\n[here](/blog/2018/q3-q4-2017-progress-report/)\\n\\n## GSdx changelog\\n\\nGSdx-d3d11: Extend \\"Preload Frame Data\\" support to Direct3D.\\n\\nGSdx: Add Frame Buffer Conversion option.\\n\\nGSdx: Automatic mipmapping option.\\n\\n## Core changelog\\n\\nPCSX2: PSX Memory card support.\\n\\nPCSX2: Always ask when booting option.\\n\\nPCSX2: Adaptive Sync support.\\n\\nPCSX2: Restore \\"Defaults\\" option to GS Panel.\\n\\nPCSX2: Clear ISO list option.\\n\\n## PCSX2 GUI changelog\\n\\nPCSX2: Many translations have been updated.\\n\\n# Q1-Q2 2017 Changes\\n\\nQ1 2017 progress report highlights, read the full report\\n[here](/blog/2017/q1-2017-progress-report/)\\n\\nQ2 2017 progress report highlights, read the full report\\n[here](/blog/2017/q2-2017-progress-report/)\\n\\nGSdx changelog:\\n\\nGSdx: Support for dumping GS Dumps in xz format.\\n\\nGSdx-OpenGL: Reduce Geometry shader overhead.\\n\\nGSdx-HW: Revamped buffer size calculation for custom resolutions.\\n\\nGSdx: OSD (On Screen Display) feature.\\n\\nGSdx: Texture cache speed optimization.\\n\\nGSdx: Software renderer thread synchronization fix.\\n\\nGSdx:Improved software renderer float handling.\\n\\nGSdx: Removal of SSSE3 and AVX configurations.\\n\\nGSdx: Workarounds for AMD buggy OpenGL driver.\\n\\nGSdx (Windows): Fix for slow software rendering with Skylake CPUs.\\n\\n## Core changelog\\n\\nPCSX2: Fix command-line options.\\n\\nPCSX2-Counters: Proper tracking of scalar limit.\\n\\nVIF: Unpack speed optimizations.\\n\\nVector Units (VU0): Fix CFC2 transfers from TPC register.\\n\\n## LilyPad and OnePad changelog\\n\\nLilyPad and OnePad changelog:\\n\\nLilyPad: neGcon controller support.\\n\\nLilyPad: UI Changes/enhancements.\\n\\nLilyPad: Core improvements, better controller handling.\\n\\nOnepad: Update to use SDL2.\\n\\n## Miscellaneous changelog\\n\\nCMake: Blacklist GCC 7.0/7.1 versions.\\n\\n## Q3-Q4 2016 Changes\\n\\nQ3 2016 progress report hightlights, read the full report\\n[here](/blog/2016/q3-2016-progress-report/)\\n\\nQ4 2016 progress report hightlights, read the full report\\n[here](/blog/2017/q4-2016-progress-report/)\\n\\n## GSdx changelog\\n\\nGSdx: Hardware mipmapping support.\\n\\nGSdx-TC: Proper scaling of all textures.\\n\\nGSdx: Handling illegal 8 bits pixel storage format.\\n\\nGSdx-PCRTC: Feedback write support.\\n\\nGSdx-glsl: Optimize number of active constant buffers in the shader.\\n\\nGSdx: Avoid illegal instruction crash on older CPUs.\\n\\nGSdx: Alpha test improvements.\\n\\nGSdx: Proper custom resolution scaling.\\n\\n## Core changelog\\n\\nPCSX2: PSX mode compatibility.\\n\\nPCSX2:PSX mode, proper video mode initialization.\\n\\nPCSX2: Improved patch handling.\\n\\nPCSX2: Accurate video mode detection.\\n\\n## LilyPad and Onepad changelog\\n\\nLilyPad: Add separate bindings for each pad type.\\n\\nLilyPad: Add PlayStation Mouse support.\\n\\nLilyPad: Updated user interface.\\n\\nLilyPad: Add dance pad support and revamped Lilypad dialog.\\n\\nOnePad: General improvements on accuracy.\\n\\n## CDVD changelog\\n\\ncdvdgigaherz: Linux port.\\n\\n## Miscellaneous changelog\\n\\nPCSX2: FreeBSD support.\\n\\nLinux: Support Vsync on Linux free driver.\\n\\nWindows: Remove DirectX redistributable dependency on Windows 8.1/10.\\n\\n# Q1-Q2 2016 Changes\\n\\nJanuary - February 2016 progress report hightlights, read the full\\nreport [here](/blog/2016/january-february-2016-progress-report/)\\n\\nQ2 2016 progress report hightlights, read the full report\\n[here](/blog/2016/q2-2016-progress-report/)\\n\\n## GSdx changelog\\n\\nGSdx: Fast texture invalidation option.\\n\\nGSdx: Improved detection of Framebuffer size.\\n\\nGSdx: Enable reading of Depth Buffer.\\n\\nGSdx: Improved PCRTC merge circuit emulation.\\n\\nGSdx-GL: Fast accurate blending.\\n\\nGSdx-GL: Depth buffer lookup optimization.\\n\\nGSdx-FX: Post-Processing updates.\\n\\nGSdx: Proper handling of 576P/720P/1080I video modes.\\n\\n## Core changelog\\n\\nPCSX2:Automatic aspect ratio switch during FMV playback.\\n\\nVIF: Timing fix for MSCALF, MSCNT instructions.\\n\\nVector Units: Scarface I bit gamefix.\\n\\n## CDVD changelog\\n\\nCDVDgigaherz: Fixed dual layer DVD reading.\\n\\nCDVD: Improved ISO layer break detection algorithm.\\n\\n## Lilypad and Onepad changelog\\n\\nLilyPad: Add Pop\'n Music controller support.\\n\\nOnepad: GUI redesign.\\n\\n## Miscellaneous changelog\\n\\nPCSX2: GUI Improvements.\\n\\nPCSX2: PCSX2-Auto test suite."},{"id":"/2020/q3-2019-to-q1-2020","metadata":{"permalink":"/pcsx2-net-www/blog/2020/q3-2019-to-q1-2020","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2020/q3-2019-to-q1-2020/index.mdx","source":"@site/blog/2020/q3-2019-to-q1-2020/index.mdx","title":"Progress Report - Q3 2019 To Q1 2020","description":"Progress Report - Q3 2019 To Q1 2020","date":"2020-05-07T00:00:00.000Z","formattedDate":"May 7, 2020","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":6.93,"hasTruncateMarker":true,"authors":[{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"},{"name":"turtleli","url":"https://github.com/turtleli","imageURL":"https://github.com/turtleli.png","key":"turtleli"},{"name":"PSI","url":"https://github.com/PSI-Rockin","imageURL":"https://github.com/PSI-Rockin.png","key":"psi"}],"frontMatter":{"authors":["lightningterror","turtleli","psi"],"date":"2020-05-07T00:00:00.000Z","description":"Progress Report - Q3 2019 To Q1 2020","draft":false,"tags":["progress-report"],"title":"Progress Report - Q3 2019 To Q1 2020"},"prevItem":{"title":"PCSX2 1.6.0 Is Out!","permalink":"/pcsx2-net-www/blog/2020/pcsx2-1-6-0-is-out"},"nextItem":{"title":"Merry Christmas And A Happy New Year To Everyone From The PCSX2 Team","permalink":"/pcsx2-net-www/blog/2019/merry-christmas-and-a-happy-new-year-to-everyone-from-the-pcsx2-team"}},"content":"\x3c!-- truncate --\x3e\\n\\n![progrepq32019q12020](./img/progrepq32019q12020.webp)\\n\\n# GSdx Improvements\\n\\n## Hardware rendering improvements for all renderers:**\\n\\n<PCSX2PRLink authors=\\"AlessandroVetere\\" prNums=\\"3018\\">Improve search/invalidate texture in render target by correctly matching vertex offsetted draws with buffer offsetted reads in the texture cache</PCSX2PRLink>\\n\\nThis behavior is enabled by default in Jak games to fix the Black Eye rendering.\\n\\n<SliderCompare before={require(\\"./img/gsdx-3018-before.webp\\").default} after={require(\\"./img/gsdx-3018-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"AlessandroVetere\\" prNums=\\"3001\\">Implemented Software Sprite Renderer feature which allows to CPU emulate (SSE accelerated) certain sprite draws directly from the HW renderer</PCSX2PRLink>\\n\\nThis bypasses GPU draw and texture cache mechanism. So far, its used to properly render the palettes used in Jak games and remove previous inaccurate hacks that dont do it correctly due to existing issues in texture cache. This caused it to be much slower due to the required framebuffer readback to get the drawn palette from GPU to CPU. There are plans to implement the feature in other games such as DBZ BT2.\\n\\n<SliderCompare before={require(\\"./img/gsdx-3001-before.webp\\").default} after={require(\\"./img/gsdx-3001-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3036\\">Added a dedicated fix for Big Mutha Truckers which allows to render the shadows properly</PCSX2PRLink>\\n\\nThis also allowed us to reduce the crc hack level so there are less effects skipped\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2998\\">Added a dedicated fix for Sonic Unleashed</PCSX2PRLink>\\n\\nThis allows it to render shadows properly. This also allowed us to remove crc hacks which previously skipped the incorrectly rendered effects.\\n\\n<SliderCompare before={require(\\"./img/gsdx-2998-before.webp\\").default} after={require(\\"./img/gsdx-2998-after.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"KrossX,lightningterror\\" prNums=\\"2993\\">Sprite Hack has been completely removed</PCSX2PRLink>\\n\\nIt is no longer needed and is replaced by far better alternatives.\\n\\nBy continuing on our quest of removal obsolete hacks, there have been more CRC hacks removed which were no longer needed; as the emulator can now properly render these effects.\\n\\n## Hardware rendering improvements for Direct3D10/11:\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"3091\\">The TFX shader on Direct3D10/11 has been rewritten to match OpenGL code and its\' accuracy for certain effects</PCSX2PRLink>\\n\\nWith this in mind, a lot of games should see improvements in rendering. Examples include: Silent Hill 4 having shadows rendered properly, DBZ BT2 having more accurate bloom/blur rendering, and Resident Evil 4\'s inaccurate fog rendering. Other games may be affected as well\\n\\n<SliderCompare before={require(\\"./img/gsdx-3091-after.webp\\").default} after={require(\\"./img/gsdx-3091-after1.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3003\\">Blend no Barrier has been ported from OpenGL to Direct3D 10/11</PCSX2PRLink>\\n\\nAs with previous blending ports, this improves rendering blending effects across many games that use them. Some examples include: Dragon Quest, Star Wars Battlefront 2, and God of War. In the case of Dragon Quest, it renders glowing effects. In SW mode, Battlefront 2 renders the window colors more accurately. For God of War, it bypasses slower, HDR colclip algorithm which is a bit slower, thus gaining some fps. Feature needs at least Basic Blending enabled for it to be properly rendered.\\n\\n<SliderCompare before={require(\\"./img/gsdx-3003-before.webp\\").default} after={require(\\"./img/gsdx-3003-after.webp\\").default} />\\n\\n# Core Improvements\\n\\n## Recompiler\\n\\n<PCSX2PRLink authors=\\"refractionpcsx2,PSI-Rockin\\" prNums=\\"3172\\">DI execution is delayed by one instruction</PCSX2PRLink>\\n\\nFixes booting issues in the following games: Jak X, Namco 50th anniversary, Spongebob the Movie, Spongebob Battle for Bikini Bottom, The Incredibles, The Incredibles rize of the underminer, Soukou kihei armodyne, Garfield Saving Arlene, Tales of Fandom Vol. 2. For more technical information what the changes do see [this](https://github.com/PCSX2/pcsx2/pull/3172#issuecomment-568205531) post.\\n\\n## Counters\\n\\n<PCSX2PRLink authors=\\"FlatOutPS2,turtleli\\" prNums=\\"2835\\">Reverted back to older VRender/VBlank timings</PCSX2PRLink>\\n\\nThis fixes timing issues in Dynasty Warriors 3 Xtreme Legends (fake save corruption), Jak II (random speedup issues) and Shadow of Rome (FMV audio issues).\\n\\n## IPU\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"3119\\">Partially fixed IPU pack command</PCSX2PRLink>\\n\\nThe Image Processing Unit (IPU) pack command is capable of converting 32-bit RGB data to either 16-bit RGB data or 4-bit indexed RGB data. Due to the lack of games that actually use this command, it was not noticed that the code was attempting to convert from YCbCr data instead of from 32-bit RGB data.\\n\\nEveryone loves pachinko... right?. Hisshou Pachinko PachiSlot Kouryaku series uses the IPU colour space conversion (CSC) command to convert YCbCr data to 32-bit RGB data. The IPU pack command is then used to convert the resultant 32-bit RGB data to 16-bit RGB data. The IPU CSC command, however, is capable of converting directly from YCbCr data to 16-bit RGB data...\\n\\nSo, thanks to some unusual test cases, the IPU pack command has now been partially fixed (the conversion to 4-bit indexed RGB data is still unimplemented due to a lack of test cases).\\n\\n<SliderCompare before={require(\\"./img/core-3119-before.webp\\").default} after={require(\\"./img/core-3119-after.webp\\").default} />\\n\\n## Other\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"3063\\">Fixed the emulator hanging when pressing F4 too fast when toggling the Frame Limiter in some occasions</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"3072\\">Fixed the emulator hanging when pressing F9 to toggle rendering between Hardware and Software in some occasions</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"3052\\">Fixed the emulator hanging when pressing F9 to toggle rendering between Hardware and Software mode too fast</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"KrossX\\" prNums=\\"3013\\">First Time Wizard now properly selects the correct GSdx plugin based on the highest instruction set supported by the CPU</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"Some1fromthedark\\" prNums=\\"3135\\">Improved pointer patch command handling</PCSX2PRLink>\\n\\nThe parsing for pointer patch commands, which copies a value to the address stored in another memory address, has been improved. It now properly handles the case where the value is 0 and no longer terminates early when multiple offsets are specified.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"3059\\">GSdx Hardware hacks GUI has been updated to improve usability</PCSX2PRLink>\\n\\n<PCSX2PRLink authors=\\"lightningterror,turtleli\\" prNums=\\"3059\\">PCSX2 GUP DPI scaling has been improved</PCSX2PRLink>\\n\\n# SPU2-X Improvements\\n\\n<PCSX2PRLink authors=\\"monster860\\" prNums=\\"3030\\">Fixed the noise generator outputting 4.8 kHz tone instead of white noise</PCSX2PRLink>\\n\\nKnown affected games so far are: Ape Escape 3, Ratchet and Clank 1, and Neopets The Darkest Faerie.\\n\\n# CDVD Improvements\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"3051\\">PCSX2 now ignores non-existent disc sector reads</PCSX2PRLink>\\n\\nSome games attempt to read disc sectors that do not exist. PCSX2 would fail at loading most of these games when these sectors are read. By changing the disc reading code to ignore requests to read the non-existent disc sectors, PCSX2 now manages to load the affected games successfully.\\n\\n# GameDB Improvements\\n\\nAs usual, weve updated our GameDB with hundreds of new changes containing added or removed gamefixes that can be enabled with Automatic Gamefixes. This should greatly improve and ease configurations for our users as they don\'t need to trouble themselves with searching and manually applying gamefixes and patches for the games that require them.\\n\\n# True Crime: Streets of L.A. (patched)\\n\\nTrue Crime: Streets of L.A. hasnt been playable until recently. After several days of reverse-engineering the game, PSI (the developer of [DobieStation](https://github.com/PSI-Rockin/DobieStation) ) figured out what was going wrong and applied a patch to it. The game relies on undefined behavior in certain SIF DMA transfers. SIF DMA is how the Emotion Engine (EE) and Input/Output Processor (IOP) communicate with each other. For example, if a game wants to read something from the disc, it will send a read disc command through SIF1. The IOP will process this command and send a reply through SIF0.\\n\\nOne quirk is that EE DMA transfers in quadwords (16 bytes) at a time, whereas IOP DMA transfers in words (4 bytes) at a time. So what happens when the IOP wants to send 3 words of data? This is 12 bytes, which is not enough for a quadword. There is no documentation on this behavior, other than garbage being sent after the 3 words. PCSX2 handles this by appending zeros to the data. Unfortunately, True Crime stores important initialization variables right next to the reply buffer on the EE side. PCSX2s behavior caused these variables to be reset to 0, which makes True Crime reinitialize its DVD streaming library. When this happens, the game promptly crashes after trying to stream data from the disc.\\n\\nSo how do you properly handle this? We have not confirmed this on hardware, but it appears the correct behavior is to append the oldest values from previous transfers. This makes sense when you consider that SIF has its own FIFO to store data. If 3 words are sent, the 3 words will be popped along with the oldest value still in the FIFO to create a quadword. PSI has stated that he has chosen to patch the game instead because he is not comfortable implementing this, as there is a potential to break something else. The patch forces the game to use a different method of transferring streaming commands. This is important as the reply buffer here is in a different region of memory, so the initialization variables mentioned above will not be overwritten.\\n\\nNOTE: The patch is currently only for NTSC-U. Other patches will be made on demand."},{"id":"/2019/merry-christmas-and-a-happy-new-year-to-everyone-from-the-pcsx2-team","metadata":{"permalink":"/pcsx2-net-www/blog/2019/merry-christmas-and-a-happy-new-year-to-everyone-from-the-pcsx2-team","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2019/merry-christmas-and-a-happy-new-year-to-everyone-from-the-pcsx2-team/index.mdx","source":"@site/blog/2019/merry-christmas-and-a-happy-new-year-to-everyone-from-the-pcsx2-team/index.mdx","title":"Merry Christmas And A Happy New Year To Everyone From The PCSX2 Team","description":"Merry Christmas and a Happy New Year everyone! We hope 2020 brings you and your loved ones everything you wish for, including a PCSX2 stable release!","date":"2019-12-27T00:00:00.000Z","formattedDate":"December 27, 2019","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.84,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2019-12-27T00:00:00.000Z","description":"Merry Christmas and a Happy New Year everyone! We hope 2020 brings you and your loved ones everything you wish for, including a PCSX2 stable release!","draft":false,"tags":["devblog"],"title":"Merry Christmas And A Happy New Year To Everyone From The PCSX2 Team"},"prevItem":{"title":"Progress Report - Q3 2019 To Q1 2020","permalink":"/pcsx2-net-www/blog/2020/q3-2019-to-q1-2020"},"nextItem":{"title":"From Q2 2018 To Q2 2019 - 1 Year Progress Report","permalink":"/pcsx2-net-www/blog/2019/from-q2-2018-to-q2-2019"}},"content":"Merry Christmas and a Happy New Year everyone! We hope 2020 brings you\\nand your loved ones everything you wish for, including a PCSX2 stable\\nrelease! \ud83d\ude1b\\n\\n\x3c!-- truncate --\x3e\\n\\nOn that front, there has been lots of work lately on finalizing the\\nremaining Pull Requests and resolving all issues labeled for the stable\\n1.6 release. We are on a feature freeze so most of our efforts are\\nconcentrated on polishing, bug fixing and documentation. As usual, we\\nare fashionably late but we hope the end product will be worth the wait!\\n\\nI wanted to take this opportunity to say goodbye to our years long\\ntester and contributor General Plot, we\'ve had some really good times\\nand laughs over the years messing around with PCSX2 and breaking stuff!\\nHe doesn\'t have time to dedicate to PCSX2 anymore due to the good old\\nreal life (TM), but he will still keep an eye on us \ud83d\ude0a\\n\\nTill next time, which will probably be release time, have a great 2020!"},{"id":"/2019/from-q2-2018-to-q2-2019","metadata":{"permalink":"/pcsx2-net-www/blog/2019/from-q2-2018-to-q2-2019","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2019/from-q2-2018-to-q2-2019/index.mdx","source":"@site/blog/2019/from-q2-2018-to-q2-2019/index.mdx","title":"From Q2 2018 To Q2 2019 - 1 Year Progress Report","description":"The planets aligned and the time came. A years worth of progress reports!","date":"2019-06-18T00:00:00.000Z","formattedDate":"June 18, 2019","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":11.725,"hasTruncateMarker":true,"authors":[{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"},{"name":"CK1","url":"https://github.com/MrCK1","imageURL":"https://github.com/MrCK1.png","key":"ck1"},{"name":"Kojin","url":"https://github.com/tadanokojin","imageURL":"https://github.com/tadanokojin.png","key":"kojin"}],"frontMatter":{"authors":["lightningterror","ck1","kojin"],"date":"2019-06-18T00:00:00.000Z","description":"The planets aligned and the time came. A years worth of progress reports!","draft":false,"tags":["progress-report"],"title":"From Q2 2018 To Q2 2019 - 1 Year Progress Report"},"prevItem":{"title":"Merry Christmas And A Happy New Year To Everyone From The PCSX2 Team","permalink":"/pcsx2-net-www/blog/2019/merry-christmas-and-a-happy-new-year-to-everyone-from-the-pcsx2-team"},"nextItem":{"title":"Merry Christmas From The PCSX2 Team","permalink":"/pcsx2-net-www/blog/2018/merry-christmas-from-the-pcsx2-team"}},"content":"The planets aligned and the time came. A years worth of progress\\nreports!\\n\\n\x3c!-- truncate --\x3e\\n\\n![](./img/progrepq2q22018-19.jpg)\\n\\n# New Speedrunning Tools Available\\n\\n<PCSX2PRLink authors=\\"xTVaser\\" prNums=\\"2412\\">Input Recording/Playback Functionality</PCSX2PRLink>\\n- and many other external contributors\\n\\nAfter more than a year of reviewing and improving this PR it finally got\\nmerged on April 2019. This PR was introduced mainly with Tool-assisted\\nspeedruns (TAS) in mind, but can be used in various ways. PCSX2 now has\\nthe ability to record your inputs while playing, after enabling the new\\nGUI option and saving it to a file. You can later load that file and\\npractically replay your inputs, which can be used for some speed runs or\\neven recording a video with our internal video recorder, without having\\nto endure the slowdowns caused by the added load of video encoding.\\n\\nUnfortunately there are still some issues with some games or some\\nspecific scenarios where PCSX2\'s timing changes each time you replay the\\ngame, causing your inputs to get out of sync, but the feature is already\\nin a really nice working state.\\n\\nSpecial thanks to [xTVaser](https://github.com/xTVaser) for patiently\\nenduring our very strict nitpicking and addressing every issue found\\nwith proper fixes and in a very cooperative spirit\\n\\n# Core Improvements\\n\\n<PCSX2PRLink authors=\\"Refraction,MrCK1\\" shas=\\"9b8244954215072068f4f83079d1c714a4b0e09a\\">Vector Units: Fix bug in Branch in Delay Slot</PCSX2PRLink>\\n\\nWhile the Vector Units were well-suited for performing fast calculations\\nin the hands of experienced programmers, that didn\'t stop them from\\nignoring Sony\'s advice and implementing atrocious solutions to do stupid\\nthings. Enter the world of branch delay slots. One pesky game that we\'ve\\nhad issues with for many years was Dropship United Peace Force. On our\\nend of things, MicroVU will normally \\"optimize\\" NOP instructions\\n(represented as `     MOVE.xyzw vf00, vf00    ` ).\\n\\nAs it turns out however, a longstanding bug in this code failed to\\naccount for a branch delay slot inside of another branch delay slot\\n(this is as stupid as it sounds). In other words, the branch was being\\nread as a NOP and got stuck running the wrong code until the game would\\ncrash. *Never underestimate PS2 developers. If you think they won\'t do\\nsomething that\'s forbidden in the manual, you\'re dead wrong*\\n\\n<Image cols={6} src={require(\\"./img/dropship-united-peace-force-s.webp\\").default} />\\n> Dropship United Peace Force\\n\\n<PCSX2PRLink authors=\\"FlatOutPS2\\" prNums=\\"2919\\">Recompiler: Fix stall in branch delay slot</PCSX2PRLink>\\n\\nA recompiler bugfix has also been made which makes WRC games boot\\nproperly without hanging on the loading or relying on gamefix patches.\\n\\n# GUI/Usability Updates\\n\\n<PCSX2PRLink authors=\\"FlatOutPS2,lightningterror\\" prNums=\\"2690\\">FMV Aspect Ratio Switch/Override</PCSX2PRLink>\\n\\nChange \\"Switch to 4:3 aspect ratio when an FMV plays\\" to \\"FMV Aspect\\nRatio Override\\" drop down menu.\\n\\nThe option temporarily changes the Aspect Ratio to either 16:9 or 4:3\\ndepending on the option that is selected, and depending on the Window\\nAspect ratio that is selected.\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"2567\\">Improved GameDB handling</PCSX2PRLink>\\n\\nThe GameDB handling has been improved thanks to turtleli. To sum it up\\nin a short and simple explanation turtleli did some magic, updated the\\ncode which results in slightly faster reading and better overall\\nperformance, a lot of old legacy code was removed as well. For more\\ndetails you can read the detailed explanation in the PR description on\\nGithub.\\n\\n<PCSX2PRLink authors=\\"arcum42\\" prNums=\\"2574\\">Save/Load slot improvements</PCSX2PRLink>\\n\\nFrom now on Save and Load slots will show date when a save is present in\\neach slot for each game. Also empty save/load slots will show an Empty\\nname tag instead. empty load slots will also be greyed out from the GUI\\ninterface.\\n\\n<Image cols={6} src={require(\\"./img/saveslots.webp\\").default} />\\n> Comparison of the old and new saveslot interface\\n\\n# GSdx: Enhancements for all renderers\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"2934\\">GSdx-HW: Fix half-bottom screen issues on texture/color shuffling</PCSX2PRLink>\\n\\nAnother major issue we have is the half screen bottom issue where only\\nhalf of the screen post processing effects are rendered correctly. Kojin\\nhas been very successful and was able to fix a big portion of half\\nscreen issues in cases where texture shuffle or color shuffle was used.\\nThere are still plenty of remaining edge cases that aren\'t handled yet,\\nbut this is a huge step forward for future accuracy.\\n\\nLink to the meta issue\\n[\\\\#1339](https://github.com/PCSX2/pcsx2/issues/1339).\\n\\n<PCSX2PRLink authors=\\"AlessandroVetere\\" prNums=\\"2344,2681,2731\\">GSdx-TC: Palette management rework</PCSX2PRLink>\\n\\nThe entire palette management system in texture cache has seen a huge\\nupdate by Alessandro.\\n\\nA tl-dr version would be it improves performance in games, a noteworthy\\ntitle would be Zone of the Enders 2. The game sees a doubling in\\nframerate with Allow 8-bit textures being enabled. Overall performance\\nis still improved when the option is disabled (but to a lesser degree).\\nThe info is pretty technical so if anyone wants to follow up on it and\\nread the technical stuff they can do so on the multiple linked pull\\nrequests.\\n\\n<PCSX2PRLink authors=\\"FlatOutPS2,turtleli\\" prNums=\\"2534\\">GSdx: Add Skipdraw Offset option for Skipdraw</PCSX2PRLink>\\n\\nExample: When the broken effects are at frames 91-100, the default\\nskipdraw always skips 0-100, possibly skipping several functioning\\neffects as well. By adding this new option, it is now possible to skip\\njust frames 91 - 100.\\n\\n<PCSX2PRLink authors=\\"gregory38,lightningterror\\" prNums=\\"2855\\">Gsdx-HW: implement fixed TEX0 for all renderers</PCSX2PRLink>\\n\\nThis improves the hardware rendering and fixes the corrupt textures on\\ngames such as Lupin The Third andJames Bond 007: Nightfire, other games\\nare likely to be affected as well however these are the only ones\\nconfirmed so far.\\n\\n<SliderCompare before={require(\\"./img/007-nightfire-before-s.jpg\\").default} after={require(\\"./img/007-nightfire-after-s.jpg\\").default} />\\n\\n# GSdx: Enhancements for OpenGL\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"2921\\">GSdx-GL: Bypass the texture cache when the framebuffer is sampled</PCSX2PRLink>\\n\\nThis allows to bypass the texture cache when the framebuffer is sampled\\non OpenGL when at least Basic Blending is enabled, it provides a huge\\nspeed increase in Star Ocean 3, Ratchet and Clank and Jak games.\\n\\nA great example would be Star Ocean 3 from **20fps** to **94fps** with the same\\nsettings.\\n\\n<PCSX2PRLink authors=\\"gregory38,tadanokojin,lightningterror\\" prNums=\\"2837,2844,2843\\">GSdx-GL: Experimental Sparse Texture support</PCSX2PRLink>\\n\\nThis feature is still experimental and can be enabled in OpenGL Advanced\\nsettings within Advanced Settings & HW hacks.\\n\\nThis feature has the potential to greatly reduce the VRAM requirements\\naccross the board.\\nSome games which use a couple of gigabytes of VRAM with this feature\\nhave the potential to reduce that usage to barely a gigabyte. Such\\nexamples would be Gran Turismo Series, Tourist Trophy, Armored Core and\\nmany others.\\n\\nIt is only available on Nvidia hardware as AMD drivers are completely\\nbroken.\\n\\n# GSdx: Enhancements for Direct3D\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2459\\">GSdx-D3D: Improved palette support has been ported from OpenGL to Direct3D10/11</PCSX2PRLink>\\n\\nThe purpose of the code is to support alpha channel of RT uses as an\\nindex for a palette texture. It fixes shadows in Star Ocean 3. Other\\ngames could be affected as well but it\'s unknown which right now. For\\nmore technical details please visit the original commit for details\\n[b0af54d](https://github.com/PCSX2/pcsx2/commit/b0af54d33e0ca35b1bbd3c991234f2b59eb0c001%22)\\n.\\n\\n<PCSX2PRLink authors=\\"lightningterror,KrossX\\" prNums=\\"2590\\">GSdx-D3D: GPU accelerate 8 bits texture conversion port from OpenGL to Direct3D10/11</PCSX2PRLink>\\n\\nDirect3D also supports 8-bit conversion through a shader now like OpenGL\\ndoes, this improves rendering on games that use 8-bit textures like FIFA\\nStreet, Blood Will Tell and many others. Previously 8-bit conversion was\\ndone on the CPU with the **Frame Buffer Conversion** hack which was also\\nvery slow. The only downside is that this feature is not supported on\\ncustom resolutions.\\n\\nFor more details please check the original commits\\n[d29e375f](https://github.com/PCSX2/pcsx2/commit/d29e375f72c94fb206812e589cf6b8c5814249f9)\\nand\\n[6121677a](https://github.com/PCSX2/pcsx2/commit/6121677aa1064269db333f4d5db0b3ead65270c1)\\n.\\n\\n<Image cols={6} src={require(\\"./img/Blood-Will-Tell.jpg\\").default} />\\n> A comparison of graphical improvements on Blood Will Tell\\n\\n<PCSX2PRLink authors=\\"tadanokojin\\" prNums=\\"2752\\">GSdx: OSD improvements and port to Direct3D10/11</PCSX2PRLink>\\n\\nOn screen display(OSD) has seen quite a number of improvements such as\\nbeing able to select the color of the font, some code cleanup and a full\\nport to Direct3D10/11.\\n\\n<PCSX2PRLink authors=\\"lightningterror,tadanokojin,krossx\\" prNums=\\"2734\\">GSdx-D3D: Depth Emulation port to Direct3D10/11</PCSX2PRLink>\\n\\nPreviously only OpenGL supported depth emulation for rendering special\\npost processing effects which left out the D3D11 backend a bit behind,\\nthis feature has been fully ported to Direct3D10/11.\\n\\n<PCSX2PRLink authors=\\"lightningterror,tadanokojin,krossx\\" prNums=\\"2745,2754,2823,2830\\">GSdx-D3D: Channel shuffle port to Direct3D10/11</PCSX2PRLink>\\n\\nJust like depth emulation, channel shuffle also renders some special\\npost processing effects, usually referred as the top left corner issue\\n[\\\\#1318.](https://github.com/PCSX2/pcsx2/issues/1318) The feature has\\nbeen fully ported to Direct3D10/11 bringing the accuracy of\\nDirect3D10/11 much closer to OpenGL. For anyone that missed the channel\\nshuffle blog post when it was first introduced to OpenGL they can read\\nit [here](/blog/2016/channel-shuffle-effect) .\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2718,2723\\">GSdx: Accurate Date update and partial port to Direct3D10/11</PCSX2PRLink>\\n\\nA new Fast option has been added to OpenGL Accurate Date which should\\nrender shadows/transparency without needing the full option, the same\\nfeature has been ported to Direct3D10/11 along with a port of Fast DATE\\ncode. The entire feature is not fully ported to Direct3D10/11 as some\\ncases are missing however it is still a huge improvement from before.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2807\\">GSdx-D3D: HDR Colclip blend port to Direct3D10/11</PCSX2PRLink>\\n\\nThe old inaccurate algorithm has been removed and replaced with a more\\naccurate one just like on OpenGL. This feature imrpoves shadow rendering\\non many games.\\nA few examples would be: God of War 1 and 2, Final Fight Streetwise,\\nSteambot Chronicles, Eternal Poison and many others.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2928,2937\\">GSdx-D3D: Accurate Blend Fbmask port to Direct3D10/11</PCSX2PRLink>\\n\\nThis feature allows to better render colors and shadows which can also\\nbe toggled by the Accurate Blending option, the feature on Direct3D\\n10/11 is split between Basic, Medium and High, whereas on OpenGL Basic\\nblending fully enables this feature already, we have to do this since\\nDirect3D10/11 is a limited API. It is quite a big improvement overall\\nand again should close the gap between OpenGL and Direct3D10/11. Do note\\nhowever that the feature operates slower compared to OpenGL because of\\nthe limited API.\\n\\nFor comparison High Blending D3D10/11 is like one third of Basic\\nBlending OpenGL. That\'s how much entire blending features differ and\\nDirect3D10/11. Basic software blending is a big feature that\\nDirect3D10/11 lacks.\\n\\nImage comparison on Direct3D10/11:\\n\\n<Image cols={6} src={require(\\"./img/fifa_street_broken.jpg\\").default} />\\nAccurate Date (Off), Accurate Blending (Off)\\n\\n<Image cols={6} src={require(\\"./img/fifa_street_fixed.jpg\\").default} />\\nAccurate Date (Fast), Accurate Blending (Basic)\\n\\nAccurate Date renders the shadows better while Accurate Blending renders\\nthe stage as well as character models in this game.\\n\\n<PCSX2PRLink authors=\\"hibye8313\\" prNums=\\"2973\\">GSdx-D3D: Partial SW blending port to Direct3D10/11</PCSX2PRLink>\\n\\nCurrently only Accumulation sw blending is supported, this feature\\nsimilar to HDR Colclip also improves shadow rendering on games such as\\nCrash of the Titans, Crash Twinsanity, Castlevania, Nano Breaker and\\nmany others. Part of this feature can be toggled with Accurate Blending\\noption from the GUI just like on OpenGL.\\n\\nA notable issue that is resolved would be\\n[\\\\#1920](https://github.com/PCSX2/pcsx2/issues/1920) .\\n\\n# Accuracy Enhancement Results\\n\\nHere we can show you a comparison of several games before and after, we\\ncan\'t put these in one specific category above because they could just\\nas easily fit in several because of the multiple rendering effects that\\nwere fixed.\\n\\nKeep in mind these comparisons are for Direct3D as these improvements\\nhave been implemented for a long time on OpenGL. Comparison is also done\\nbetween PCSX21.4 and current developmentbuilds (14 Jun 2019).\\n\\n-   ICO HLE implementation would be a great example of this as it uses\\nseveral.ICO uses a depth of field effect for the fog. Depth is\\nextracted into the alpha channel of a texture. And then used as\\nblending factor. A detailed explanation can be found in the original\\nOpenGL pull request [here](https://github.com/PCSX2/pcsx2/pull/1854)\\n. Unlike on OpenGL where implementation was easier to do so, we had\\nto do a few extra steps on Direct3D because it\'s very limited and\\nrestricted.\\n\\n<Image cols={6} src={require(\\"./img/ico.jpg\\").default} />\\n\\n-   The next example we have is Urban Chaos, and oh boy is this a huge\\nimprovement, basically we have proper Texture shuffle emulation,\\nDepth emulation, Channel shuffle emulation and special HLE shader\\nemulation.\\n\\n<Image cols={6} src={require(\\"./img/urban-chaos.jpg\\").default} />\\n\\nOf course we can show you more examples of other similar games that got\\nfixed too but the visual results are quite similar so for anyone\\ninterested they can check meta issues such as the top left corner issue\\n(Channel shuffle) [here](https://github.com/PCSX2/pcsx2/issues/1318) .\\n\\n# GSdx Code Cleanup\\n\\n-   Removal of Direct3D9 backend. Removal of Direct3D9 allowed us to\\nbetter support the new features that were ported on Direct3D10/11\\nwithout Direct3D9 holding us back.\\n-   Removal of MSAA. This form of anti-aliasing was removed due to its\'\\nincompatibility with newer DirectX features. At the same time, it\\nwas actively hindering development progress from being made due to a\\nhigh amount of rendering bugs that were being produced while the\\ncode was still in place. On a more general note, keep in mind that\\nMSAA has already fallen out of favor in most PC games in 2019 due to\\nits\' high overhead requirements. GS emulation is no stranger to\\nthis, as most systems would likely have no GPU overhead available to\\nrun MSAA without incurring major speed penalties. (on more demanding\\ntitles) *FXAA is still available as a replacement to all users\\nthrough the GSdx dialog or the Page Up keyboard shortcut.*\\n-   Removal of many CRC hacks. Oh you heard right, once again we removed\\nplenty of CRC hacks, this is because of the increased accuracy on\\nall renderers - especially Direct3D10/11 and the purge of Direct3D9.\\n\\n# Other Enhancements\\n\\n-   [\\\\#2421](https://github.com/PCSX2/pcsx2/pull/2421) Unused Direct\\nCompute render has been purged by\\n[turtleli](https://github.com/turtleli) .\\n-   A lot of other legacy/useless code has been purged from the emulator\\nas well. Guess we did a bit of a house cleaning.\\n-   Many fixes and patches were added to the GameDB to fix various\\nissues such as unplayable games and visual glitches.\\n-   There were also core enhancements made by\\n[Refraction](https://github.com/refractionpcsx2) that also\\nimprove/fix some games as well as improve core logging.\\n-   The GUI for SPUX-2 and GSdx have been updated to improve usability.\\n-   Gif Unit: Recheck VIF status after a reset is performed when waiting\\nfor PATH3 (Fixes Eragon)\\n-   VIF: \\"Hacked the Hack\\"(Fixes \\"Downtown Run\\")\\n\\nAs you can see, we have been all but idle these past months, with many\\nbug fixes, hack removals and improvements all around PCSX2 and plugins.\\nWe know it has been too long since a stable release and 1.5 GIT builds\\nare already miles ahead the stable 1.4 in all fronts so we are in the\\nprocess of feature freezing for the long awaited 1.6 stable release.\\nStay tuned!"},{"id":"/2018/merry-christmas-from-the-pcsx2-team","metadata":{"permalink":"/pcsx2-net-www/blog/2018/merry-christmas-from-the-pcsx2-team","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2018/merry-christmas-from-the-pcsx2-team/index.mdx","source":"@site/blog/2018/merry-christmas-from-the-pcsx2-team/index.mdx","title":"Merry Christmas From The PCSX2 Team","description":"Merry Christmas everyone! We know you haven\'t heard from us for a while (ok for a long time) but it was for good reason!","date":"2018-12-25T00:00:00.000Z","formattedDate":"December 25, 2018","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.915,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2018-12-25T00:00:00.000Z","description":"Merry Christmas everyone! We know you haven\'t heard from us for a while (ok for a long time) but it was for good reason!","draft":false,"tags":["devblog"],"title":"Merry Christmas From The PCSX2 Team"},"prevItem":{"title":"From Q2 2018 To Q2 2019 - 1 Year Progress Report","permalink":"/pcsx2-net-www/blog/2019/from-q2-2018-to-q2-2019"},"nextItem":{"title":"Q1 2018 Progress Report","permalink":"/pcsx2-net-www/blog/2018/q1-2018-progress-report"}},"content":"Merry Christmas everyone! We know you haven\'t heard from us for a while (ok for a long time \ud83d\ude1b) but it was for good reason!\\n\\n\x3c!-- truncate --\x3e\\n\\nDevelopment has been going strong for several months with some new members joining and others digging even deeper in PCSX2 issues ironing them out. People who have been following our [github](https://github.com/PCSX2/pcsx2) already know how many hacks have been removed (yes, removed \ud83d\ude1b) lately, with the DX11 renderer of GSdx quickly catching up to OpenGL accuracy levels thanks to several contributors. This large boost in progress was incited by gregory helping out the newcomers with his in-depth knowledge of GSdx, in between his baby\'s sleep sessions, so he deserves a big thank you from all of us. The core has also been improved, while several big PRs are also close to merging, making this an exciting time for PCSX2!\\n\\nThanks to the new (and old) guys giving their time and skills to breathe some life to PCSX2 and to everyone who still believe in us and appreciate this project! Have a nice one and keep playing!"},{"id":"/2018/q1-2018-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2018/q1-2018-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2018/q1-2018-progress-report/index.mdx","source":"@site/blog/2018/q1-2018-progress-report/index.mdx","title":"Q1 2018 Progress Report","description":"What sorcery is this, we are on time with the progress report","date":"2018-04-10T00:00:00.000Z","formattedDate":"April 10, 2018","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":5.47,"hasTruncateMarker":true,"authors":[{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"},{"name":"CK1","url":"https://github.com/MrCK1","imageURL":"https://github.com/MrCK1.png","key":"ck1"}],"frontMatter":{"authors":["lightningterror","ck1"],"date":"2018-04-10T00:00:00.000Z","description":"What sorcery is this, we are on time with the progress report","draft":false,"tags":["progress-report"],"title":"Q1 2018 Progress Report"},"prevItem":{"title":"Merry Christmas From The PCSX2 Team","permalink":"/pcsx2-net-www/blog/2018/merry-christmas-from-the-pcsx2-team"},"nextItem":{"title":"The PCSX2 Team\'s Statement Regarding The \\"DamonPS2\\" Emulator","permalink":"/pcsx2-net-www/blog/2018/the-pcsx2-teams-statement-regarding-the-damonps2-emulator"}},"content":"What sorcery is this, we are on time with the progress report\\n\\nWe bring to you another progress report like usual. Enjoy!\\n\\n\x3c!-- truncate --\x3e\\n\\n![](./img/progrepq12018.jpg)\\n\\n<PCSX2PRLink authors=\\"AlessandroVetere\\" prNums=\\"1944\\">GSdx-TC: Performance improvement by using custom container</PCSX2PRLink>\\n\\nA massive improvement on GSdx was done in Q2 2017 that we forgot to\\nmention which improves the performance on both hardware and software\\nmode around 1-15% give or take depending on the game and configuration.\\nIt\'s a bit technical so all we can say is that it improves performance\\nbut if anyone wishes to read the more technical stuff then it\'s best to\\ncheckout the Pull Request on GitHub.\\n\\n<PCSX2PRLink authors=\\"ssakash\\" prNums=\\"2122\\">GSdx-TC: Load size calculation in target update</PCSX2PRLink>\\n\\nAkash also updated the texture cache that fixed/improved a few issues as\\nwell as solved a couple of regressions. These changes should help with\\nimproving emulation accuracy on native and upscaled resolutions.\\n\\n-   Fix the load size calculation in target update.\\n-   Add an optional macro (ENABLE\\\\_ACCURATE\\\\_BUFFER\\\\_EMULATION) for\\nenabling more accurate emulation of the buffer size.\\n-   Fixed a regression that caused many games to crash with custom\\nresolutions (Gran Turismo series, Silent Hill series, Persona\\nseries, Metal Gear Solid series and others as well).\\n-   Fixed a regression on Beyond Good And Evil that exhibited FMV\\nflickering.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2347\\">GSdx: Texture Shuffle port to Direct3D</PCSX2PRLink>\\n\\n\\nPreviously texture shuffle only worked if CRC hack level was below full\\nsince it was in beta stage. lightningterror did the testing, adjusted\\nthe code and properly ported it without relying on the CRC hack level.\\nThis will fix glitchy graphics (green/brown vertical lines sometimes) on\\ngames that make use of the same effect.\\nThe Godfather, Urban Chaos, 50 Cent Bulletproof, Metal Gear solid\\nseries,God of War series, Final Fight Streetwise,The Suffering Ties that\\nBind,Sengoku Basara and many others.\\n\\n\\nNote that texture shuffle is only supported by Direct3D10/11, however a\\npartial port has been done for Direct3D9 as well. Direct3D 9 will skip\\nsome of the bad draw calls but the screen may still look a bit glitchy\\non some games. I guess better than nothing\\n\\nHere are some example comparisons on Direct3D11.\\n\\n1.Sengoku Basara.\\n\\n2.50 Cent Bulletproof.\\n\\n3\\\\. The Suffering Ties that Bind.\\n\\n<Image cols={6} src={require(\\"./img/d3d-fixes-before-after.jpg\\").default} />\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2347\\">GSdx: Channel Shuffle improvements on Direct3D</PCSX2PRLink>\\n\\nA small adjustment has been made in the channel shuffle detection on\\nDirect3D, a lot of games should see an improvement where the top left\\ncorner issue has been resolved /improved.\\n\\nMetal Gear Solid series, Urban Chaos, Stolen and possibly other games\\nthat use the effect are resolved/improved.\\nDirect3D still misses the proper shaders to emulate the effect and need\\nto be ported from OpenGL one day but it\'s a nice improvement for users\\nthat don\'t use OpenGL.\\n\\nIt\'s worth keeping in mind just like before the channel shuffle effect\\nonly skips the bad draw calls so it kinda works like a CRC hack just\\nsomewhat better since it only skips the channel shuffle draw calls and\\nnot any other post processing effects.\\n\\n# GSdx: CRC hacks adjustments\\n\\nPeople usually say that PCSX2 uses a lot of hacks so we are gonna\\nhighlight some changes to CRC hacks\\n\\n- List of purged CRC hacks:\\n- Gran Turismo Concept - All hacks removed. [\\\\#2335](https://github.com/PCSX2/pcsx2/pull/2335)\\n- Gran Turismo 3 A spec - All hacks removed. [\\\\#2335](https://github.com/PCSX2/pcsx2/pull/2335)\\n- Gran Turismo 4 - All hacks removed. [\\\\#2304](https://github.com/PCSX2/pcsx2/pull/2304)\\n- Tourist Trophy - All hacks removed. [\\\\#2304](https://github.com/PCSX2/pcsx2/pull/2304)\\n- God Of War 1 - One hack removed. [\\\\#2350](https://github.com/PCSX2/pcsx2/pull/2350)\\n- God Of War 2 - One hack removed. [\\\\#2350](https://github.com/PCSX2/pcsx2/pull/2350)\\n- SSX 3 - All hacks removed. [\\\\#2259](https://github.com/PCSX2/pcsx2/pull/2259)\\n- Tekken 5 - One hack removed. [\\\\#2205](https://github.com/PCSX2/pcsx2/pull/2205)\\n- Final Fight Streetwise - One hack removed. [\\\\#2343](https://github.com/PCSX2/pcsx2/pull/2343)\\n- The Simpsons Game - One hack removed. [\\\\#2149](https://github.com/PCSX2/pcsx2/pull/2149)\\n- Sengoku Basara - All hacks removed. [\\\\#2357](https://github.com/PCSX2/pcsx2/pull/2357)\\n- Naruto - Narutimate Hero 3 - One hack removed. [\\\\#2361](https://github.com/PCSX2/pcsx2/pull/2361)\\n- Naruto Shippuuden: Narutimate Accel - One hack removed. [\\\\#2361](https://github.com/PCSX2/pcsx2/pull/2361)\\n\\nAnd since we are mentioning removed we will also mention added CRC\\nhacks. Not much right ?\\n\\n- List of added CRC hacks:\\n- Final Fight Streetwise - One hack added. [\\\\#2343](https://github.com/PCSX2/pcsx2/pull/2343)\\n\\nThere have been more changes such as moving some CRC hacks to Aggressive\\nstate that can be used as speedhacks, some moved to Direct3D only but\\nthe list will be quite big if we include everything, all the other\\nchanges can be viewed on GitHub.\\n\\nThe CRC hack code was also cleaned up a bit, many games\\n(prequels/sequels) shared code, which has now been merged making it more\\ncompact, readable and cleaner.\\n\\n<PCSX2PRLink authors=\\"ssakash\\" prNums=\\"2239\\">PCSX2-Counters: Fix Hblank calculation for DVD video modes</PCSX2PRLink>\\n\\nPreviously, the DVD variant NTSC/PAL modes used the horizontal blanking\\ninterval calculation algorithm used by digital video modes, which\\nshouldn\'t be used and also the rounding error check was neglected. Added\\nthe DVD variant modes to the list in analog video mode finder\\nsubroutine. This should impact timing/vertical synchronization in PSX\\ngames significantly.\\n\\nSo far the only affected PSX title isLego Rock Raiders\' which has the\\ngraphic corruptions resolved.\\n\\n# GUI Changes and Enhancements\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2272\\">Add configurable Cheats folder to Components Selectors</PCSX2PRLink>\\n\\n- Add GUI option to Plugins Components Selectors to change the default \\"Cheats\\" folder location. Similar to savestates/logs/..etc..\\n\\n<PCSX2PRLink authors=\\"ssakash\\" prNums=\\"2237\\">Display the video mode on titlebar</PCSX2PRLink>\\n\\n- Display current video mode at the title bar. (Useful for debugging purposes and for user feedback at cases when video mode is being changed)\\n\\n# Other Enhancements\\n\\n<PCSX2PRLink authors=\\"FlatOutPS2\\" prNums=\\"2295\\">XPad andUSBqemu have been moved to Legacy solution/plugins</PCSX2PRLink>\\n\\nNo need to keep old legacy and outdated plugins in the main\\nbranch anyway. They also won\'t be included in the 1.6 release.\\nIf people want to use them they can be found on the website.\\n\\n\\n# The PCSX2 code has gone through a lot of cleanup by [turtleli](https://github.com/turtleli)\\n\\nfixing warnings, fixing a lot of annoying bugs and just making things more tidy in general.\\n\\n# SPUX-2 Also received some clean up by [FlatOut](https://github.com/FlatOutps2) and [MrCK1](https://github.com/mrck1)\\n\\nA lot of specific game CRC ID\'s have been added as well. These are\\nusually needed for CRC hacks to function properly as well as\\nautomatic mipmapping detection for games that require it.\\n\\nMany fixes and patches were added to the GameDB to fix various\\nissues such as the broken graphics in Spongebob: Creature from the\\nKrusty Krab.\\nHere is an example how the game looks right now:\\n\\n<SliderCompare before={require(\\"./img/sbb-before-s.jpg\\").default} after={require(\\"./img/sbb-after-s.jpg\\").default} />\\n\\nThere are other additions that haven\'t been mentioned as well but those\\ncan be viewed on GitHub and these are just the highlights we thought\\nwould be worth mentioning.\\n\\nBest regards from the PCSX2 Team."},{"id":"/2018/the-pcsx2-teams-statement-regarding-the-damonps2-emulator","metadata":{"permalink":"/pcsx2-net-www/blog/2018/the-pcsx2-teams-statement-regarding-the-damonps2-emulator","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2018/the-pcsx2-teams-statement-regarding-the-damonps2-emulator/index.mdx","source":"@site/blog/2018/the-pcsx2-teams-statement-regarding-the-damonps2-emulator/index.mdx","title":"The PCSX2 Team\'s Statement Regarding The \\"DamonPS2\\" Emulator","description":"Hello all! We hope you had a Happy New Year. The PCSX2 team hopes to continue making further progress throughout 2018 and into 2019! However, today we are writing to both you and the emulation/open-source community on a more serious matter.","date":"2018-01-11T00:00:00.000Z","formattedDate":"January 11, 2018","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.855,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2018-01-11T00:00:00.000Z","description":"Hello all! We hope you had a Happy New Year. The PCSX2 team hopes to continue making further progress throughout 2018 and into 2019! However, today we are writing to both you and the emulation/open-source community on a more serious matter.","draft":false,"tags":["devblog"],"title":"The PCSX2 Team\'s Statement Regarding The \\"DamonPS2\\" Emulator"},"prevItem":{"title":"Q1 2018 Progress Report","permalink":"/pcsx2-net-www/blog/2018/q1-2018-progress-report"},"nextItem":{"title":"Happy New Year - Q3 & Q4 2017 Progress Report","permalink":"/pcsx2-net-www/blog/2018/q3-q4-2017-progress-report"}},"content":"Hello all! We hope you had a Happy New Year. The PCSX2 team hopes to\\ncontinue making further progress throughout 2018 and into 2019! However,\\ntoday we are writing to both you and the emulation/open-source community\\non a more serious matter.\\n\\n\x3c!-- truncate --\x3e\\n\\n# Introduction and Background Information\\n\\nYou may have heard from various sources that a second PS2 emulator for\\nAndroid was seen on the Google Play Store called DamonPS2. Initially, we\\nwere very happy to learn that a new developer had taken the initiative\\nto begin work on a new PS2 emulator for a mobile platform; a daunting\\ntask in itself that we applaud them for. After further investigation\\nhowever, we learned that there were rather striking resemblances to\\nPCSX2 contained in the new emulator.\\n\\nThe first piece of evidence that we learned was that the [GameIndex.dbf file distributed with the emulator](./img/gameindex.dbf.jpg)\\n(screenshot) contained\\n[patches](./img/patches.jpg) that were\\nspecific to PCSX2, and furthermore would not work elsewhere. We were\\nalso able to find matching CDVD strings using a text editor, such as the\\n[message returned](./img/message-returned2.jpg) by\\nthe PCSX2 console when an PSX/PSone disc is inserted. Further evidence\\nincluded a [matching file structure](./img/file-structure.webp) and\\ngraphical output that [mirrors GSdx](./img/gsdx.jpg).\\n\\nIn response to this evidence, we contacted the developer to notify them\\nabout their violation of the GNU General Public License which PCSX2 is\\nprotected under, since by all evidence they are using PCSX2 code without\\nreleasing the source code and we gave them a time frame in which to\\ncorrect this issue. We hoped the issue could be resolved amicably for\\nboth projects. However the developer would go on to claim that they did\\nnot steal the PCSX2 source code, yet they offered us an extortionate sum\\nof money to stay silent, which as you can assert we did not accept. In\\naddition, they said that they would become open-source once the emulator\\nreached 80 million downloads (not very realistic...). In their final\\nemail to us (which we did not respond back to) the developers wanted to\\nfurther \\"bargain\\" by setting up a licensing scheme; which we would not\\naccept under any circumstances regardless.\\n\\n# Final Actions and Closing Comments\\nAs a result of the circumstances and the time frame lapsing, the PCSX2\\nTeam submitted a DMCA takedown for the \\"DamonPS2\\" app on the Google\\nPlay Store. The developer took down the emulator before the DMCA had a\\nchance to go through as they would have been notified about the DMCA and\\nprobably wanted to avoid being banned from the Google Play Store, citing\\nsome reason to their users about the description being bad, something\\nwhich we\'ve never seen Google remove an app for. We will monitor the\\nsituation and see what happens when the developer returns the app to the\\nstore.\\n\\nTo further clarify any confusion you may have about this matter, our\\nactions were not done for any sort of personal/reputable gain or out of\\nspite. The PCSX2 team has always encouraged new developments to take\\nplace whether it be inside a pull request or outside of the repository\\nas we\'ve seen here. Ultimately, the developer\'s failure to comply with\\nthe GNU General Public License in a reasonable time-frame left the team\\nwith no choice but to take the appropriate actions. We would like to\\ntake this moment to send our sincerest thanks to the community for their\\nwonderful support over the past 15 years!\\n\\n**-The PCSX2 team**"},{"id":"/2018/q3-q4-2017-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2018/q3-q4-2017-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2018/q3-q4-2017-progress-report/index.mdx","source":"@site/blog/2018/q3-q4-2017-progress-report/index.mdx","title":"Happy New Year - Q3 & Q4 2017 Progress Report","description":"Happy New Year to everyone from the PCSX2 team, we wish you the best for the new year, with lots of PCSX2 gaming playing your favorite classics","date":"2018-01-06T00:00:00.000Z","formattedDate":"January 6, 2018","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":3.375,"hasTruncateMarker":true,"authors":[{"name":"CK1","url":"https://github.com/MrCK1","imageURL":"https://github.com/MrCK1.png","key":"ck1"},{"name":"LightningTerror","url":"https://github.com/LightningTerror","imageURL":"https://github.com/LightningTerror.png","key":"lightningterror"}],"frontMatter":{"authors":["ck1","lightningterror"],"date":"2018-01-06T00:00:00.000Z","description":"Happy New Year to everyone from the PCSX2 team, we wish you the best for the new year, with lots of PCSX2 gaming playing your favorite classics","draft":false,"tags":["progress-report"],"title":"Happy New Year - Q3 & Q4 2017 Progress Report"},"prevItem":{"title":"The PCSX2 Team\'s Statement Regarding The \\"DamonPS2\\" Emulator","permalink":"/pcsx2-net-www/blog/2018/the-pcsx2-teams-statement-regarding-the-damonps2-emulator"},"nextItem":{"title":"Q2 2017 Progress Report","permalink":"/pcsx2-net-www/blog/2017/q2-2017-progress-report"}},"content":"Happy New Year to everyone from the PCSX2 team, we wish you the best for\\nthe new year, with lots of PCSX2 gaming playing your favorite classics\\n\\nOnto the news!\\n\\n\x3c!-- truncate --\x3e\\n\\n![](./img/progress-rep-q3-q4-2017.jpg)\\n\\nA bit later than expected , here is the Q3 & Q4 2017 progress report.\\n\\nOf course there are other changes not mentioned in the report as well so\\nprogress is still moving along\\n\\nHere are the highlighted changes that we hope will strike your fancy\\n\\n<PCSX2PRLink authors=\\"RedPanda4552\\" prNums=\\"2067\\">PSX:Memory card support</PCSX2PRLink>\\n\\nOriginallyPSX memory card creation was not possible through the emulator\\nand games could not see when a memory card was inserted. In addition, a\\nhack has been added that allows PCSX2 to \\"view\\" PSX memory cards as a\\nPocketstation to fix compatibility with certain PSX games such as Final\\nFantasy VIII. More details on that addition can be found\\n[here](https://github.com/PCSX2/pcsx2/pull/2208)!\\n\\nThis change adds/enhances the following additions:\\n\\n- Adds a checkbox to the memory card creation screen allowing PSX cards to be created, as well as the logic for writing in tothe empty card.\\n- Modifying the existing preprocessor based SIO interrupts to instead work based on the running game\'s type (PSX/PS2). This allows PS2 games to skip the delays as they were before, but for PSX games to use the delays, which are necessary for memory card interaction.\\n\\n# GSdx Enhancements\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2145\\">Extend </PCSX2PRLink>\\n\\nThis hack allows for the \\"Preload Frame Data\\" (that is currently present in the OpenGL renderer) to be used in D3D renderers. It is used to fix various effects that are currently broken or not rendered properly in D3D renderers.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2086\\">Frame Buffer Conversion hack</PCSX2PRLink>\\n\\nThis hack enables 4-bit and 8-bit textures to be converted on the CPU instead of the GPU. It will fix glitches in games that use these types of textures.\\n\\n<PCSX2PRLink authors=\\"lightningterror\\" prNums=\\"2099\\">Automatic Mipmapping option</PCSX2PRLink>\\n\\nThis option enables automatic mipmapping on the hardware render if a game is pre configured to use mipmapping in the code.\\n\\n# GUI Changes and Enhancements\\n\\n<PCSX2PRLink authors=\\"ssakash\\" prNums=\\"1934\\">Always ask when booting</PCSX2PRLink>\\n\\nWhen enabled, this\\noption opens the file explorer to directly select the ISO at each boot\\ninstance instead of relying on the Recent ISO list.\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"2000\\">Adaptive Vsync support</PCSX2PRLink>\\n\\nAdaptive Vsync support and\\nGUI optionhave been added to PCSX2 for OpenGL render to further help\\nwith screen tearing.\\n\\n<PCSX2PRLink authors=\\"ssakash\\" prNums=\\"2003\\">Restore Defaults button to GS</PCSX2PRLink>\\n\\nAdded Restore Defaults button to\\nthe GS panel of Emulation settings dialog.\\n\\n<PCSX2PRLink authors=\\"RedPanda4552\\" prNums=\\"2080\\">Clear ISO list option</PCSX2PRLink>\\n\\nThis option will clear\\nthe cached ISOs (Recent ISO list) that were used in the past. Should\\nhelp with reducing clutter on large lists.\\n\\n# Translation Updates\\n\\nWe are always seeking new translations for the PCSX2 GUI in your favorite languages! The table [here](https://github.com/PCSX2/pcsx2/wiki/PCSX2-Version-Guide-for-Translations) will show you the most up to date information on the translation statuses of languages that are currently included with PCSX2. If you see your language missing or would like to update a translation, feel free to get started [here](https://forums.pcsx2.net/Thread-Program-and-Guide-translation-applications)!\\n\\n<PCSX2PRLink authors=\\"rffontenelle\\" prNums=\\"1966\\">Danish Translation</PCSX2PRLink>\\n\\nAlso by forum user [Jakob5566](https://forums.pcsx2.net/User-Jakob5566)\\n\\nA brand new\\nDanish GUI translated has been added! I don\'t have anything witty to say\\nin Danish, sorry.\\n\\n<PCSX2PRLink authors=\\"Leucos8\\" prNums=\\"2155\\">Italian Translation</PCSX2PRLink>\\n\\nThe Italian GUI translation has been updated for accuracy.\\n\\n<PCSX2PRLink authors=\\"IlDucci\\" prNums=\\"2127\\">Spanish Translation</PCSX2PRLink>\\n\\nThe Spanish GUI translation has been updated for accuracy.\\n\\n<PCSX2PRLink authors=\\"altiereslima\\" prNums=\\"2209\\">Portuguese (Brazil) Translation</PCSX2PRLink>\\n\\nThe Portuguese (Brazil) GUI translation has been updated for accuracy.\\n\\n<PCSX2PRLink authors=\\"FiLeonard\\" prNums=\\"2209\\">German Translation</PCSX2PRLink>\\n\\nThe German GUI translation has been updated for accuracy.\\n\\n<PCSX2PRLink authors=\\"frantisekz\\" prNums=\\"1989\\">Czech Translation</PCSX2PRLink>\\n\\nThe Czech GUI translation has been updated for accuracy.\\n\\n<PCSX2PRLink authors=\\"atomic83GitHub\\" prNums=\\"2119\\">French Translation</PCSX2PRLink>\\n\\nThe French GUI translation has been updated for accuracy.\\n\\n<PCSX2PRLink authors=\\"DandelionSprout\\" prNums=\\"1850\\">Norwegian Translation</PCSX2PRLink>\\n\\nThe Norwegian GUI translation has been updated for accuracy.\\n\\n<PCSX2PRLink authors=\\"pgert\\" prNums=\\"2140\\">Swedish Translation</PCSX2PRLink>\\n\\nThe Swedish GUI translation has been updated for accuracy.\\n\\n<PCSX2PRLink authors=\\"\\" prNums=\\"2029\\">Turkish Translation</PCSX2PRLink>\\n\\nBy forum user [PyramidHead](https://forums.pcsx2.net/User-PyramidHead)\\n\\nThe Turkish GUI translation has been updated for accuracy.\\n\\nExpect some more news about pcsx2.net from Bositman in a couple of days,\\neven though he said it would be before this progress report"},{"id":"/2017/q2-2017-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2017/q2-2017-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2017/q2-2017-progress-report/index.mdx","source":"@site/blog/2017/q2-2017-progress-report/index.mdx","title":"Q2 2017 Progress Report","description":"Hello followers and welcome to the Q2 2017 progress report","date":"2017-09-11T00:00:00.000Z","formattedDate":"September 11, 2017","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":5.61,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2017-09-11T00:00:00.000Z","description":"Hello followers and welcome to the Q2 2017 progress report","draft":false,"tags":["progress-report"],"title":"Q2 2017 Progress Report"},"prevItem":{"title":"Happy New Year - Q3 & Q4 2017 Progress Report","permalink":"/pcsx2-net-www/blog/2018/q3-q4-2017-progress-report"},"nextItem":{"title":"Q1 2017 Progress Report","permalink":"/pcsx2-net-www/blog/2017/q1-2017-progress-report"}},"content":"Hello followers and welcome to the Q2 2017 progress report. You might\\nnotice it\'s not as exciting as the previous report, but that is because\\nthe PCSX2 team has always slacked during summer time so this was to be\\nfully expected\\n\\nThat said, here are the most notable changes since the last report\\n\\n\x3c!-- truncate --\x3e\\n\\n![](./img/progrepq22017.jpg)\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"1907\\">PCSX2: Fix command-line options</PCSX2PRLink>\\n\\nSince the [re-addition of the command-line interface](http://forums.pcsx2.net/Thread-blog-The-return-of-the-Commandline?pid=118520&amp;highlight=commandline#pid118520)\\nby former developer Air, the command-line code has remained untouched\\nfor years with issues arising on it as the other areas of the emulator\\nwere improved. The known issues of the command line interface were:\\n\\n-   Booting the ISO from the commandline would fail when CDVD plugin is\\nselected on the PCSX2 GUI and vice versa.\\n-   The --nodisc command line option failed to work.\\n-   The current ISO selection was cleared when any boot source other\\nthan ISO was used in the command line.\\n\\n**Turtleli** has\\nfixed all of these issues and the command line options are now back to\\nfunctioning properly as they should.\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"2014\\">PCSX2-Counters: Proper tracking of scalar limit</PCSX2PRLink>\\n\\nPCSX2 allows modification of the base framerate limit in the Emulation\\nsettings dialog. The value of the base framerate limit is 100% by\\ndefault and can be modified to effectively increase/decrease the speed\\nof the game.\\n\\nWe recently found out that the framerate limit wasn\'t updated according\\nto the value requested by the user, due to a discrepancy in resetting\\nthe vertical synchronization timer logic whenever new settings were\\nwritten to the emulator. The issue has now been fixed by forcing the\\nreset of the timer logic whenever the emulation settings are updated.\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"1949\\">CMake: Blacklist GCC 7.0/7.1 versions</PCSX2PRLink>\\n\\nIt recently came to our attention that hardware rendering has severe\\nissues when PCSX2 is compiled using GCC versions 7.0 and 7.1 ([#1937](https://github.com/PCSX2/pcsx2/issues/1937)). After analyzing the issue, we found out that these versions have some\\nissues with generating MMX opcodes. A [bug report](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80799)\\nregarding the issue was filed on the GCC bug tracker and it was dealt\\nwith quickly thanks to the GCC developers.\\n\\nTo prevent users from compiling PCSX2 on these affected versions, an\\nerror will now be displayed advising the user to back-port the fixed\\nversion or update GCC.\\n\\n<PCSX2PRLink authors=\\"gregory38,turtleli\\" prNums=\\"1922\\">GSdx: Support for dumping GS Dumps in xz format</PCSX2PRLink>\\n\\nA GS dump is a file which holds the data processed by the Graphics\\nsynthesizer during a specific amount of time. This file is generated\\nwith the help of the GSdx plugin and utilizing this, the developers\\ncould easily replay the graphical bugs recorded by the users on the\\ndump.\\n\\nThere are two different ways available for capturing GS dumps:\\n\\n- **SHIFT + F8**\\n- Single frame dump. (Captures GS information of a singleframe)\\n- **CONTROL + SHIFT + F8**\\n- Multiple frame dump (Captures GS information until you stop pressing your control key)\\n\\n\\nGS dumps are generally large in size and they could even exceed the size\\nof 1 GB at some cases when capturing multiple frame dumps! To avoid\\ncreating huge files, GS dumps are now directly dumped in the .xz format\\nfor single frame dumps. Compression is only limited to single frame\\ndumps for now as multiple frame dumps take longer time to compress\\nleading to a freeze for several minutes.\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"1995\\">GSdx-OpenGL: Reduce Geometry shader overhead</PCSX2PRLink>\\n\\nThe GLSL shader operations were modified in order to reduce the overhead\\nin the geometry shader. This reduction in overhead is achieved by\\noutputting 1 strip of 2 triangles instead of 2 strips of 1 triangle at\\ncertain scenarios.\\n\\nHere are some benchmarks of the change taken from Nouveau/Mesa\\ndrivers.\\n\\n<Image cols={6} src={require(\\"./img/shader-opt.webp\\").default} />\\n\\nHowever, the performance gain on games should be very small. You might\\ngain 1-2 fps at most cases and potentially higher if the bottleneck is\\nthe geometry shader execution.\\n\\n<PCSX2PRLink authors=\\"ssakash\\" prNums=\\"1942\\">GSdx-HW: Revamped buffer size calculation for custom resolutions</PCSX2PRLink>\\n\\nThere is a certain configuration option of GSdx known as **\\"Large Framebuffer\\"**\\n. When enabled, this option would increase the emulation accuracy in\\nupscaled resolutions at the cost of extra workload on the GPU.\\n\\nHere\'s an example showing the effect of **Large Framebuffer** on ICO,\\n\\n<SliderCompare before={require(\\"./img/ico-befores.webp\\").default} after={require(\\"./img/ico-afters.webp\\").default} />\\n\\nDisabling the **Large Framebuffer** option could cause severe glitches in upscaled\\nresolutions like the one shown above but only a limited amount of games\\nseem to rely on this option to function properly, so the extra GPU\\nworkload introduced by enabling this option would end up useless at\\ngames which don\'t need it.\\n\\nTo avoid such cases, **ssakash** has implemented a new buffer size calculation algorithm\\nwhich increases the framebuffer size only at necessary scenarios. This\\neffect is achieved by monitoring the scissoring values of the frame\\nmemory.\\n\\nIn a nutshell, this is how the new algorithm works compared to the\\nprevious one.\\n\\n```cpp\\n# Previous code\\nif ( Large Framebuffer )\\nIncreaseFramebufferSize();\\n\\n# New code\\nif ( Large Framebuffer )\\n{\\nif ( IsExtraBufferSizeNecessary() )\\nIncreaseFramebufferSize();\\n}\\n```\\n\\nThis new algorithm improved performance significantly on GS intensive\\ntestcases and provided around 2-5% performance boost on normal test\\ncases. For example - On the previous algorithm, Ben 10 Alien Force:\\nVligax Attacks (rendering at 3840x2160) took over 20 seconds to even\\npass the loading screen! After this new implementation, it barely takes\\n3 seconds to pass the loading screen.\\n\\n<ImageCompare left={require(\\"./img/old-algo.gif\\").default} right={require(\\"./img/new-algo.gif\\").default} />\\n\\nNow you can safely enable **Large Framebuffer** on custom\\nresolutions without worrying about any useless GPU overhead.\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"1895\\">Onepad: Update to use SDL2</PCSX2PRLink>\\n\\nThe Onepad plugin uses the SDL library to query the controller and\\ninterpret the raw input into game actions. These inputs vary per\\ncontroller and are troublesome to deal with as you need to map the\\nkernel information to the PS2 equivalent value.\\nHere\'s how it worked with SDL 1.2:\\n\\n<Image cols={6} src={require(\\"./img/sdl1.2_process_s.webp\\").default} />\\n\\nUpgrading SDL to version 2.0, we present a generic virtual controller\\nabstracting the kernel information to Onepad. The values in the virtual\\ncontroller are then mapped to their respective PS2 equivalent values.\\nThis gives us support for plug and play, automatic button mapping along\\nwith reduction in code complexity of Onepad. On the other hand, this\\nchange has also removed support for pressure sensitivity and the ability\\nto manually remap the controller. The legacy Onepad versions are still\\navailable for the support of these features until they\'re added to the\\nlatest version of Onepad.\\n\\nHere\'s a nice schema for the new implementation:\\n\\n<Image cols={6} src={require(\\"./img/sdl2_process_s.webp\\").default} />\\n\\nThanks to everyone who collected the info and helped with this report\\nonce more, you know who you are\\n\\nNext time I promise I\'ll post some news about our website, forum and\\nwiki being updated along with some new handy features for our community.\\nStay tuned!"},{"id":"/2017/q1-2017-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2017/q1-2017-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2017/q1-2017-progress-report/index.mdx","source":"@site/blog/2017/q1-2017-progress-report/index.mdx","title":"Q1 2017 Progress Report","description":"The wait is over! (if there were people still waiting on us) The Q1 2017 progress report is here","date":"2017-05-17T00:00:00.000Z","formattedDate":"May 17, 2017","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":11.91,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2017-05-17T00:00:00.000Z","description":"The wait is over! (if there were people still waiting on us) The Q1 2017 progress report is here","draft":false,"tags":["progress-report"],"title":"Q1 2017 Progress Report"},"prevItem":{"title":"Q2 2017 Progress Report","permalink":"/pcsx2-net-www/blog/2017/q2-2017-progress-report"},"nextItem":{"title":"QA Picking Our Noes","permalink":"/pcsx2-net-www/blog/2017/qa-picking-our-noes"}},"content":"![](./img/progress-rep-q1-2017.jpg)\\n\\n\x3c!-- truncate --\x3e\\n\\nThe wait is over! (if there were people still waiting on us) The Q1 2017 progress report is here, albeit we are late once more.\\nDon\'t blame us, blame all these wonderful fixes you will find below:\\n\\n# Core\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"1706\\">Core: VIF unpack speed optimization</PCSX2PRLink>\\n\\nThe PlayStation 2 Vector Interface Unit (VIF) is a pathway between the\\nmain memory and the Graphics synthesizer, one of its main functions is\\nto unpack scalar data into vector data (i.e. converting 3 32-bits\\nscalars into 3 128-bit vectors).\\n\\nPCSX2 uses dynamic recompilation to emulate the VIF unpacking functions.\\nThe recompiled code is cached using a hash map to prevent unnecessary\\ncode recompilation. Recently, the code was profiled to identify\\npotential bottlenecks. This identified an issue in the hash map lookup\\ncode.\\n\\nEach hash map entry has 16 contiguous bytes, consisting of a 12 byte key\\nthat holds the unpacking parameters and a 4 byte value that contains the\\nrecompiled code address. The hash map key was built with 1/2/4 byte\\nstore operations and was subsequently read back during the hash lookup\\nwith a 16-byte vector read operation. This prevented store to load\\nforwarding, where a load operation can avoid accessing data through\\nmemory and can obtain data from a previous store operation instead, and\\ncaused the CPU to stall unnecessarily since all the store operations had\\nto be completed before the vector readback operation could execute.\\n\\nThe hash map key generation and lookup code was rewritten to enable\\nstore to load forwarding and to improve portability. This provides a\\n2-3X improvement on the hash lookup speed and translates to a small FPS\\nincrease.\\n\\n<PCSX2PRLink authors=\\"volodymyrkutsenko\\" prNums=\\"1835\\">VU0: Fix CFC2 transfers from TPC register</PCSX2PRLink>\\n\\n\\nThe CFC2 instruction is used to transfer 32-bit integer data from the\\nCOP2 control registers to the General Purpose Registers (GPRs) of the\\nEmotion Engine. It was recently noticed that a special behavior occurs\\nwhen the CFC2 instruction transfers data from the TPC register, which\\ncontains the Program Counter (PC) the VU0 micro subroutine was stopped\\nat.\\n\\nThe following code sequence is present in some games,\\n\\n```cpp\\ncfc2 t4, TPC\\nctc2 t4, CMSAR0\\ncallmsr\\n```\\n\\nOn this following sequence of code,\\n\\n-   The CFC2 instruction transfers the TPC data to the t4 register.\\n-   The CTC2 instruction subsequently transfers the data to the CMSAR0\\nregister, which holds the starting address of the VU0 micro\\nsubroutine divided by 8.\\n-   The VCALLMSR instruction then starts the micro subroutine at the\\naddress specified by the CMSAR0 register.\\n\\n\\nThis sequence did not work on PCSX2 because the CMSAR0 register requires\\nan address divided by 8, yet the address transferred from the TPC\\nregister to the CMSAR0 register was not divided by 8. This sequence,\\nhowever, worked perfectly fine on the PS2.\\n\\nApparently, the address that the CFC2 instruction transfers from the TPC\\nregister has already been divided by 8. This was verified with homebrew\\ntests. Accounting for this behavior fixes the graphical glitches in\\n\\"Street Fighter EX 3\\" and \\"R: Racing Evolution\\". We are sincerely sorry\\nfor fixing this long standing bug plaguing Street Fighter EX3, which\\nstarted with [missing skirts](http://forums.pcsx2.net/attachment.php?aid=51971) , developed to\\n[skirts levitating showing panties](https://cloud.githubusercontent.com/assets/7338867/21550619/b0bd2abc-cdd1-11e6-9a36-ee852c0c8226.webp)\\nand concluded in correct emulation\\n\\n<SliderCompare before={require(\\"./img/sfex-before-s.webp\\").default} after={require(\\"./img/sfex-after-s.webp\\").default} />\\n\\n# GSdx\\n\\n<PCSX2PRLink authors=\\"JasonBrownDeveloper,FlatOutPS2\\" prNums=\\"1431\\">GSdx: OSD Manager</PCSX2PRLink>\\n\\nIt may surprise many that for such a comprehensive PS2 emulator we did\\nnot display On-screen Display (OSD) messages relating to information\\nsuch as save/load states or frame-rate information.\\n\\nMaxxus started work in July 2016 maintaining committed all the way to\\nthe final merge of this feature early January working through design\\noptions, fonts, compatibility and stamping out bugs.\\n\\nAs Maxxus is a Linux only user, the OSD did not yet have a UI on\\nWindows. FlatOut later added this along with some minor improvements.\\nAnother consequence of Maxxus not being a Windows user is that the OSD\\nis currently not available for the Direct3D renderers. Only the OpenGL\\nrenderers are supported for now.\\n\\nThe OSD consists of 2 functions, the \\"Log\\" and the \\"Monitor\\". The \\"Log\\",\\nenabled by default, prints the console log messages returned by several\\nkeys(F1-F3 Save States, F4/Tab Framelimiter) on screen. And \\"Monitor\\",\\ndisabled by default, prints the current Framerate and EE/GS/VU\\npercentages on screen. The OSD settings can be configured in the **OSD Configuration** dialog located on\\nthe GSdx plugin settings.\\n\\nHere are some screenshots of the new OSD log and OSD monitor feature in\\naction:\\n\\n<Image cols={6} src={require(\\"./img/KH-OSD2-s.webp\\").default} />\\n<Image cols={6} src={require(\\"./img/OSD_monitor-s.jpg\\").default} />\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"1766\\">GSdx: Texture cache speed optimization</PCSX2PRLink>\\n\\nTextures are stored in the GS memory, which is split into 512 pages. For\\neach memory page, the GSdx texture cache manages a list of addresses of\\ntextures present on the page.\\n\\nTextures may span across multiple pages, which makes efficient list\\nmanagement difficult. When a texture is added to the cache, only the\\nlists of pages affected by the textures must be updated, but when a\\ntexture is removed from the cache, all of the lists may need to be\\nsearched to remove all references to the texture, which can be quite\\nslow.\\n\\nThe texture cache was modified so that the page indices and addresses of\\nlist elements related to a texture are stored with the texture data.\\nAlthough this requires more memory, it also makes it unnecessary to\\nsearch through all the lists to remove all references to the texture\\ndata, which speeds up texture deletion.\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"1741\\">Windows Skylake CPU slow software renderer fix</PCSX2PRLink>\\n\\nAfter switching to using Visual Studio 2015 on the buildbot to compile\\nPCSX2, some Windows Skylake users started reporting significant\\nperformance issues when using the software renderer. Although it was\\ndiagnosed as a threading issue, the issue was left unfixed for a long\\ntime since the cause was unknown and none of the developers could\\nreproduce the issue.\\n\\nIt turns out the performance issue was caused by excessive cacheline\\ncontention. For each worker thread, there were two atomic variables\\npresent on the same cacheline that were shared by both the GS and worker\\nthreads. Both the GS and worker threads would access and modify at least\\none of the variables on this cacheline, which resulted in false sharing\\nand caused terrible performance.\\n\\nThe software renderer threading behavior was improved by removing some\\nunnecessary atomic operations. As a side effect, it eliminated one of\\nthe variables involved in the false sharing and fixed the Windows\\nSkylake CPU issue.\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"1855\\">Software renderer thread synchronization fix</PCSX2PRLink>\\n\\nThe software renderer workload can be divided between multiple threads.\\nThis workload division should not cause rendering issues. However, on\\nthe game **\\"Blood Will Tell\\"**,\\nrandom graphical glitches were present when multiple threads were used,\\nwhich indicated that there was a race condition in the code.\\n\\nFinding out why a race condition occurs can be difficult. The nature of\\nthe bug, however, provided a hint to where the issue laid - it only\\naffected a grayscale post-processing effect, which is a complex channel\\nshuffle effect. Noticing this, Gregory analyzed the related draw calls\\nand discovered that thread synchronization was performed when a frame\\nbuffer was used as a texture, but not the other way round. This led to a\\nrace condition where a draw call could write to a texture before it is\\nread by the previous draw call.\\n\\nThe thread synchronization logic was updated to account for this\\nscenario, which fixed the graphical glitches.\\n\\n<SliderCompare before={require(\\"./img/blood_will_tell_before-s.webp\\").default} after={require(\\"./img/blood_will_tell_after-s.webp\\").default} />\\n\\n<PCSX2PRLink authors=\\"gregory38\\" prNums=\\"1843\\">Improved software renderer float handling</PCSX2PRLink>\\n\\nTwo fixes have recently been made to the software renderer\'s float\\nhandling mechanism, improving its accuracy.\\n\\nThe first fix replaced the reciprocal instructions in the rasterizer\\nwith division instructions. Although a division instruction is much\\nslower than a reciprocal instruction, it also has a much higher\\nprecision, which helps avoid accuracy issues. This fixed the texture\\nsampling issues which were observed in **Xenosaga Episode 1** and **Jak 3**.\\n\\nThe second fix reworked the STQ texture coordinate handling to avoid\\nfloating point underflow/overflow issues. Before the fix, the texture\\ncoordinates were always calculated as (S width (1 / Q), T height (1 /\\nQ)). However, the STQ values are sometimes near/equal to the maximum\\nfloating point value, which could cause zero (1 / Q), infinity (S width,\\nT height), and NaN (0 infinity) to be generated. Now, whenever huge STQ\\nvalues are detected, the code calculates the texture coordinates as\\n((S/Q) width, (T/Q) height), which is slower but avoids the\\nunderflow/overflow issues. This fixed the major texture issues in **Galerians: Ash** and **Let\'s make a J-League Pro Soccer Club \'04**.\\n\\n<SliderCompare before={require(\\"./img/jak3-before-s.webp\\").default} after={require(\\"./img/jak3-after-s.webp\\").default} />\\n<SliderCompare before={require(\\"./img/gash_before_s.jpg\\").default} after={require(\\"./img/gash_after_s.jpg\\").default} />\\n\\n<PCSX2PRLink authors=\\"turtleli\\" prNums=\\"1790\\">GSdx: Removal of SSSE3 and AVX configurations</PCSX2PRLink>\\n\\nThe use of instruction sets available on newer CPUs can significantly\\nboost performance at the cost of compatibility with older CPUs. For this\\nreason, 5 different builds of GSdx (SSE2, SSSE3, SSE4.1, AVX, AVX2) were\\nprovided to maximize performance on newer CPUs, yet retain compatibility\\nwith older CPUs. This, however, confused new users, who didn\'t know what\\nversion of the plugin they should select.\\n\\nThe software renderer JIT was recently updated so that, except for the\\nAVX2 build, it will detect and generate code using instruction sets up\\nto AVX at runtime, depending on what the CPU supports. This change\\nprovided an opportunity to reduce the number of GSdx builds. Since the\\nhardware renderer performance of the SSSE3 and AVX builds were no better\\nthan the SSE2 and SSE4.1 builds respectively, the decision was made to\\ndrop the SSSE3 and AVX builds.\\n\\nThis leaves us with 3 remaining GSdx builds:\\n\\n-   SSE2 - compatible with almost all CPUs.\\n-   SSE4.1 - compatible with most CPUs (requires Intel Penryn / AMD\\nBulldozer or newer). Faster hardware renderer performance.\\n-   AVX2 - least compatible (requires Intel Haswell / AMD Ryzen or\\nnewer). Fastest hardware and software renderer performance.\\n\\n<PCSX2PRLink authors=\\"gregory38\\" shas=\\"26993380b16487649c2ae5f81741e7918ad1604c\\">Blacklist AMD driver</PCSX2PRLink>\\n\\nThe OpenGL renderer uses both separate shader objects and dual source\\nblending. This combination, however, causes rendering issues with AMD\\ndrivers on Windows.\\n\\nEventually a new driver was released by AMD and that fixed the broken\\nrendering. Unfortunately, the driver introduced a new regression which\\ncould cause the system to crash. One of the succeeding drivers managed\\nto fix the crash issue, though however, it introduced the rendering\\nissue back once again.\\n\\nTo avoid having to deal with this, separate shader objects will now be\\ndisabled when the OpenGL renderer is used with a closed source AMD\\ndriver, regardless of the operating system. We\'re hoping future AMD\\ndrivers will be better, but we\'ve been waiting for quite a long time.\\n\\n\\n# LilyPad\\n\\n<PCSX2PRLink authors=\\"FlatOutPS2\\" prNums=\\"1751\\">LilyPad: neGcon controller support</PCSX2PRLink>\\n\\nLilyPad now supports the neGcon analog controller, which can be used for\\nseveral PS1 and even PS2 titles like the Ridge Racer and Ace Combat\\nseries.\\n\\nThe key advantage of supporting this controller is that it allows for\\nanalog controls in PS1 games that were released before the introduction\\nof the DualShock controller, and its analog throttle and brake buttons\\nare ideal for use in combination with a steering wheel controller.\\n\\n<PCSX2PRLink authors=\\"FlatOutPS2\\" prNums=\\"1831\\">LilyPad: UI Changes</PCSX2PRLink>\\n\\nSeveral new options have been added to the LilyPad user interface. The\\nmost notable is the addition of a **Quick Setup** button on the Pad tabs. This button allows for\\nquickly setting up all the default pad buttons one after the other\\nwithout having to click on and assign each button individually. A text\\nbox next to this option has also been added to give visual feedback of\\nthe binding process, showing which button to press and if the binding\\nhas finished.\\n\\nAnother new option is **Exclude Input**. This option allows for deactivating a specific input on your\\ndevice, so that it will be ignored when trying to bind other inputs.\\nThis can be helpful when binding controls for a device with an input\\nthat\'s difficult to center like an accelerator, or just always active\\nlike a faulty button or analog stick.\\n\\nThe **L3 Toggles Turbo** hack,\\nwhich triggered Turbo mode (200% speed) in PCSX2, has been removed. It\\nhas been replaced by a new Turbo button in the Special Inputs section of\\nthe Pad tabs. This new Turbo button still fulfills the same function as\\nthe old Turbo hack, but it can be assigned to any input the user desires\\ninstead of just the L3 button which the hack used.\\n\\nLast but not least is the introduction of a **Restore Defaults** button on the\\ngeneral tab. This option makes it possible to reset all current LilyPad\\nsetings and bindings to those of the default Lilypad settings file\\nwithout having to go to the inis folder and manually removing the\\nfile.\\n\\n<PCSX2PRLink authors=\\"FlatOutPS2\\" prNums=\\"1831\\">LilyPad: Core improvements</PCSX2PRLink>\\n\\nDetection of analog and pressure sensitive controls has been improved.\\nPreviously, some games like Driving Emotion Type-S didn\'t enable analog\\nand/or pressure sensitive mode because a check for analog support only\\nreturned the correct values when the controller was already in analog\\nmode, making the affected games believe only digital controls were\\navailable.\\n\\nThe **Use analog mode if possible** option has been extended to work for PS2 games and PS1 games\\nrunning in PCSX2.\\n\\nAdditionally a warning will now be printed in the PCSX2 console log if\\nno controls are bound to an active device, and when a device has\\nsubsequently been connected or setup.\\n\\nAnd finally a long standing bug that blocked the F4 button (hotkey for\\ndisabling framelimiter) has been traced to LilyPad. A function that\\nchecked if the alt button was being held down did not get reset if the\\nalt button was still being held down while the process lost focus. The\\nissue was usually triggered by using alt-tab to focus on another\\napplication. The bug has now been resolved, which means the F4 button\\nwill no longer suddenly stop working.\\n\\nWe are very happy we had new people contributing once more, with more\\nsubmitting new pull requests these days too! Thanks to all our senior\\nmembers for patiently reviewing and tutoring the new contributors,\\nhelping them understand how PCSX2 works and how to efficiently implement\\ntheir code. As usual, thanks to all the people who worked for this\\nreport, with ssakash taking the lead and newcomer Akasha efficiently\\nhelping getting the job done (the rest of you don\'t flame me for not\\ngetting mentioned)\\n\\nTill next time! (we won\'t be on time)"},{"id":"/2017/qa-picking-our-noes","metadata":{"permalink":"/pcsx2-net-www/blog/2017/qa-picking-our-noes","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2017/qa-picking-our-noes/index.mdx","source":"@site/blog/2017/qa-picking-our-noes/index.mdx","title":"QA Picking Our Noes","description":"Quality & assurance is a full time job and it is a complex topic","date":"2017-02-14T00:00:00.000Z","formattedDate":"February 14, 2017","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":8.34,"hasTruncateMarker":true,"authors":[{"name":"Gregory","url":"https://github.com/gregory38","imageURL":"https://github.com/gregory38.png","key":"gregory"}],"frontMatter":{"authors":["gregory"],"date":"2017-02-14T00:00:00.000Z","description":"Quality & assurance is a full time job and it is a complex topic","draft":false,"tags":["devblog"],"title":"QA Picking Our Noes"},"prevItem":{"title":"Q1 2017 Progress Report","permalink":"/pcsx2-net-www/blog/2017/q1-2017-progress-report"},"nextItem":{"title":"Q4 2016 Progress Report","permalink":"/pcsx2-net-www/blog/2017/q4-2016-progress-report"}},"content":"\x3c!-- truncate --\x3e\\n\\n# Quality Assurance\\n\\nQuality & assurance is a full time\\njob and it is a complex topic. Quality always comes with a trade-off of\\ntime vs cost. By definition, open source projects make a false start\\nhere. Spending $100,000 on a formal analysis tool isn\'t possible.\\nNeither is dedicating the only dev to full-time testing. Fortunately,\\nsome tools are free (even open source) such as Valgrind or Clang-Tidy\\nand some services are free to use, such as Coverity. We currently don\'t\\nhave a high number of committers, but we have lots of dedicated testers\\nand users.Big thanks to all of them, because without them nothing would\\nhave been possible. So quality is possible. Maybe we can\'t reach the\\n100% perfect quality state but we can reach a decent level.\\n\\n\\nThe project took various actions in order to improve the quality and\\nrobustness of PCSX2. Some actions started a long time ago, most of them\\nare still on-going, some are still planned. You won\'t find any\\nground-breaking methodology here. Nevertheless, I wanted to do a summary\\nof what is going on.\\n\\n# Continuous Integration\\n\\nThe first step of QA is called\\nContinuous Integration. The goal is to ensure correctness of the project\\nat every commit done. That\'s easy to say but quite hard to do.\\n\\n- Most of you know about\\nthe PCSX2 buildbot. It provides compiled snapshots regularly. It allows\\ntesters and users to play with the latest features. It also gives them\\nthe opportunity to report regressions much sooner in the development.\\nTherefore, we can fix them better. Regressions are the highest priority\\nbug reports for me.\\n\\n- The migration to Github\\nallowed us to add additional bots to ensure compilation works fine with\\nvarious compilers. PCSX2\'s buildbot is limited to a single version of\\nthe Microsoft compiler. Appveyor & Travis allow us to test multiple\\nversions of Visual Studio (VS2013 & VS2015) but also clang/gcc. We even\\nhave a 64 bits compilation test validation.\\n\\n- The buildbot is limited to\\nWindows, therefore a daily PPA build was added too.\\n\\n## Compiler\\n\\nThe 2nd step of QA is compiler support. The compiler is the first tool\\nof any developer. Of course, compilation errors are bad, but compilers\\ncan also report constructs that are prone to errors. These are called\\ncompiler warnings. Often there are false positives, the code is correct\\nand behaves as expected but the compiler still reports it as dangerous.\\nYou could say \\"It\'s not a big deal.\\", but when you have thousands of\\nfalse positives, you don\'t see the bad warnings anymore. So the goal is\\nto have 0 warnings for all compilers. Note that some warnings were\\ndisabled because they report too many false positives. But they are a\\nconscious exception and additional work has been done to re-enable them\\nwhen possible.\\n\\n\\\\* GCC warning counts are rather low (less than 20) but not 0 yet. And\\nwe even enabled most of the extra warnings.\\n\\\\* Clang reports lots of warnings because I asked clang to report some\\nold code that I marked as deprecated. Otherwise we\'d be around 50. I\'m\\nsure we can do better here too.\\n\\nGlobal status is rather good but not yet perfect. GCC used to have 500+\\nwarnings with less warnings enabled. Clang used to be unable to compile\\nthe code. The road was quite long but we started to see the light\\n\\n## Formal/Lint Tool\\n\\n\\nCompilers are nice at reporting\\nvarious problems but it isn\'t their main job. So dedicated tools were\\ncreated with the single objective of finding all your bugs. In reality\\nit is closer to \\"some bugs\\" but less bugs is always nice and good for\\ne-reputation of a project. I decided to integrate those tools with the\\nLinux build.sh script. This way, you can easily run them. If you want a\\nreport, I will gladly send it to you.\\n\\n## Cppcheck\\n\\nCppcheck is an open-source lint tool to check code quality. For the\\n1.2/1.4 release we tried to fix the big errors. So far it reports 838\\nwarnings. The number is quite high but warnings are very minor\\n(micro-optimization and style). It would require some analysis/fixes to\\nimprove the situation. I guess some minor style warning could be\\nfiltered.\\n\\n## Coverity\\n\\nCoverity is an expensive lint tool to ensure code robustness. It is very\\nnice of Synopsys to allow open source projects to use it for free.\\nCoverity is based on a compiler back-end so it tries harder than\\nCppcheck to find issues. Coverity found a couple of nasty ones but also\\nvarious false positives. We\'re currently around 70 issue reports. I\'m\\nnot sure we will be able to fix all the reports but we can target a goal\\nof nearly 0 Coverity issues.\\n\\n## Clang-tidy\\n\\nClang-tidy is an open-source lint tool based on the Clang/LLVM compiler.\\nIt is based on rule checks from the Clang / C++ core guidelines and C++\\nISO certification. The tool reports a massive number of warnings,\\ncurrently 49000+ !!!\\n\\nI can hear you yelling \\"This is insane, PCSX2 code must suck so bad\\".\\nBut when you look at the report, the huge number comes from C/C++\\nconstructs that are sane but not safe. There is a strong bias on\\nrobustness/pure C++, rather than performance/C. For example, every time\\nyou access an array, you must check the array boundary. For sure, this\\nis robust but it is also slow. I\'m not sure we want this kind of\\nrobustness in performance critical code. That being said, all cold paths\\n(i.e. code that doesn\'t impact performance) would be better with safer\\ncode. Another recommendation is to use Boost classes. Boost is a nice\\nbeast but it is a mammoth. The full include on my system is 155MB ! I\\nthink we will wait until the interesting bits are included in the C++\\nlibrary. A lot of warnings remain to be fixed but we are now far from\\nthe 49K number.\\n\\nFor the record, here is the current summary report on the latest master.\\nYou can google the rule name to find what the exact issue is.\\n\\n```cpp\\ncert (665)\\ncert-dcl50-cpp => 85\\ncert-err52-cpp => 3\\ncert-err58-cpp => 360\\ncert-err60-cpp => 148\\ncert-err61-cpp => 69\\n\\nclang (496)\\nclang-diagnostic-deprecated-declarations => 475\\nclang-diagnostic-missing-braces => 2\\nclang-diagnostic-shift-negative-value => 3\\nclang-diagnostic-sign-compare => 4\\nclang-diagnostic-unused-const-variable => 10\\nclang-diagnostic-unused-variable => 2\\n\\ncppcoreguidelines (33701)\\ncppcoreguidelines-pro-bounds-array-to-pointer-decay => 2883\\ncppcoreguidelines-pro-bounds-constant-array-index => 7697\\ncppcoreguidelines-pro-bounds-pointer-arithmetic => 3763\\ncppcoreguidelines-pro-type-const-cast => 66\\ncppcoreguidelines-pro-type-cstyle-cast => 3478\\ncppcoreguidelines-pro-type-reinterpret-cast => 42\\ncppcoreguidelines-pro-type-static-cast-downcast => 83\\ncppcoreguidelines-pro-type-union-access => 12405\\ncppcoreguidelines-pro-type-vararg => 3284\\n\\nmisc (905)\\nmisc-macro-parentheses => 157\\nmisc-throw-by-value-catch-by-reference => 18\\nmisc-unused-alias-decls => 1\\nmisc-unused-parameters => 729\\n\\nmodernize (2527)\\nmodernize-loop-convert => 146\\nmodernize-make-unique => 20\\nmodernize-pass-by-value => 6\\nmodernize-redundant-void-arg => 35\\nmodernize-use-auto => 127\\nmodernize-use-default => 107\\nmodernize-use-nullptr => 1824\\nmodernize-use-override => 262\\n\\nreadability (10996)\\nreadability-braces-around-statements => 6739\\nreadability-else-after-return => 124\\nreadability-function-size => 1\\nreadability-implicit-bool-cast => 3760\\nreadability-inconsistent-declaration-parameter-name => 326\\nreadability-named-parameter => 36\\nreadability-simplify-boolean-expr => 10\\n```\\n\\nTo conclude this section, lint tools are quite powerful. They can find\\nbugs that will take days of tests. But they\'re also dull as they reports\\ntons of false positives. Therefore it is required to filter the results.\\nIt is clearly not feasible nor desirable to reach a 0 warnings target.\\nHowever we can target a better and saner status.\\n\\n# Dynamic Tools\\n\\nFormal tools can\'t find all classes of bugs. Luckily for me, Linux comes\\nwith 2 additional tools to ensure correct behavior at run time.\\n\\n## Valgrind\\n\\nValgrind is a virtual machine or a X86 CPU emulator. So yes, we are\\nrunning an emulator inside an emulator\\n\\nThe interesting stuff with virtual machines is that they can see all\\nmemory accesses. It comes with a cost, it is damn slow. Another drawback\\nis that Valgrind doesn\'t support all SIMD instruction such as AVX.\\nRunning the tool allows you to detect memory leaks (ouch), memory\\noverflows (ouch, ouch), code execution that depends on uninitialized\\nvalues (ouch, ouch, ouch). Quite a nice tool; You even find bugs in 3rd\\nparty libraries/drivers...\\n\\n## Address sanitizer\\n\\nValgrind is very powerful but too slow. The address sanitizer is a much\\nfaster alternative but less powerful. The code will be instrumented\\nduring the compilation. So every time you do a memory access, a small\\ncheck is done. The main goal is to ensure the correctness of the memory\\naccess, a big source of crashes and security flaws of all programs. It\\ngreatly helps us to find wrong stack management on the recompiler.\\n\\nDynamic tools can greatly help to detect very bad stuff. Unlike formal\\ntools that give you a status in 2 minutes, you need to actually run the\\nprogram and play some games. So it is time consuming.\\n\\n# Code Formatting\\n\\nLast but not least, code formatting. The project is a mix of various\\nplugins of various developers with various coding styles. It became even\\nworse recently. We spend too much time in external contributions,\\nreviewing the formatting rather than the real patch improvement.\\n\\nAs we said, desperate times call for desperate measures. So I decided\\nthat we will automatically format the code with the help of the\\nclang-format tool. The tool isn\'t perfect unlike us, Humans\\n\\nBut it will give us a much nicer consistency.\\n\\nContributing will be easier as you don\'t need to learn the current\\ncoding style of the current file. I hope to provide a git hook on Linux\\nto automatically format the code before the commit. Reviewing will be\\nfaster as the syntax will be automatically checked by the build bot.\\nThis way we could concentrate on the meat. So far a couple of plugins\\nwere converted to the new syntax. The remaining code will be converted\\nstep by step in order to avoid conflicts with current Pull Requests.\\n\\n# Conclusion\\n\\nTo conclude this blog post, we have plenty of tools and methods to\\nimprove the projects quality. We\'ve worked on it for a long time and\\nslowly it\'s getting better and better. In the end, QA is like ageing\\nwine, it\'s a slow process that requires time."},{"id":"/2017/q4-2016-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2017/q4-2016-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2017/q4-2016-progress-report/index.mdx","source":"@site/blog/2017/q4-2016-progress-report/index.mdx","title":"Q4 2016 Progress Report","description":"Finally the Q4 2016 progress report!","date":"2017-02-02T00:00:00.000Z","formattedDate":"February 2, 2017","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":9.055,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2017-02-02T00:00:00.000Z","description":"Finally the Q4 2016 progress report!","draft":false,"tags":["progress-report"],"title":"Q4 2016 Progress Report"},"prevItem":{"title":"QA Picking Our Noes","permalink":"/pcsx2-net-www/blog/2017/qa-picking-our-noes"},"nextItem":{"title":"Happy New Year From The PCSX2 Team","permalink":"/pcsx2-net-www/blog/2017/happy-new-year-from-the-pcsx2-team"}},"content":"Finally the Q4 2016 progress report! Yes we know it\'s a bit late but you\\nwill find it was worth the wait! On to the changes:\\n\\n\x3c!-- truncate --\x3e\\n\\n![](./img/progress-rep-q4-2016.jpg)\\n\\n## cdvdgigaherz: Linux port\\n- by [turtleli](https://github.com/turtleli)\\n\\ncdvdGigaherz was originally a Windows only CD/DVD disk reading plugin.\\nHowever, by using portable code to replace as much of the Windows\\nspecific code as possible and adding a Linux disk reading backend and\\nGUI, cdvdGigaherz now works on Linux.\\n\\n## PSX mode compatibility\\n- by [Rama](https://github.com/ramapcsx2) and [Pseudonym](https://github.com/sudonim1)\\n\\nPreviously, PCSX2 had always failed to play PSX games due to\\nunimplemented devices that are necessary for backward compatibility.\\n**Rama** had then decided to reach\\nout to other developers to fix the problem. He found someone on the\\nassemblergames.com forums that just so happened to be an expert on PS2\'s\\nIOP sub bus hardware: **wisi**!\\nWisi implemented the missing PGIF device, added the required hardware\\nhooks and with that PCSX2 was finally able to boot into PSX mode!\\n\\nHowever, most of the PSX games still suffered from bad audio and the\\nsource of the issue was the SPU2 plugin. It was assumed that in the\\nbackward compatibility mode of the SPU2, the hardware provides a mapping\\nwindow into SPU2 RAM, which wasn\'t properly handled by the plugin. **Pseudonym** then fixed all the issues\\nrelated to the mapping management and SPU2-X started providing much\\nbetter results. At this time, he also redid the reverb algorithm (which\\nis shared between PSX and PS2 modes) and improved it significantly\\ntowards an exact replica of the original. The following waveform\\ncomparison shows that there are still some unsolved problems with the\\npulse response, but the delay and feedback are spot on! It sounds much\\nbetter than the older implementation and benefits PSX and PS2 games\\nalike.\\n\\n<Image cols={6} src={require(\\"./img/spu2x-reverb-s.jpg\\").default} />\\n\\nHere are some screenshots of Tekken 3, Ridge Racer and Driver running\\nunder PCSX2\'s brand new PSX mode:\\n\\n<Image cols={6} src={require(\\"./img/tekken3-ps1-s.jpg\\").default} />\\n<Image cols={6} src={require(\\"./img/driver-ps1-s.jpg\\").default} />\\n<Image cols={6} src={require(\\"./img/ridgeracer-ps1-s.jpg\\").default} />\\n\\n**Note**:\\n\\n-   PSX backward compatibility is still in its nascent state, so bug\\nreports related to it will be dismissed, until the emulation has\\nmatured enough.\\n-   Also quite interesting: None of the PSX emulators used for\\ncomparison produces reverb waveforms that look anything like the\\noriginal hardware!\\n\\n\\n\\n## PSX mode: Proper video mode initialization\\n- by [ssakash](https://github.com/ssakash)\\n\\nPCSX2 initializes the video modes based on the parameters of the **SetGsCrt()** function call, however,\\nonly PS2 games made use of this SYSCALL and PSX games didn\'t, this left\\nall the PSX games in an uninitialized video mode state making them\\nsusceptible to various timing issues.\\n\\n**ssakash** fixed this issue by\\ninitializing the video mode based on the color subcarrier frequency\\n(CMOD) when the video mode is at an uninitialized state, this change\\nfinally made PAL PSX games to output at their proper vertical\\nfrequency.\\n\\n## LilyPad: Add separate bindings for each pad type\\n- by [FlatOut](https://github.com/FlatOutPS2)\\n\\nBefore this update, all pad types (DualShock 2, Guitar, Pop\'n Music\\ncontroller) shared the same button configuration. But your ideal setup\\nfor the DualShock 2 might not be the same as your preferred Guitar\\nsetup, so you had to change the button configuration or load another\\nLilyPad configuration each time you wanted to play a game with the one\\nof the other pad types. This has now been resolved by giving each of the\\npad types their own individual configuration.\\n\\n## LilyPad: Add PlayStation Mouse support\\n- by [FlatOut](https://github.com/FlatOutPS2)\\n\\nThe PlayStation Mouse has been added as a new pad type. This mouse can\\nbe used on a number of PS1 titles such as Myst and Sim City 2000. There\\nare no known PS2 titles that support it, but thanks to PCSX2\'s new PSX\\nbackward compatibility, you can now use it with PCSX2.\\n\\n## LilyPad: Updated user interface\\n- by [FlatOut](https://github.com/FlatOutPS2)\\n\\nThe LilyPad user interface has been updated by removing some of the\\nbuttons below the diagnostics and input bindings lists and incorporating\\nthose into the corresponding list as right-click options. The\\nfunctionality is also still available by keyboard input. The input\\nconfigurations on the Pad tabs have been moved to a separate page - like\\nthe force feedback configuration - to clearly separate the configuration\\noptions from the available bindings.\\n\\nAdditionally, several informational tooltips have been added to better\\nexplain how the LilyPad options work, which should help setting up\\nLilyPad just the way you want it.\\n\\nThree new options have been added to the Pad tabs. A device select\\noption that hides bindings and disables binding new inputs from all\\nnon-selected devices on the bindings list. This also avoids input\\nconflict issues when one controller is recognized as several devices\\nthrough different APIs.\\n\\nA skip deadzone option has been added to the input configuration page.\\nWith the normal dead zone, if the control input value is below the given\\nthreshold value, the input is just ignored. However, some controllers\\nbenefit from shortening the input range by skipping a deadzone. This\\nallows most of the movement of the input to be used and it will require\\nless movement before your input is picked up by a game.\\n\\nThe third new option is a \\"configure on bind\\" checkbox. With this\\nenabled you\'ll be sent straight to the input configuration for each\\ninput you bind.\\n\\n<ImageCompare left={require(\\"./img/lilypad-before-s.jpg\\").default} right={require(\\"./img/lilypad-after-s.jpg\\").default} />\\n\\n## GSdx: Hardware mipmapping support\\n- by [Gregory](https://github.com/gregory38)\\n\\nPreviously, all the hardware renderers suffered from mipmapping issues\\ndue to various unimplemented functions. For example, whenever mipmapping\\nis performed, it is necessary to set the base pointer address and the\\nbuffer width of the textures of two (or) more mimpap levels, even this\\nbasic function was not emulated before as there wasn\'t much priority on\\ngetting mipmapping to work on hardware renderers.\\n\\nThe main reasons were that only some few games (around 10-30) had\\nmipmapping related issues which is quite a small amount of games in\\ncomparison to the whole PS2 library and there was also a possibility\\nthat mipmapping could influence the performance negatively, so none of\\nthe developers were planning on tackling it, as at that time, there were\\nfar more severe bugs related to the CLUT, Texture cache, display\\nrectangle setup and Z buffer which were more prioritized.\\n\\nMost of the end users didn\'t really understand our priorities and there\\nwere lots of negative posts related to not implementing hardware\\nmipmapping and it grew out of control as we kept releasing our progress\\nreports. There were even some rumours spreading that hardware mipmapping\\nis impossible without a rewrite of texture cache. To shut them all up,\\n**Gregory** took all the responsibility in his hands and finally added\\nsupport for hardware mipmapping!\\n\\n<SliderCompare before={require(\\"./img/ratchet-before1-s.jpg\\").default} after={require(\\"./img/ratchet-after1-s.jpg\\").default} />\\n<SliderCompare before={require(\\"./img/ratchet-before2-s.jpg\\").default} after={require(\\"./img/ratchet-after2-s.jpg\\").default} />\\n<SliderCompare before={require(\\"./img/ace-before-s.jpg\\").default} after={require(\\"./img/ace-after-s.jpg\\").default} />\\n\\nNote:** The current implementation of hardware mipmapping isn\'t totally\\naccurate, the current implementation replaces the pointer of the base\\nlayer with the LOD min layer, assuming that it contains valid data.\\nWhile the current hardware mipmapping implementation isn\'t really ideal,\\nit fixes issues with most of the games (Ratchet & Clank, Ace Combat,\\nLegacy of Kain) even with increase in performance in certain\\nscenarios!\\n\\nUnfortunately, there are still a few games requiring full mipmapping\\nsupport which will be quite hard to tackle without compromising on\\nperformance.\\n\\n## GSdx-TextureCache: Proper scaling of all textures\\n- by [Gregory](https://github.com/gregory38) and [ssakash](https://github.com/ssakash)\\n\\nOn games like Devil May Cry, a few textures weren\'t being scaled\\nproperly, which lead to graphical glitches on the upper left part of the\\nscreen at upscaled resolutions. Eventually we had found out that in\\ncertain rare cases when the Texture-cache target was created, the\\nscaling of the textures was omitted.\\n\\n**Gregory** fixed the issue by\\nproperly scaling the textures at such cases with respect to the integral\\nscaling value, **ssakash** later\\ngeneralized the scaling equation to also make it work on custom\\nresolutions.\\n\\n<SliderCompare before={require(\\"./img/dmc-before-s.jpg\\").default} after={require(\\"./img/dmc-after-s.jpg\\").default} />\\n\\n## GSdx: Handling illegal 8 bits pixel storage format\\n- by [Gregory](https://github.com/gregory38)\\n\\nThe Graphics Synthesizer supports 3 different color formats for the\\nframe buffer,\\n\\n-   32 bits (RGBA8): 3 color channels of 8 bits + 1 alpha channel of 8\\nbits. **(PSMCT32)**\\n-   24 bits (RGB8): 3 color channels of 8 bits. **(PSMCT24)**\\n-   16 bits (RGB5A1): 3 color channels of 5 bits + alpha channel of 1\\nbit. **(PSMCT16, PSMCT16S)**\\n\\n\\nHowever, some games seem to use an illegal format at the FRAME register,\\na format known as **PSMT8H**. The\\nvalid and sane hypothesis was that the core is sending some garbage\\nvalues to GSdx, so skipping the draw call might fix it. However, that\\nwasn\'t the case. A developer was indeed crazy enough to send such an\\ninsane value!\\n\\n**Gregory** had [resolved the\\nissue](https://github.com/PCSX2/pcsx2/commit/9b93c073390de7c5f88e944bc9d26f9cf17ba9ee)\\nby replacing the illegal format with a valid 32 bit format and channel\\nmasking in the FBMSK bitfield of FRAME register.\\n\\n<SliderCompare before={require(\\"./img/berserk-before-s.jpg\\").default} after={require(\\"./img/berserk-after-s.jpg\\").default} />\\n\\n\\n## GSdx-PCRTC: Feedback write support\\n- by [Gregory](https://github.com/gregory38)\\n\\nThe graphics synthesizer contains a dedicated hardware to handle the\\npresentation of the framebuffer to the output circuit, the hardware can\\nmerge two contexts of framebuffer together based on various parameters,\\nhowever there\'s also an alternative way to write back data in the frame\\nbuffer.\\n\\nUsing the feedback write circuit, we can write a specific rectangular\\narea in the output image to an arbitrary position in a local buffer at\\nan arbitrary sampling rate dependent on the status of feedback write\\nsetting registers. The data can be a raw copy, but **RGB->YCbCr** conversions could also\\nbe requested based on the feedback write setting.\\n\\n**Gregory** has now implemented feedback write support on the OpenGL\\nhardware and software renderer which fixes issues with various games\\nalong with the infamous Xenosaga I dream scenes which make use of\\nfeedback write circuit, the DirectX port for the fix is yet to be done\\nas there aren\'t really any active DX developers on our team at the\\nmoment.\\n\\n<SliderCompare before={require(\\"./img/xenosaga-before-s.jpg\\").default} after={require(\\"./img/xenosaga-after-s.jpg\\").default} />\\n\\n**Xenosaga makes use of the feedback write mechanism to convert the color to a luminance greyscale.**\\n\\nAnd that was it for this quarter\'s progress report! There were several\\nother changes that haven\'t made it in this report since as you can see\\nit\'s already pretty huge, but we believe we covered everything important\\nfor our users.\\n\\nWe could use some extra help preparing and writing these reports, so if\\nanyone is interested, has time and is up to the task please inform us by\\nposting [HERE](http://forums.pcsx2.net/Thread-Q4-2016-progress-report) in our forum.\\n\\nAs always, check out our progress over the [Github repository](https://github.com/PCSX2/pcsx2), help us by [reporting issues](http://forums.pcsx2.net/Forum-Bug-reporting) or by [sending pull requests](https://github.com/PCSX2/pcsx2/pulls), even if your code still needs work. Our coders and contributors will be more than happy to help you help us with your changes, improvements and bug fixes to our code!\\n\\nAs usual a big thank you to all people who contributed to this report,\\nbug squad members and coders alike you know who you are!\\nTill next time, keep playing."},{"id":"/2017/happy-new-year-from-the-pcsx2-team","metadata":{"permalink":"/pcsx2-net-www/blog/2017/happy-new-year-from-the-pcsx2-team","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2017/happy-new-year-from-the-pcsx2-team/index.mdx","source":"@site/blog/2017/happy-new-year-from-the-pcsx2-team/index.mdx","title":"Happy New Year From The PCSX2 Team","description":"The PCSX2 development and tester team wishes you a happy new emulation year","date":"2017-01-02T00:00:00.000Z","formattedDate":"January 2, 2017","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.22,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2017-01-02T00:00:00.000Z","description":"The PCSX2 development and tester team wishes you a happy new emulation year","draft":false,"tags":["devblog"],"title":"Happy New Year From The PCSX2 Team"},"prevItem":{"title":"Q4 2016 Progress Report","permalink":"/pcsx2-net-www/blog/2017/q4-2016-progress-report"},"nextItem":{"title":"Alpha Testing Gs World","permalink":"/pcsx2-net-www/blog/2016/alpha-testing-gs-world"}},"content":"The PCSX2 development and tester team wishes you a happy new emulation\\nyear, with new rigs and less PCSX2 bugs! We are a bit late to the party\\nbut we were *hic* busy...coding \ud83d\ude1b\\n\\n\x3c!-- truncate --\x3e\\n\\nP.S. Progress report won\'t be long \ud83d\ude09"},{"id":"/2016/alpha-testing-gs-world","metadata":{"permalink":"/pcsx2-net-www/blog/2016/alpha-testing-gs-world","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2016/alpha-testing-gs-world/index.mdx","source":"@site/blog/2016/alpha-testing-gs-world/index.mdx","title":"Alpha Testing Gs World","description":"Today, we will discuss the alpha testing feature of the GS","date":"2016-09-25T00:00:00.000Z","formattedDate":"September 25, 2016","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":6.39,"hasTruncateMarker":true,"authors":[{"name":"Gregory","url":"https://github.com/gregory38","imageURL":"https://github.com/gregory38.png","key":"gregory"}],"frontMatter":{"authors":["gregory"],"date":"2016-09-25T00:00:00.000Z","description":"Today, we will discuss the alpha testing feature of the GS","draft":false,"tags":["devblog"],"title":"Alpha Testing Gs World"},"prevItem":{"title":"Happy New Year From The PCSX2 Team","permalink":"/pcsx2-net-www/blog/2017/happy-new-year-from-the-pcsx2-team"},"nextItem":{"title":"Q3 2016 Progress Report","permalink":"/pcsx2-net-www/blog/2016/q3-2016-progress-report"}},"content":"Today, we will discuss the alpha testing feature of the GS. The feature\\nis very basic but awful to emulate. Yet again, GS capability is 10 miles\\nahead of current GPUs.\\n\\n\x3c!-- truncate --\x3e\\n\\nLet\'s first look at the graphics pipeline to understand what alpha\\ntesting is. The main purpose of the graphic rendering pipeline is to\\ncompute thecolor of a pixel. But the color isn\'t enough if you want to\\nrender a 3D scene. Standard renderers use a Z-buffer, also called a\\ndepth buffer. They are based on a pixel test (note: they ought to be\\ncalled fragment tests). It is really easy; If the test fails (pixel is\\nrendered behind the current one), you discard the color depth value. If\\nthe test passes (pixel is rendered above the current one), you update\\nboth, color and depth values.\\n\\n\\nIn order to allow special effects, extra pixel tests were added to the\\ngraphic pipeline, alpha testing is one of them. This time, instead of\\ntesting the value of the Z buffer, it will test the value of the alpha\\nchannel (aka transparency) of the fragment.\\n\\nNewer GPUs don\'t havea hardware unit to implement this feature anymore.\\nBut it can be easily implemented in the fragment shader. Not a big\\ndeal.\\n\\nHere is an example of GLSL code:\\n\\n```cpp\\nif (fragment.alpha > alpha_reference)\\ndiscard;\\n```\\n\\nEverything is fine but there is a subtlety; On the GS you can only\\ndiscard either the color OR the depth. Whereas modern GPUs will discard\\nboth, color AND depth. Argh...\\n\\nGabest implemented a 2 pass shader to handle it. First pass will only\\nprocess the pixel that passes the alpha test and update both color and\\ndepth. That\'s easy, no complex discarding. The second pass will process\\nthe pixel that failed the alpha test. The color (or depth) write will be\\nmasked and only the depth (or color) will be kept. In other words, you\\nneed to split in 2 fragments that are partially discarded.\\n\\nIt works fine (except for the performance impact of using 2 draw calls\\nto handle a single draw) for most games. However some games don\'t like\\nit, such as Burnout or Gran Theft Auto.\\n\\nNote: the example below is a special case of alpha testing. Alpha\\ntesting can be configured in multiple ways on the GS. You can control\\nthe alpha test operation but also the part that will be discarded.\\n\\n## The nightmare\\n\\nSo what happens is that the above reasoning of the 2 pass shader seems\\ncorrect but it is based on the assumption that color and depth pixel\\noperations are commutative. For example, a good case is a blending\\naddition: Color Final = Color Source + Color Destination. You can\\nprocess pixels in any order. However the reverse subtraction (Cd - Cs)\\nblending isn\'t commutative.\\nLet\'s take an example.\\nColor initial = 0\\nColor fragment1 = 30\\nColor fragment2 = 100\\n\\nAddition C1 then C2 =&gt; Color Final = C2 + (C1 + C0) = 100 + (30 + 0)\\n= 130\\nAddition C2 then C1 =&gt; Color Final = C1 + (C2 + C0 )= 30 + (100 + 0)\\n= 130\\n\\nR-Subtraction C1 then C2 =&gt; Color Final = C2 - (C1 - C0) = 100 - (30\\n- 0) = 100 - 30 = 70\\nR-Subtraction C2 then C1 =&gt; Color Final = C1 - (C2 - C0 )= 30 - (100\\n- 0) = 30 - 100 = -70 (which will be clamped to 0)\\n\\nNow that blending is explained, we can go back to the Burnout / GTA\\ngames. Bingo, those games use operations that aren\'t commutative. So the\\nprevious 2 pass shader doesn\'t work.\\n\\nSome info on the Burnout bad draw call\\n\\\\* Depth test: greater or equal\\n\\\\* Alpha test: discard depth if alpha greater than AREF\\n\\\\* Blending equation: C = Alpha Src \\\\* Color Src + (1 - Alpha Src) \\\\*\\nAlpha Destination\\n\\nScreenshots (of the game Kengo, but it is the same) can be found at the end of the blog\\n\\n## A solution\\n\\nColor isn\'t commutative. Neither is Depth... Too bad. Looking further in\\nthe primitive in that draw call, I noticed that the Z value is constant\\nat 0xFF\\\\_FFFF. It is the maximum value of the 24 bits depth buffer. In\\nother words, depth tests are always passing as it will always be greater\\nor equal than the current value. So the depth test could be replaced by\\nalways true. As a bonus, it allows a small micro optimization of the GPU\\nwork. However, it is interesting to note that the depth test operation\\nis now commutative and can be executed in any order.\\n\\nNow let\'s look further to the alpha test, only the depth value depends\\non the alpha test results. Colors will always be computed as the depth\\ntest will always pass. So we can implement a new way to emulate the\\nalpha testing. As previously mentioned, the goal is to avoid partial\\ndiscards.\\n\\nFirst pass will process all the colors with associated blending. Second\\npass will process the depth value. First pass doesn\'t depend on the\\nalpha valueanymore so it is easy to emulate. Second pass will mask all\\ncolor writes. Depth writes will be discarded when the alpha test fails.\\nAs you can see, you don\'t have any partial discards anymore. The result\\nis accurate because it doesn\'t depend on the depth test anymore, due to\\nthe previous optimization.\\n\\n## Looking further\\n\\nDebugging the trace log further, I found another opportunity to optimize\\nthe alpha test. Alpha tests are free on the GS, so I suspect some game\\ndesigners forgot to disable it even if it is useless. Sometimes alpha\\ntesting is enabled but there isn\'t any depth buffer to use it with. In\\nthis case alpha testing is useless because all depth writes are already\\ndisabled. So we have another opportunity for a new micro optimization.\\nWe\'ll do a normal rendering in 1 pass with a lighter shader when alpha\\ntesting is useless. It is really a minor optimization but it comes free.\\nWe all like it when it is free\\n\\nLooking even further, it would be possible to rely on some undefined\\nbehavior of openGL to implement partial discards. For example, we can\\nforce the depth write before the execution of the fragment so a discard\\nwill keep the depth. It won\'t help here but it could help for other\\nalpha test issues. More tricks will be possible with future hardware,\\nhowever I don\'t know the performance impact.\\n\\n## The conclusion\\n\\nTo conclude, alpha test emulation isn\'t nice on current GPUs. It\\nrequires multiple shader passes, which impact performance. And worst of\\nall, it isn\'t accurate. Let\'s be honest, the new improvement barely\\nsolves any issues. But it is better than nothing. It fixes the text\\nrendering in some games without any speed impact. And the extra\\noptimization will reduce the GPU workload on some draw calls. It\'s rare\\nfor us to be more accurate and faster simultaneously. Now you can enjoy\\nbeautiful text rendering in God of War, Grand Theft Auto, Kengo,\\nBurnout, Stuntman, HSG4 and hopefully more.\\n\\n## Some screenshots of the alpha test issue\\n\\n\\nHere is an example of the rendering of letters.\\n\\n\\\\* The alpha channel rendering of the old code after the 1st pass\\n![](./img/this_first_pass_alpha.webp)\\n\\n\\\\* The alpha channel rendering of the old code after the 2nd pass (yeah\\nawful)\\n![](./img/this_2nd_pass_alpha.webp)\\n\\n\\\\* Now the color channel after the 2nd pass (notice the various holes\\ndue to wrong alpha blending)\\n![](./img/this_color.webp)\\n\\n\\\\* Finally the alpha & color channel of the new code (alpha is much\\nnicer and the letters as well)\\n![](./img/this_good.webp)\\n![](./img/this_color_good.webp)"},{"id":"/2016/q3-2016-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2016/q3-2016-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2016/q3-2016-progress-report/index.mdx","source":"@site/blog/2016/q3-2016-progress-report/index.mdx","title":"Q3 2016 Progress Report","description":"Hello and welcome to the glorious, fabulous, amazing PCSX2 progress report for Q3 2016","date":"2016-09-14T00:00:00.000Z","formattedDate":"September 14, 2016","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":8.09,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2016-09-14T00:00:00.000Z","description":"Hello and welcome to the glorious, fabulous, amazing PCSX2 progress report for Q3 2016","draft":false,"tags":["progress-report"],"title":"Q3 2016 Progress Report"},"prevItem":{"title":"Alpha Testing Gs World","permalink":"/pcsx2-net-www/blog/2016/alpha-testing-gs-world"},"nextItem":{"title":"Channel Shuffle Effect","permalink":"/pcsx2-net-www/blog/2016/channel-shuffle-effect"}},"content":"\x3c!-- truncate --\x3e\\n\\n![](./img/progress-rep-q3-2016.jpg)\\n\\n------------------------------------------------------------------------\\n\\nHello and welcome to the glorious, fabulous, amazing PCSX2 progress\\nreport for Q3 2016! Most of the changes for this quarter are more\\ntechnical than usual so I apologize in advance for some of the\\nexplanations. With that out of the way lets jump right into it!\\n\\n## PCSX2: FreeBSD support\\n- by [turtleli](https://github.com/turtleli)\\n\\nA lot of platform specific code was converted to portable code and as a\\nresult you can now use PCSX2 on FreeBSD!\\n\\n## Linux: Support Vsync on Linux free driver\\n- by [Gregory](https://github.com/gregory38)\\n\\nOpenGL allows controlling Vsync from the application. Strangely there\\nisn\'t a standard extension for all platforms. Most drivers (aka\\nproprietary) use the extension GLX\\\\_SWAP\\\\_INTERVAL\\\\_EXT. However the\\nLinux Free driver (aka Mesa) uses the extension\\nGLX\\\\_SWAP\\\\_INTERVAL\\\\_MESA. PCSX2 now supports the latter as well so you\\ncan set Vsync from within PCSX2 when using Mesa.\\n\\n## Linux: Optimize number of active constant buffers in the shader\\n- by [Gregory](https://github.com/gregory38)\\n\\nThe main advantage of open source GPU drivers is that you can access the\\nsource code. Because of this Gregory took the opportunity to profile\\nMesa. He noticed a high number of validations of the GPU constant\\nbuffers. Previously the GSdx GLSL code declared all constant buffers\\neven if they were unused. This is quite bad for performance as the\\ndriver will validate them anyway. The code was rewritten to define only\\nuseful buffers and this gained 1-2 fps on the free driver.\\n\\n## Windows: No need to install DirectX redistributables on Windows 8.1 and 10\\n- by [turtleli](https://github.com/turtleli)\\n\\nFor a long time it has been necessary for the DirectX redistributables\\nto be installed for PCSX2 to work. However, by moving to a newer Windows\\nSDK which isn\'t XP compatible and adjusting the code to load libraries\\nthat are already present on these operating systems, the need for the\\nDirectX redistributables to be installed on Windows 8.1 and Windows 10\\nhas been eliminated. (Caveat: SCP Xinput Wrapper users that need\\npressure sensitivity will still require the DirectX redists to be\\ninstalled since the XInput wrapper wraps around XInput 1.3 and not\\nXInput 1.4)\\n\\n## LilyPad: Add dance pad support and revamped Lilypad dialog\\n- by [FlatOut](https://github.com/FlatOutPS2)\\n\\nIn previous versions of the LilyPad plugin it was impossible to complete\\ncertain dance moves in games like the Dance Dance Revolution/Dancing\\nStage series where you were required to press both the up and down or\\nleft and right buttons simultaneously. This has now been resolved making\\nall the game requiring such input fully playable. Additionally the\\nlayout of the controller buttons on the pad settings page has been\\nimproved to more closely resemble a modern analog controller/DualShock\\nconfiguration.\\n\\n<ImageCompare left={require(\\"./img/lilypad-before_s.webp\\").default} right={require(\\"./img/lilypad-after_s.webp\\").default} />\\n\\n## GSdx: Avoid illegal instruction crash on older CPUs\\n- by [turtleli](https://github.com/turtleli)\\n\\nPCSX2 is packaged with 5 different versions of the GSdx plugin that use\\ndifferent instruction sets (SSE2, SSSE3, SSE4, AVX, AVX2) to provide\\nbetter performance for CPUs that support the newer instruction sets\\nwhile still allowing those with older CPUs to use the plugin. However on\\nolder CPUs PCSX2 would freeze for long periods of time or crash when\\nenumerating the AVX or AVX2 versions of the GSdx plugins. This was due\\nto unsupported vector instructions being present in the global\\nvariable/constant initialization code. This was resolved by deferring\\nthe initialization of all global variables with vector instructions so\\nthat they will only be executed by CPUs which support them.\\n\\n## OnePad: General improvements on accuracy\\n- by [Gregory](https://github.com/gregory38)\\n\\nOnepad received a major GUI overhaul recently. However there were\\nseveral reports of conflicts with 2 player configurations, problems with\\nloading save states and some issues with the value of axes in the\\nreleased state which caused .hack games to produce undesirable results.\\nThese issues were fixed by properly analyzing the pad events in Lilypad\\nand by simulating the same behavior on OnePad.\\n\\n## PCSX2: Improve patch handling\\n- by [avih](https://github.com/avih)\\n\\nRecently it was brought to our attention that PCSX2 had some issues with\\nit\'s patching system. More specifically there were issues with loading\\nand unloading patches; for example patches were not cleared properly if\\nyou rebooted in to a new game without closing PCSX2. If any patches were\\nloaded(including game fixes, custom user patches, and widescreen\\npatches) on the current game and you attempted to reboot in to a\\ndifferent game you were very likely to have issues since the previous\\npatches were not unloaded. Avih made some commits to address this issue\\nand it seems resolved. You should have no problems rebooting in to one\\ngame from another without closing PCSX2 now. If you notice that some\\nwidescreen patches or game fixes don\'t work as expected, please let us\\nknow.\\n\\n## PCSX2: Accurate video mode detection\\n- by [ssakash](https://github.com/ssakash)\\n\\nPreviously, PCSX2 used to detect the video mode based on the color burst\\nvalue of the SMODE2 register which was very limited and it only allowed\\nus to differentiate between NTSC/PAL/Progressive. Additional video modes\\nwere ignored and in addition some interlaced modes were reported as\\nprogressive. Recently the video mode detection code was moved to the\\n**Syscall()** function which triggers the initialization of video modes\\nwhenever the function **SetGsCrt()** is called. Moving the code allows\\nus to accurately detect a wider range of video modes supported by the\\nPS2.\\n\\n**Video modes (Before)**\\n\\n1.  NTSC\\n2.  PAL\\n3.  Progressive\\n\\n**Video modes (Now)**\\n\\n1.  NTSC\\n2.  PAL\\n3.  VESA\\n4.  HDTV 480p\\n5.  HDTV 576p\\n6.  HDTV 720p\\n7.  HDTV 1080i\\n8.  HDTV 1080p\\n\\n## GSdx: Alpha test improvement\\n- by [Gregory](https://github.com/gregory38)\\n\\nA standard rasterization pipeline generates two pieces of information: a\\ncolor sample and a depth sample. The graphics pipeline allows doing some\\ntests on those samples to decide whether to keep or discard the\\nfragment. Taking a depth test as an example, if the depth of the current\\nsample is below the depth of the old sample it means the object is\\nbehind it so you need to discard it. Older GPUs and the GS support\\ntesting based on the alpha value of the color. Current GPUs don\'t\\nsupport this but you can easily emulate it in a shader. So far so good\\nbut on the GS there is a catch (isn\'t there always!?) - you can either\\ndiscard the color OR the depth, not both. A modern GPU will discard\\nboth. Gabest had implemented a 2 pass shader to handle it which worked\\nfine in most cases but some games were picky as usual. Gregory did some\\nwork on the issue and managed to come up with a better solution that\\nworks for those picky games too. For the full explanation of that please\\nlook forward to a blog entry on the subject soon!\\n\\n<SliderCompare before={require(\\"./img/burnout-before_s.webp\\").default} after={require(\\"./img/burnout-after_s.webp\\").default} />\\n\\n## GSdx: Improved offset detection\\n- by [FlatOut](https://github.com/FlatOutPS2)\\n\\nCertain PS2 games offset the display rectangle by a very small value.\\nPreviously for such games GSdx had applied these offsets when merging\\nthe display rectangles. While this might look fine on a CRT television\\nit causes blurring issues on a monitor. The issue was fixed by applying\\nthese minor offsets only when the frame memory has an offset.\\n\\n<SliderCompare before={require(\\"./img/worms-before_s.webp\\").default} after={require(\\"./img/worms-after_s.webp\\").default} />\\n\\n## GSdx: Proper custom resolution scaling\\n- by [ssakash](https://github.com/ssakash)\\n\\nPreviously texture cache code for custom resolution scaling was full of\\nhacks to workaround framebuffer size limitations. Custom resolution\\nscaling/buffer management code has now been reworked to avoid many\\nissues. Here\'s a list of recent improvements made on custom resolution\\nscaling:\\n\\n-   Add proper rounding when unscaling texture size. (Fixes\\ncrashes/glitches on ICO and Dragonball Z: Budokai Tenkaichi 3)\\n-   Remove scaling hack which limited scaling size based on the scissor\\nvalue.\\n-   Ignore frame memory offsets when calculating dimension values of\\ndisplay rectangle.\\n-   Improve scaling of framebuffer size on custom resolution.\\n-   Port half-pixel offset hack to custom resolution. (Fixes blurring\\nissues on games when upscaled)\\n\\n**Dragon Ball Z : Budokai Tenkaichi 3**\\n\\n<SliderCompare before={require(\\"./img/dbz-before_s.webp\\").default} after={require(\\"./img/dbz-after_s.webp\\").default} />\\n\\n**ICO**\\n\\n<SliderCompare before={require(\\"./img/ico-before_s.jpg\\").default} after={require(\\"./img/ico-after_s.jpg\\").default} />\\n\\nLastly is something that doesn\'t really fall under any specific\\ncategory. There have always been rumors that PCSX2\'s code is completely\\nawful/bad/broken/insert your favorite negative adjective here.\\nPersonally we disagree, but if you think so PCSX2 is open source so feel\\nfree to help us improve it.\\n\\nThat said recently Gregory decided to run some analyses on the code to\\nimprove the situation. This isn\'t something we haven\'t done before but\\nit\'s a good opportunity to highlight it. Currently PCSX2 can be compiled\\nwith 4 compilers: Visual Studio, ICC, GCC and Clang and each compiler\\nhas it\'s own set of warnings.\\n\\nAs a Linux developer Gregory mostly works with GCC. At this point only\\n14 warnings remain in that compiler while the situation with Visual\\nStudio is good too. Clang reports a lot of warnings (570) but please\\nnote that only 51 of them are worth investigating. ICC doesn\'t report\\nany unique warnings that the other compilers don\'t reveal.\\n\\nPCSX2 was also profiled with several external tools like Coverity. PCSX2\\nis a very old project which contains old code so it doesn\'t use a lot of\\nnew hyped language features to solve limitations that we don\'t have in\\nthe first place. However there is always room for improvement. By\\nanalyzing and profiling the code with these tools and addressing the\\nissues found we can greatly improve the overall robustness of the\\nprogram.\\n\\nIf you want some in depth information regarding the results of the\\nprofiling and the steps we are taking to improve the situation then\\nplease look forward to a blog post on the subject that will be coming\\nsoon!\\n\\nThat\'s all of the notable changes for Q3!\\n\\nPlease look forward to our next progress report. We might have something\\nspecial for you...\\n\\n![](./img/teaser_s.webp)"},{"id":"/2016/channel-shuffle-effect","metadata":{"permalink":"/pcsx2-net-www/blog/2016/channel-shuffle-effect","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2016/channel-shuffle-effect/index.mdx","source":"@site/blog/2016/channel-shuffle-effect/index.mdx","title":"Channel Shuffle Effect","description":"GSdx got various improvements recently, issues were fixed on games such as Metal Gear Solid 3, Gran Turismo 4, Tekken 5, Tales of Legendia and Urban Chaos. All of those games use a certain effect that I have nicknamed as the Channel Shuffle Effect","date":"2016-08-03T00:00:00.000Z","formattedDate":"August 3, 2016","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":10.155,"hasTruncateMarker":true,"authors":[{"name":"Gregory","url":"https://github.com/gregory38","imageURL":"https://github.com/gregory38.png","key":"gregory"}],"frontMatter":{"authors":["gregory"],"date":"2016-08-03T00:00:00.000Z","description":"GSdx got various improvements recently, issues were fixed on games such as Metal Gear Solid 3, Gran Turismo 4, Tekken 5, Tales of Legendia and Urban Chaos. All of those games use a certain effect that I have nicknamed as the Channel Shuffle Effect","draft":false,"tags":["devblog"],"title":"Channel Shuffle Effect"},"prevItem":{"title":"Q3 2016 Progress Report","permalink":"/pcsx2-net-www/blog/2016/q3-2016-progress-report"},"nextItem":{"title":"Q2 2016 Progress Report","permalink":"/pcsx2-net-www/blog/2016/q2-2016-progress-report"}},"content":"\x3c!-- truncate --\x3e\\n\\n# Introduction\\n\\nDear PCSX2 users,\\n\\nGSdx got various improvements recently, issues were fixed on games such\\nas Metal Gear Solid 3, Gran Turismo 4, Tekken 5, Tales of Legendia and\\nUrban Chaos. All of those games use a certain effect that I have\\nnicknamed as the **\\"Channel Shuffle Effect\\"**. All games use a variation of this effect but each time\\nthe effect proved to be memory expensive and it was very slow, even with\\nthe best computers. The effect is very interesting because it explains\\nthe rendering/GPU architecture evolution from a fixed unit to a\\nprocessor. So I decided to take this opportunity to explain it the best\\nI can.\\n\\n# II) GPU evolution/revolution : Fixed Unit vs Shader Unit\\n\\nSo let\'s start with a bit of history. A long time ago, nearly 20 years\\nago! (yeah the PS2 isn\'t in its prime youth), GPUs were hardwired to\\nexecute fixed rendering tasks. Back then, they were called \'acceleration\\nunits\'. Hardwired renderers give you speed, power efficiency, but it is\\ncostly (silicon wise) and, well, they are hardwired to do a specific\\ntask. It was fine at the start, but then game designers wanted more and\\nmore effects. A new effect would have required a new GPU with a new\\nfixed function unit. It was kind of feasible on the PC market but not in\\nthe console market where a new GPU is released only every 5 years. So\\ngame designers tricked the fixed function unit to emulate some new\\neffects (such as gamma correction, depth of field, ...). The hardware\\nwas fast, but the emulation of such effects required more work than the\\nreal rendering of the image. Overhead was quite enormous. Accelerated\\nhardware was dead. Welcome the new king, Shaders.\\n\\nSo what is a Shader unit? It is basically a small processor that\\nexecutes software code designed specifically for them. The issue is that\\nprocessors are slow, utterly slow, however they are cheap (silicon\\nwise). However a processor could execute any effect you want. So in\\norder to compensate for the slowness of those processors, thousands of\\nthem are put in parallel. Hence complex effects can be done essentially\\nfor free.\\n\\nNow you probably understand the difference between a fixed unit and a\\nshader unit. Let\'s get back to the GS emulation.\\n\\n# III) The GS case\\n\\nGS is a pure fixed unit. You can basically configure the texture format,\\nthe framebuffer format and the final blending equation. Note, the\\nblending equation is quite basic too.\\n\\nYou can configure the GS to do 2 main color operations,\\n\\n-   primitive color \\\\* texture color\\n-   primitive color (when no texture is available)\\n\\n\\nTexture sampling operations are done on the 4\\nchannels(Green/Red/Blue/Alpha) at once. You can\'t select any one of\\nthem. It is all or nothing.\\n\\nBut how does a game like Gran Turismo 4 manage to apply a\\nbrightness/contrast effect? How can a game apply a depth effect based on\\nthe upper 6 bits of the 16 bits depth buffer? It\'s crazy, game designers\\nwere high ! Yes, you guess it right, they abused magic mushrooms!\\n\\n# IV) First example: Gran Turismo 4 rendering\\n\\nFasten your seat belt and let\'s dive into the Gran Turismo 4 rendering\\nengine and look at the brightness effect.\\n\\nThe engine uses 2 textures as input. The image that will get the\\nbrightness correction applied and a palette. The palette is basically a\\nlookup table or an array of colors. It allows to transform an index into\\na new color. Basically the game will save the brightness correction\\nfunction in the palette. So color 10 will be transformed to 15.\\n\\nHere\'s the palette that will do the brightness correction:\\n\\n![](./img/gt4_palette.webp)\\n\\nHere is an HLE (High Level Emulation) shader implementation.\\n\\n```cpp\\nvec4 rt        = sample_input_texture();\\noutput_color.r = sample_palette(rt.r).r;\\noutput_color.g = sample_palette(rt.g).g;\\noutput_color.b = sample_palette(rt.b).b;\\n```\\n\\n\\nIt is only a few lines of shader code. First line will read the current\\ntexture color. The 2nd line will apply the brightness correction on the\\nred channel. The 3rd will do the same for the green, and the 4th for the\\nblue. It can all be done with a single draw call and it is very fast\\neven on a slow computer. Last but not least it took 3 minutes to\\nimplement it.\\n\\nBut I have cheated, this isn\'t the GS way, it is the effect that would\\nhave been implemented on a standard GPU. The GS method is quite\\nharder.\\n\\nFirst of all, in order to improve the memory access performance on the\\nGS, the framebuffer will be split into many (150) tiny framebuffers of\\n64x32 pixels. Actually it is the size of a GS memory page. Of course\\nGSdx doesn\'t like this as it needs to allocate a 1280x1024 pixel\\nframebuffer for every one of those tiny 64x32 pixel framebuffers, this\\nlead to VRAM spikes at certain scenarios.\\n\\nEventually the brightness effect will be applied on each framebuffers.\\nSo yes it is executed 150 times. It requires around 10 GS equivalent\\ndraw calls though due to emulation overhead it would be around 15 GPU\\ndraw calls. Let\'s put some numbers in perspective:\\n\\n\\\\*A good limit for GPU game is \\\\~1000 draw call\\n\\n\\\\*Gran Turismo 4 frame is 2250 GS draw calls so likely between 2500-3000\\ndraw calls! Ouch.\\n\\n\\\\*The Gran Turismo 4 brightness effect costs 1500 GS draw calls, it is\\nhuge! 66% of the frame rendering is only a single effect. In others\\nwords, removing the effect would make the GS emulation nearly 3 time\\nfaster.\\n\\nNow let\'s decompose the effect. The equivalent of\\n\\n```cpp\\nc.r = sample_palette(rt.r).r;\\n```\\n\\n\\nIt is executed 3 times, one for each channel (Red/Green/Blue). The above\\nexplanation is done for a framebuffer of 64x32, you need to repeat it\\nenough times to cover the full screen. It is already costly on\\nperformance to do it once but it should be executed 150 times !\\n\\nSo the effect is based on a single trick, write the image into a RGBA8\\ncolor of size 64x32 but read it back as a 8 bits integer index of the\\npalette. A 32 bits colors contains four 8 bits channel. So for the gs,\\nthe image is now 128x64. Of course you can\'t magically change the size\\nof a texture in a modern GPU neither the format. So you need to convert\\nit. And guess what? it is quite expensive.\\n\\nHere\'s the picture of the initial format (aka human format) and then the\\nGS format:\\n\\n![](./img/gt4_before_effect_s.webp)\\n![](./img/gt4_before_effect_8bit_s.webp)\\n\\n\\nYes it is nice but it is even more complex than you think. Granted, it\\nisn\'t easy to see it but the texels aren\'t in the same order. You can\\ninfer some small rectangle (8x2 texels), they contain a single channel\\nof the initial color.\\n\\nWill anybody find the original image part (full image can be seen\\nbelow)?\\n\\n![](./img/gt4_sw_8bit_example2.webp)\\n\\nYou could imagine the complexity to debug the effect.\\n\\nAs I said in the beginning the basic operation of the GS is \\"primitive\\ncolor \\\\* texture color\\". We only want to write the red channel so\\nprimitive color will be (1.0f, 0.0f, 0.0f, 0.0f) i.e. red will be one\\nand the other channels will be 0. So GS output is basically the red\\nchannel of the texture color. Now the texture color case is left, of\\ncourse you can\'t just render a single sprite. You only want to sample\\nthe 8 bits index that used to be the red channel of the frame. The value\\nwill be converted by the palette. And you\'re done\\n\\nNo I\'m kidding, we\'ve just started.\\n\\nSo Gran Turismo 4 will render 16 sprites to cherry pick the correct\\nindex and try to put it back mostly in the correct order. Why mostly in\\norder? Because the game uses an extra optimization here, if you want to\\nfully descramble the texels, it would likely requires too many sprites\\nrendering, something around 256 sprites. So rendering will be done\\nscrambled for all channels.\\n\\nThey could have send a kaleidoscope in the game package but finally they\\ndecided it was nicer to unscramble the texels. Again, a new trick\\n\\nYes we love tricks\\n\\nThe framebuffer will read back as a 256x1 palette. Wait you said that\\nframebuffer was 64x32! Yes it would be read back 8 times as 8 palettes.\\nAnd the input texture is really special, you can see it below. The\\ntexture contains the position of the future pixels and you guessed it\\nright, it would unscramble the mess. It is efficient (well efficient for\\nthe GS) because you can unscramble your pixels with only 8 extra\\nsprites. And that\'s it.\\n\\nHere\'s the special texture to unscramble data:\\n\\n![](./img/gt4_special_texture.webp)\\n\\nPlus some screenshots of the effect (before/after)\\n\\n![](./img/gt4_before_full_s.webp)\\n![](./img/gt4_after_s.webp)\\n\\n# V) Second example: Urban Chaos rendering\\n\\nThe new trending effect when the PS2 was released was the depth of field\\neffect. Basically, it\'s an effect that depends on the depth. A basic\\nexample will be a darker/blurrier object if it\'s far away. It\'s rather\\nbasic to implement, you just need to modulate the color based on the\\ndepth value. Unfortunately you can\'t read the depth value like that. So\\nlet\'s see what the game does.\\n\\nUrban Chaos uses a 16 bits integer depth format. Actually the game\\nlimits the rendering to 11 bits. So the depth ranges from 0 to 2047. The\\ngame creators decided that the top 8 bits will be enough to implement\\nthe depth modulation. But a single issue remains, how to extract those 8\\nbits! Again it will apply on a small framebuffer, and it will consume\\ntons of draw calls, tons of memory.\\n\\nAt a higher level, it\'s very close to Gran Turismo. Close, but not the\\nsame. Good news, it\'s easier than Gran Turismo as you don\'t want an\\naccurate depth information so you don\'t need to bother with shuffle\\npixels. So we have seen a way to read back a single channel of a\\nframebuffer and how to apply a correction factor. Urban Chaos will do\\nthe same but on the depth texture.\\n\\nHere\'s a small drawing to explain the now easy process:\\n\\n![](./img/urban_chaos_s.webp)\\n\\nAt the top of the drawing, you have the 16 bits depth. The GS will read\\nit as a color texture (aka RGB5A1) so I set some nice colors for the\\nred, green and blue channels. The depth is split into two 8 bits\\nchannels, be aware it doesn\'t map with the color channel because the\\neffect works on 32 bits memory format. I know it\'s a bit confusing.\\nAnyway the first step will be to extract the first 8 bits then apply a\\ndivision by 8. Which is equivalent to removing the 3 bits of the right.\\nThe second step will be to extract the remaining 8 bits then apply a\\nmultiplication by 32. It\'s equivalent to shifting the data to the left 5\\ntimes. The last step is a blending addition between the 2 shifted depth\\ncolors and we are done. We managed to extract only the interesting bits\\nof the depth. The new texture could be used to modulate any effects\\nbased on depth information.\\n\\nHere\'s the float depth buffer of the GPU:\\n\\n![](./img/urban_chos_depth_in_s.webp)\\n\\nAnd now, the greenish texture generated to modulate the depth effect\\n\\n![](./img/urban_chaos_depth_out_s.webp)\\n\\n# VI) Conclusion\\n\\n\\nIt is time to conclude this blog about the channel effect. There were\\ntwo possible ways to implement the effect on GSdx. The traditional\\napproach would be to emulate all those draw calls, manage all texture\\nconversions and so on. In short, emulate the GS that emulates a GPU OoO.\\nUnfortunately, even the best PCs would struggle.\\n\\nSo I implemented the alternate solution, replaced all the mess with a\\ncouple of HLE shaders. It\'s very efficient, thousands of draw calls were\\nreplaced by 1 or 2 draw calls. Unfortunately, it isn\'t perfect either.\\nThere are two limitations, it requires to have some HLE shaders by game.\\nCurrently not all games are supported (Ghost in the Shell, Manhunt 2,\\nRidge Racer). And the core (EE/VU) will still generate a ton of\\nprimitives to do the effect, albeit GSdx will happily throw everything\\nin the trash, nevertheless it is heavy on the core emulation."},{"id":"/2016/q2-2016-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2016/q2-2016-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2016/q2-2016-progress-report/index.mdx","source":"@site/blog/2016/q2-2016-progress-report/index.mdx","title":"Q2 2016 Progress Report","description":"Hey everyone and welcome to another spectacular PCSX2 progress report!","date":"2016-06-17T00:00:00.000Z","formattedDate":"June 17, 2016","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":8.17,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2016-06-17T00:00:00.000Z","description":"Hey everyone and welcome to another spectacular PCSX2 progress report!","draft":false,"tags":["progress-report"],"title":"Q2 2016 Progress Report"},"prevItem":{"title":"Channel Shuffle Effect","permalink":"/pcsx2-net-www/blog/2016/channel-shuffle-effect"},"nextItem":{"title":"New Website Launched!","permalink":"/pcsx2-net-www/blog/2016/new-website-launched"}},"content":"\x3c!-- truncate --\x3e\\n\\n![](./img/progress-rep-q2-2016.jpg)\\n\\n------------------------------------------------------------------------\\n\\nHey everyone and welcome to another spectacular PCSX2 progress report!\\nAs you may have read in the last report we have moved from doing reports\\nmonthly to quarterly in order to better focus our manpower. Today\'s\\nreport is our first quarterly report and as such there are quite a lot\\nof improvements and changes to go over. Before we do that however we\\nneed to ask for **your** help!\\n\\nAs you probably know PCSX2 is cross platform and runs on Windows and\\nLinux. Because of this we need testers for each of those platforms in\\norder to be effective at developing for them. Currently we have a very\\nproblematic lack of testers on Linux. We would like to take this\\nopportunity to invite those of you with Linux experience to help the\\nproject out and become a Linux tester! Ideally you should be completely\\ncomfortable working in Linux (whatever flavor you choose as long as\\nPCSX2 is compatible with it!) and you should have or be willing to\\ndevelop the knowledge to debug various issues with the emulator in that\\nenvironment. If this sounds like you and you want to help us out then\\nplease head over to [**our forum thread here**](http://forums.pcsx2.net/Thread-Q2-2016-progress-report) and let us know!\\n\\nWith that out of the way let\'s jump right in to the PCSX2 progress\\nreport for Q2 2016! Strap yourself in for the ride because here we go!\\n\\n## OnePAD: Updated GUI\\n- by [kust2708](https://github.com/kust2708)\\n\\n<ImageCompare left={require(\\"./img/onepad_old_s.webp\\").default} right={require(\\"./img/onepad_new_s.webp\\").default} />\\n\\nOnePAD is the default pad plugin for PCSX2 on Linux. Recently kust2708\\nupdated OnePAD\'s UI to make it a bit nicer and more user friendly.\\nInstead of the drab gray buttons laid out in a sort of Dual Shock\\narrangement users can now much more intuitively configure their\\ncontrollers with a nice Dual Shock 2 graphic.\\n\\n\\n## Core: Automatic aspect ratio switch during FMV playback\\n- by [FlatOut](https://github.com/FlatOutPS2)\\n\\n<Image cols={6} src={require(\\"./img/auto-aspect-ratio-switch.webp\\").default} />\\n\\nMost games with a widescreen option (through either in-game setting or\\nwidescreen patch) have FMVs that are fixed to the original 4:3 aspect\\nratio. Those videos will appear horizontally stretched when playing a\\ngame in widescreen. This new option automatically switches PCSX2\'s\\naspect ratio to 4:3 when an FMV begins and back to widescreen when it\\nends, so both the in-game part and the FMV\'s are displayed correctly.\\n\\n\\n## CDVDgigaherz: Fixed dual layer DVD reading\\n- by [turtleli](https://github.com/turtleli)\\n\\nDual layer DVDs have never worked properly with CDVDgigaherz and it\\nturns out that there were quite a few issues:\\n\\n-   DVD layer information sector addresses were not converted from big\\nendian to little endian.\\n-   Windows filesystem drivers prevented layer 1 sectors from being read\\ndue to boundary checks.\\n-   Dual layer DVDs were reported to PCSX2 as having multiple tracks,\\nwhen all single session DVDs only have one track.\\n-   Generation of the Table of Contents was skipped.\\n-   The layer break address was off by one.\\n-   PTP DVDs were wrongly recognized as OTP DVDs.\\n\\nThese issues are now fixed so dual layer DVDs should now be playable\\nwith CDVDgigaherz. A list of games affected by this change can be found\\n[on\\nWikipedia](https://en.wikipedia.org/wiki/List_of_PlayStation_2_DVD-9_games)\\n.\\n\\n\\n## CDVD: Improved ISO layer break detection algorithm\\n- by [turtleli](https://github.com/turtleli)\\n\\nWhen using large DVD ISOs (>4.3GB e.g. dual layer DVDs) a brute force\\napproach was used to detect the layer break address. The algorithm would\\nstart from the middle of the ISO and search outwards until the layer\\nbreak was found.\\n\\nThis approach wasn\'t optimal due to the following reasons:\\n\\n-   PCSX2 would appear to be unresponsive while it searches for the\\nlayer break address the first time the ISO is booted.\\n-   The layer break address needs to be cached to speed up subsequent\\nloads.\\n-   If there is no layer break, the entire DVD would be searched each\\ntime the ISO is booted - this could take a few minutes.\\n\\nDoing it this way was unnecessary. The DVD layer 0 Primary Volume\\nDescriptor contains the total number of sectors on layer 0 of the DVD.\\nFor a single layer DVD this is equal to the total DVD sector count. For\\na dual layer DVD, however, this sector count is equal to the first\\nlogical sector number on layer 1. Using this knowledge a much faster and\\nsimpler layer break search algorithm was implemented.\\n\\n\\n## GSDX: Fast texture invalidation\\n- by [Gregory](https://github.com/gregory38)\\n\\nNot too long ago the half screen issue caused by the texture cache was\\nfixed for Snowblind engine games. However even with this fix the games\\nwere still too demanding even for beastly machines. In order to figure\\nout why, a GS dump was profiled. The profile revealed that a single loop\\nin the texture cache management code was very busy. The loop in question\\nwas responsible for computing the block invalidation of certain special\\ntextures. They are special because the width of the buffer which\\ncontains them is smaller than the width of the texture in texels. As a\\nresult, when a block is invalidated all the repeating blocks must also\\nbe invalidated. The texture then becomes like a Swiss cheese full of\\nholes which requires uploading lots of small textures to fill. Doing it\\nthis way is very efficient at reducing the usage of PCIe bandwidth but\\nunfortunately it requires too much CPU time.\\n\\nIn order to resolve this issue, we skip the block invalidation and\\ncompletely invalidate the whole texture instead. This avoids the busy\\nloop we discussed above. The texture is then uploaded in one go instead\\nof many small uploads which greatly reduces the driver overhead. As a\\ntrade-off it increases the PCIe bandwidth requirement by 20-30%. However\\nat this point PCIe is up to the third generation (and soon the fourth)\\nso a good deal of bandwidth is available. Benchmarks show that this\\nchange produces a nice speedup - however some scenes were *still* too slow.\\n\\nFurther profiling revealed that the game reads the render target a lot.\\nThis is slow because you need to flush the full GPU pipeline first.\\nNothing can be done about this part unfortunately. But next you need to\\ntransfer the GPU data to the CPU. Before we were transferring the full\\nframebuffer which is millions of pixels. However the game only needs\\ndata for a few hundred of them. Gregory updated the code to transfer\\nonly the useful pixels.\\n\\nThese two improvements combined provided a major speed boost for\\nSnowblind engine games. They are almost two times faster now! If you\\nhave a good processor with an Nvidia GPU then you should be able to\\nenjoy them in full upscaled glory now!\\n\\n|           **Game**           | **1.4.0 Release** | **1.5.0 w/FTI** |\\n|:----------------------------:|:-----------------:|:---------------:|\\n| Baldur\'s Gate: Dark Alliance |        30         |       80        |\\n|     Champions of Norrath     |        52         |       105       |\\n\\n> Speed Impact of Fast Texture Invalidation\\n\\n\\n\\n## GSDX: Improved detection of Framebuffer size\\n- by [ssakash](https://github.com/ssakash)\\n\\nPreviously the height of the framebuffer was calculated using guesswork\\nbased on the width of the framebuffer. This method was obviously wrong\\nand it caused some conflicts when scaling the buffer for upscaled\\nresolutions. This was fixed by using the height of the output circuit as\\na base for the framebuffer height.\\n\\nHere are some comparison screenshots showing the issues fixed by this\\nchange:\\n\\n\\n**Crash Nitro Kart**\\n\\n<SliderCompare before={require(\\"./img/CNK-before_s.webp\\").default} after={require(\\"./img/CNK-after_s.webp\\").default} />\\n\\n**Richard Burns Rally**\\n\\n<SliderCompare before={require(\\"./img/RBR-before_s.webp\\").default} after={require(\\"./img/RBR-after_s.webp\\").default} />\\n\\n## GSDX: Enable reading of Depth Buffer\\n- by [Gregory](https://github.com/gregory38)\\n\\nThere are certain scenarios where the Core (EE) reads the depth buffer\\nto free the GS memory **(4 MB)**\\nand do some effects. During this time the buffer is saved in the EE\\nmemory **(32 MB)** and is restored\\nafter the completion of said effects.\\n\\n**Gregory** has emulated this\\nbehavior by converting the GPU depth buffer to GS format and by sending\\nit to the EE when it wants to read the depth buffer. This implementation\\nhas finally fixed the lens flare issue on Kingdom Hearts II and also\\nsome depth related issues on ICO and Nocturne.\\n\\n<SliderCompare before={require(\\"./img/kingdom-hearts2-before_s.jpg\\").default} after={require(\\"./img/kingdom-hearts2-after_s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/ICO-before_s.webp\\").default} after={require(\\"./img/ICO-after_s.webp\\").default} />\\n\\n## GSDX: Improved PCRTC merge circuit emulation\\n- by [turtleli](https://github.com/turtleli) and [ssakash](https://github.com/ssakash)\\n\\nIn some cases the GS is configured to use two side by side display\\nrectangles for rendering. The rectangles are merged by the GS\'s merge\\ncircuit and the resulting image is sent to the TV.\\n\\nThe horizontal position of the display rectangles, however, was ignored\\nwhen emulating the merge circuit, which caused image overlap issues\\nwhere only half the image was displayed. The display rectangles\'\\nhorizontal position is now taken into account, which fixes the image\\noverlap issues and makes split screen mode in Time Crisis 2 and 3\\nplayable.\\n\\n**Time Crisis 2 (before) (320 X 224)**\\n\\n<Image cols={6} src={require(\\"./img/timecrisis-before.webp\\").default} />\\n\\n**Time Crisis 2 (now) (640 X 224)**\\n\\n<Image cols={6} src={require(\\"./img/timecrisis-after.webp\\").default} />\\n\\n\\n## VIF: Timing fix for MSCALF, MSCNT instructions\\n- by [Refraction](https://github.com/refractionpcsx2)\\n\\nPreviously the **MSCALF** and\\n**MSCNT** instructions were\\ndelayed along with the **MSCAL**\\ninstruction, these instructions trigger the execution of the micro\\ninstructions in VU1. This was done in order to fix the graphics on the\\nSnowblind Engine games such as Baldur\'s Gate: Dark Alliance and\\nChampions of Norrath; However, delaying this seemed to cause quite a few\\nshadow problems on games like Downhill Domination, Twisted Metal and\\npotentially other games.\\n\\nRefraction fixed these issues by reworking the code to only allow delays\\nfor the **MSCAL** instruction.\\n\\n<SliderCompare before={require(\\"./img/Downhil-Before_s.jpg\\").default} after={require(\\"./img/Downhil-after_s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/twisted-metal-before_s.webp\\").default} after={require(\\"./img/twisted-metal-after_s.webp\\").default} />\\n\\nAs usual, there were even more additions and developments while this\\nreport was being written but they will be included in our next quarterly\\nreport. Thanks to everyone who worked on this, ssakash, refraction,\\ngregory, dogen, Nobbs66, FlatOut, turtleli and a special thanks to Blyss\\nSarania, the whole team is by his side through the rough times he is\\ngoing through."},{"id":"/2016/new-website-launched","metadata":{"permalink":"/pcsx2-net-www/blog/2016/new-website-launched","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2016/new-website-launched/index.mdx","source":"@site/blog/2016/new-website-launched/index.mdx","title":"New Website Launched!","description":"After being in the works for half a year we finally got around making the new website public!","date":"2016-05-02T00:00:00.000Z","formattedDate":"May 2, 2016","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.225,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2016-05-02T00:00:00.000Z","description":"After being in the works for half a year we finally got around making the new website public!","draft":false,"tags":["devblog"],"title":"New Website Launched!"},"prevItem":{"title":"Q2 2016 Progress Report","permalink":"/pcsx2-net-www/blog/2016/q2-2016-progress-report"},"nextItem":{"title":"January - February 2016 Progress Report","permalink":"/pcsx2-net-www/blog/2016/january-february-2016-progress-report"}},"content":"After being in the works for half a year (\\n\ud83d\ude1b ) we finally got around making the new website\\npublic!\\n\\n\x3c!-- truncate --\x3e\\n\\nSince we needed to upgrade to the latest Joomla 3, I decided to also\\nmake the website look more modern and closer to our old, initial one. I\\nreally liked the Dolphin website look, so you\'ll find some elements\\nclose to their design\\n\ud83d\ude0a\\n\\nHere\'s what\'s changed:\\n\\n-   Now running the latest Joomla 3 platform\\n-   New color scheme, matching the old PCSX2 website one that many\\npeople requested. You can switch to the previous dark theme from the\\nCpanel option at the upper right\\n-   Latest boxes now using JS and switch their items instead of showing\\nall 5 items at once (less space used, looks better)\\n-   Larger random screenshot box and new screenshots added\\n-   Removed right column, now only a single left column, more usable\\nspace\\n-   News section now adapts to the detected resolution of your screen.\\nNow the website should display much better with phones and adapt to\\nlarger resolutions as well (it\'s NOT responsive though..)\\n-   Nicer compatibility overview bars\\n-   New logo and fav icon! Thanks bmate\\n\ud83d\ude0a\\n-   Many CSS fixes and cleanups\\n\\nIn general I tried giving the website a more game-y look and I think in\\nthat regard it was a success\\n\ud83d\ude0a\\n\\nYou can complain on how you don\'t like the new look, as usual, in this\\nthread!\\n<http://forums.pcsx2.net/Thread-New-website-launched>"},{"id":"/2016/january-february-2016-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2016/january-february-2016-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2016/january-february-2016-progress-report/index.mdx","source":"@site/blog/2016/january-february-2016-progress-report/index.mdx","title":"January - February 2016 Progress Report","description":"Hello everyone and welcome to another glorious PCSX2 progress report!","date":"2016-03-02T00:00:00.000Z","formattedDate":"March 2, 2016","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":9.185,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2016-03-02T00:00:00.000Z","description":"Hello everyone and welcome to another glorious PCSX2 progress report!","draft":false,"tags":["progress-report"],"title":"January - February 2016 Progress Report"},"prevItem":{"title":"New Website Launched!","permalink":"/pcsx2-net-www/blog/2016/new-website-launched"},"nextItem":{"title":"1.4.0 Released! - Year End Report","permalink":"/pcsx2-net-www/blog/2016/year-end-report-released-1-4-0"}},"content":"Hello everyone and welcome to another glorious PCSX2 progress report!\\nThis time we\'ve got a lot of GSdx improvements to share with you. We\\nalso have an announcement regarding the progress reports.\\n\\n\x3c!-- truncate --\x3e\\n\\nThose of you who have been following them probably know that we\'ve been\\na little late with them pretty much every time. The reason for this is\\nlack of manpower - for the most part, the same people that work on the\\nemulator itself write the progress reports. Because of that there are\\nmany times when they\'d rather spend their free time improving the\\nemulator rather than writing about the improvements. With this in mind\\nwe have decided that from now on *our progress reports will be released\\nevery three months* .\\n\\nThis will enable us to release higher quality progress reports as well\\nas dedicate more time to development.\\nIf you wish to follow development more closely then you can always check\\nout what\'s going on over at [Github](https://github.com/PCSX2/pcsx2) .\\n\\nNow with that out of the way, let\'s get down to it!\\n\\n![](./img/progress-rep-1-2-2016.jpg)\\n\\n## GSDX-OpenGL: Fast accurate blending\\n- by [Gregory](https://github.com/gregory38) and [Turtleli](https://github.com/turtleli)\\n\\nAs most of you know, Blending Unit Accuracy is an option where a SW\\nblending unit is emulated through the fragment shader with the intent of\\nreproducing the blending unit output of the GS. This option fixes\\nblending issues in a lot of games - Valkyrie Profile 2, Rule of Rose and\\nBakugan Battle Brawlers are examples. One of the major disadvantages of\\nthis from a user perspective is that increasing the accuracy increases\\nthe demand on the system. In a worst case scenario this can drop\\nperformance well below an acceptable level.\\n\\nTwo reasons why poor performance was observed on some games while using\\naccurate blending:\\n\\n-   Primitives being drawn one by one when any primitive overlap is\\ndetected\\n-   The GPU Texture Cache needs to be flushed at each instances of\\nreading a target.\\n\\n\\n**Turtleli** fixed the first issue\\nby reworking the code so that non-overlapping consecutive sprite\\nprimitives are drawn together when sprite overlap is detected, which can\\ngreatly reduce the number of barriers used and therefore improve\\nrendering speed when accurate blending is enabled.\\n\\n**Gregory** has tackled the second\\nissue by not flushing the texture cache between primitives when we are\\nemulating the Frame buffer mask on an alpha channel. Normally if you\\ndon\'t flush the cache you wouldn\'t know what you\'re reading - it could\\nbe an old cached value or it could be a value written in the render\\ntarget or it could even be something undefined. Fortunately the\\n\\"Undefined\\" case is rather unlikely as read and write paths are\\nseparated for performance and memory is designed to handle both\\nread/write at the same time/same address.\\n\\nIn the end, it all comes down to the case of \\"Cached value\\" VS \\"Current\\nvalue\\". In order to generate an effect, the fragment shader needs to\\nread the masked bits and then merge them with the new alpha value. Since\\nthe alpha channel isn\'t blended (due to GS limitations), the masked bits\\nin the target are constant. This also means that said bits are the same\\nin the cache (which contains the value of rendering target at a random\\ntime). Because of this we don\'t care which data is read, cached or not,\\nthe required bits will be the same. This provides a significant increase\\nat speed on games like *Xenosaga*.\\n\\n**Note:** The former slow method\\nof accurate blending can still be used by enabling \\"Safe Accurate\\nblending\\" on HW hacks. ( useful for checking on regressions caused by\\nthe current fast blending)\\n\\n|      **Game**      | **Blending unit accuracy \\\\[disabled\\\\]** | **Blending unit accuracy \\\\[medium\\\\] (before)** | **Blending unit accuracy \\\\[medium\\\\] (now)** |\\n|:------------------:|:---------------------------------------:|:----------------------------------------------:|:-------------------------------------------:|\\n|      Xenosaga      |                   172                   |                       36                       |                     153                     |\\n| Zone of the Enders |                   172                   |                       27                       |                     156                     |\\n\\n> Speed impact of Fast accurate blending\\n\\n## GSDX-OpenGL: Depth buffer lookup optimization\\n- by [Gregory](https://github.com/gregory38)\\n\\nThe Graphics synthesizer (GS) is allowed to overlap the depth buffer and\\nthe color buffer. In order to support it on a standard PC GPU, HW depth\\nwas created to convert between the depth and color format which resolves\\ntons of issues related to the depth textures. Unfortunately it is quite\\ncostly on performance.\\n\\nAfter some observations, it was found that at several instances the\\ndepth buffer is useless, not read, not written. GSdx was updated to not\\nhandle the depth buffer when it isn\'t used by the game. It removes most\\nof the overhead of the HW depth option on games like Tekken 5.\\n\\n| **Game** | **HW depth \\\\[disabled\\\\]** | **HW depth \\\\[enabled\\\\] (before)** | **HW depth \\\\[enabled\\\\] (now)** |\\n|----------|:-------------------------:|:---------------------------------:|:------------------------------:|\\n| Tekken 5 |            215            |                32                 |              205               |\\n\\n> Speed impact of depth buffer lookup optimization\\n\\n\\n\\n## GSDX-FX: Post-Processing updates\\n-  [Asmodean](https://github.com/Asmodean)\\n\\nAsmodean has updated his effects suite with improved cel edges of the\\ncel shader and a new debanding shader along with Timothy Lottes\' CRT\\nemulation shader.\\n\\nHere are some comparison screenshots showing the effect of the CRT\\nemulation shader:\\n\\n<SliderCompare before={require(\\"./img/gundam-noshader-s.webp\\").default} after={require(\\"./img/gundam-shader-s.webp\\").default} />\\n\\n<SliderCompare before={require(\\"./img/dmc3-noshader-s.webp\\").default} after={require(\\"./img/dmc3-shader-s.webp\\").default} />\\n\\n\\n## GSDX: Proper handling of 576P/720P/1080I video modes\\n- by [ssakash](https://github.com/ssakash)\\n\\n**1080P (before/after)**\\n\\n<SliderCompare before={require(\\"./img/height-broken-s.webp\\").default} after={require(\\"./img/height-fixed-s.webp\\").default} />\\n\\n> Note: This screenshot is of an ELF file called \\"Video mode test\\" which was designed to observe the Display/SMODE registers value changes at each video modes.\\n\\n**Gitaroo Man \\\\[PAL\\\\] (before/after)**\\n\\n<SliderCompare before={require(\\"./img/gitarooman-broken-s.webp\\").default} after={require(\\"./img/gitarooman-fixed-s.webp\\").default} />\\n\\n>  Note: The NTSC version of Gitaroo Man didn\'t suffer the following issue since it uses a height of 448 whereas the PAL version uses 576.\\n\\nThe physical display dimensions (CRTC size) of the video modes can be\\nfound using the value of the following display registers:\\n\\n-   DW - Display Width\\n-   DH - Display Height\\n-   MAGH - Horizontal Magnification factor\\n-   MAGV - Vertical Magnification factor\\n\\nThe width and height are calculated by the formula (DW+1) / (MAGH + 1) and **(DH+1) / (MAGV + 1)** respectively.\\nDifferent video modes use different magnification factors and it depends\\non the game as well.\\n\\nPreviously there was a saturation limit for display height (DH) as it\'s\\ngenerally not higher than 640 for NTSC / PAL video modes. However, that\\nwasn\'t the case for other VESA/DTV (576P,720P...1080I) video modes since\\nthey utilize a bigger display height (DH) and scale it according to the\\nmagnification factor. To solve this, the saturation limit is ignored for\\nvideo modes other than NTSC/PAL as those do have the possibility of\\nproducing a higher DH value. The check was ultimately placed on CRTC\\nheight instead of DH to avoid any possible conflicts with the vertical\\nmagnification factor scaling.\\n\\nAnother part of the fix was to prevent a bad division of height when the **INT** and **FFMD** register values were set.\\nPreviously the code did the division twice since we were receiving the\\nheight of the device size instead of the display rectangle. We don\'t\\nneed to divide once again as device size already goes through the\\nhalving of height when the respective register values are set.\\n\\n\\n## PCSX2: GUI Improvements\\n- [ssakash](https://github.com/ssakash), [Turtleli](https://github.com/turtleli) and [NZJenkins](https://github.com/NZJenkins)\\n\\n-   Console Window: Improved size handling and better autodock behavior\\nwhen maximized.\\n-   Console Window: make enable/disable/restore defaults affect all menu\\nitems.\\n-   Debugger: proper deletion of breakpoint when multiple breakpoints\\nare present.\\n-   Debugger: prevent unexpected resuming when stepping into/over\\ndisabled breakpoints.\\n-   Debugger: stepout works without any preceding step in / step over.\\n-   GSFrame: Resolution is displayed at titlebar with respect to\\nupscaling value.\\n-   VideoPanel: Better gray out of dialog elements.\\n\\n\\n## PCSX2-Auto test suite\\n- by [Gregory](https://github.com/gregory38), [Rama](https://github.com/ramapcsx2) and [Refraction](https://github.com/refractionpcsx2)\\n\\nThe [PS2 Autotests](https://github.com/unknownbrackets/ps2autotests) is\\na repository created by [Unknown\\nbrackets](https://github.com/unknownbrackets) .\\n\\nPS2 Autotests consists of multiple small programs for the PS2 with each\\none being a different test. It tests certain things and then simply\\nwrites out a log of what it did and what happened when it did those\\nthings. These tests are run on real hardware and then we save that\\nlog.\\n\\nAfter that an emulator can execute the same small program and get its\\nown log. If what happened on the real hardware is different from what\\nhappened in the emulator then guess what? You\'ve got a bug, or at least\\na potential problem. Even better, it\'s quite easy to reproduce.\\n\\nGregory has recently added a perl script which makes it easier to run\\nsuch tests and allows faster debugging for the developers - these tests\\nhave already helped our developers fix a couple of issues. (few of them\\nare listed below for reference)\\n\\n-   [EE-Interpreter: Fix a subtle bug in a\\nQFSRV](https://github.com/PCSX2/pcsx2/commit/46a2f6ed24067dfdc2002ff9a1a365d941ff7779)\\n-   [IOP: Fix MTLO\\nInstruction](https://github.com/PCSX2/pcsx2/commit/ba62ce9e933499f94a613f34a0a02361fd870fc6)\\n-   [DMAC: Most significant bits of MADR is fixed to 0 in 8/9\\nchannels](https://github.com/PCSX2/pcsx2/commit/5efbf2a8023432d4ff6f9564e77eda7714c4f91d)\\n-   [Vif-Recompiler: Fix skip size\\ncalculation.](https://github.com/PCSX2/pcsx2/commit/cf993c2a3632a6371fc807da1ee6b945ccca5b9d)\\n-   [Vif-Recompiler: Proper handling when domode is set\\nto 3.](https://github.com/PCSX2/pcsx2/commit/e5e0f85b50feb943e761944ca4a368402a1600f2)\\n\\n\\n## PCSX2-Vector Units: Scarface I bit hack\\n- by [Refraction](https://github.com/refractionpcsx2)\\n\\n**Scarface - The World is Yours**\\nhas a certain way of doing it\'s vector programs which is a pain for\\nrecompilers, most games upload a program with specific instructions to\\nprocess vectors in a set of order with a common outcome. However the\\nfollowing game does things a little bit differently, instead of having a\\nvector program for certain processes and then just changing the input\\ndata, scarface constantly changes what is known as the **I bit** in its VU program.\\n\\nThe issue here is that the recompiler creates a hexadecimal hash of the\\nentire program, one little change to the program (in this case, an I bit\\nvalue in place of an operation code) and then the hash changes\\ncompletely, telling the recompiler that this is a new program and not\\nthe same one it had previously recompiled, so it recompiles it over and\\nover again until it runs out of memory.\\n\\nTo workaround the following issue, a new hack was added to check for the\\nstatus of the I bit value and then avoid constant recompilation when\\nonly the I bit value has been changed at the specific address. Maybe in\\nthe future we can deal with this in a accurate way, but it\'s not an easy\\nthing to check without compromising on speed.\\n\\nThis is an optional hack which can be found under the **Gamefixes** tab of the emulator as it\\nis slower to handle things this way and is quite specific, but it was\\nrequested by quite a few users, so we obliged!\\n\\n\\n## LilyPad: Add Pop\'n Music controller support\\n- by [ekudritski](https://github.com/ekudritski)\\n\\n<Image cols={6} src={require(\\"./img/lilypad-pop-n-music-s.webp\\").default} />\\n\\nNative support for the **Pop\'n Music controller** has been added to LilyPad. Several users had\\nrequested this feature since a few games rely on said controller and\\nit\'s quite hard and troublesome to simulate the behavior of the\\ncontroller using macros and third party programs.\\n\\nThat was it for these 2 months!. The next report will come around June,\\nbut hopefully we will show signs of life before that\\n\\nAs always, check out our [github repository](https://github.com/PCSX2/pcsx2) for daily updates to PCSX2."},{"id":"/2016/year-end-report-released-1-4-0","metadata":{"permalink":"/pcsx2-net-www/blog/2016/year-end-report-released-1-4-0","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2016/year-end-report-released-1-4-0/index.mdx","source":"@site/blog/2016/year-end-report-released-1-4-0/index.mdx","title":"1.4.0 Released! - Year End Report","description":"Hello PCSX2 followers and a belated Happy New Year!","date":"2016-01-07T00:00:00.000Z","formattedDate":"January 7, 2016","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":12.995,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2016-01-07T00:00:00.000Z","description":"Hello PCSX2 followers and a belated Happy New Year!","draft":false,"tags":["progress-report"],"title":"1.4.0 Released! - Year End Report"},"prevItem":{"title":"January - February 2016 Progress Report","permalink":"/pcsx2-net-www/blog/2016/january-february-2016-progress-report"},"nextItem":{"title":"September 2015 Progress Report","permalink":"/pcsx2-net-www/blog/2015/september-2015-progress-report"}},"content":"Hello PCSX2 followers and a belated Happy New Year!\\n\\nAfter being late a couple of days (it\'s a tradition and we can\'t break\\nit \ud83d\ude1b), we present you with a new stable release, version 1.4.0!\\n\\n\x3c!-- truncate --\x3e\\n\\n<Image cols={6} src={require(\\"./img/progrepend.jpg\\").default} />\\n\\nAlong with the release comes our year end report for 2015. The following\\nprogress report will provide an overview of all the notable changes from\\nthe previous stable version, 1.2.1, to this update. Keep in mind many of\\nthe changes have been mentioned in previous progress reports, but are\\nmentioned again as a changelog for 1.4.0. The changes since 1.2.1 are so\\nmany, some smaller, some quite massive, that it was impossible to write\\nabout all of them, but we believe we have nailed all the highlights!\\n\\nThis release is special for our growing Linux user base. You will be\\ntreated with a shiny new GSdx OpenGL backend, for a massive speed and\\ncompatibility boost over 1.2.1 and much more, all thanks to the efforts\\nof Gregory and various contributors!\\n\\nGenerally, this release includes work from many more contributors than\\nany previous versions. It appears that switching to Git as our version\\ncontrol system helped invite more developers and encourages sharing even\\nsmall patches and additions.\\n\\nSo without further ado, here is the report!\\n\\n# Core\\n\\n## New Feature - Debugger\\n- by [Kingcom](https://github.com/Kingcom)\\n\\n<Image cols={6} src={require(\\"./img/debugger_s.webp\\").default} />\\n\\nThe new debugger features a live disassembly view and allows developers\\nto debug games way easier than before while being very useful feature in\\nassisting the debugging of games which aren\'t working properly. Its\\nmain purpose is aiding in game hacking, translation patches for\\nexample.\\nlist of Keyboard shortcuts for the debugger functions can be found at\\n**docs/debugger.txt** .\\n\\n## New Feature - Folder memory cards\\n- by [AdmiralCurtiss](https://github.com/AdmiralCurtiss)\\n\\n<Image cols={6} src={require(\\"./img/folder-memcards-s.jpg\\").default} />\\n\\nThe new Folder memory card feature allows users to easily share single\\ngame saves instead of the whole memory cards by simply sending the\\nfolder of the specific game. This method also allows easier backup of\\nthe save files and allows deletion of game saves without even going into\\nthe PS2 bios or the game. You even convert your older memory cards to a\\nfolder using the built-in convert feature!\\n\\nAnother neat advantage is that it provides unlimited storage capacity\\nfor save files as games will only see their own saves and the rest of\\nthe perceived 8MB memory card as free space. This allows you to create\\nas many saves as would fit onto a whole empty memory card in a single\\ngame, without concerns about leaving enough space for other games or\\never running into the problem where you start a new game and only later\\nrealize you don\'t have enough free space on the memory card to save,\\nand without the incompatibility issues of emulating bigger third party\\nmemory cards.\\n\\n> Note: This feature is purely optional and can be disabled in the Memory Card Manager.\\n\\n\\n## New Feature - EE Overclock\\n- by [ssakash](https://github.com/ssakash) and [Blyss Sarania](https://github.com/Sarania)\\n\\n<Image cols={6} src={require(\\"./img/EEoc_s.webp\\").default} />\\n\\nYou can now manipulate the EE Cyclerate to overclock and underclock the\\n_Emotion Engine\'s_ R5900 Core CPU clock\\nspeed, The negative values on the slider allow you to reduce the clock\\nspeed and conversely the positive values effectively increase the\\nclockspeed.\\n\\nTake a look at the following comparison video to understand the impact\\nof the EE overclock feature.\\n\\n\\n\\n\\n## Recompiler Improvements and Core Refactors\\n- by [Refraction](https://github.com/refractionpcsx2), [ssakash](https://github.com/ssakash) and [Gregory](https://github.com/gregory38)\\n\\n\\n## GIF: Better Handling for Finish Interrupt request signal\\n- by [Refraction](https://github.com/refractionpcsx2)\\n\\nFixes issues on games like Indiecar Series 2005 where the previously\\nfired finish signals weren\'t cleared and it eventually lead to multiple\\nfires of Interrupt requests.\\n\\n## MicroVU: General Improvements\\n- by [ssakash](https://github.com/ssakash) and [Refraction](https://github.com/refractionpcsx2)\\n\\n<SliderCompare before={require(\\"./img/dothackbroken-s.webp\\").default} after={require(\\"./img/dothackfixed-s.webp\\").default} />\\n\\nThere were some rare flickering issues on games like Naruto ultimate\\nninja series and dot hack games at cases when some of the MAC Flag\\ninstances got incorrectly skipped with the mVU Flag Hack. which later\\ngot fixed due to proper detection of Register index status before the\\nFlag sets.\\n\\nAlso Proper Clamping with COP2 status as parameter was added to some of\\nthe VU upper OP codes to fix hangs on Superman - Shadow Of Apokolips and\\nproper jump targets were used to fix lots of texture corruptions and\\nspiky shadows on True Crime - New York City , DT Racer and DT Carnage.\\n\\n> Dev note: The XG Kick Instruction trigger has been reworked to delay cycles regardless of the status of MemVI parameter which later got removed since it was pretty much useless as there should always be a delay for XG Kick instructions.\\n\\n\\n## SIF: Limit/Mask transfer size to 1mb-16bytes\\n- by [Refraction](https://github.com/refractionpcsx2)\\n\\nGregory Horror Show enters playable state ! The issue was due to the\\ngame using a weird transfer from IOP to EE through SIF that has a size\\n\\n> 0x80000000 which was due to incorrect masking, causing a flag on the\\n\\ntop of the passed size to be mistaken as part of the size itself. Thanks\\nto jpd002 (Author of Play!) the suggestion to Limit / Mask the transfer\\nsize finally made the game to enter playable state.\\n\\n\\n\\n## VIF: Better handling of IRQ and MFIFO Timing improvements\\n- by [Refraction](https://github.com/refractionpcsx2)\\n\\nStuart Little 3 enters playable state. The issue was actually caused by\\na VIF interrupt firing on a \\"Wait for GS Paths\\" instruction before the\\nflushing was complete which caused the emulator to hang. The condition\\ncheck has been made a lot more stable now so such issues should never\\nhappen again.\\n\\nChessmaster was one of those games which has suffered timing issues for\\nquite a long time as it hangs even before reaching the menus. This was\\neventually changed as Refraction quickly fixed the issue by simulating\\nthe buffer filling time from scratch pad. Finally the game could now go\\npast the menus!\\n\\nA fix was made to the detection of invalid VIF Opcodes where the\\ninterrupt bit could be set on an invalid operation, causing Tarzan and\\nLooney Tunes Back In Action to hang unexpectedly, the condition has now\\nbeen updated to make sure this is less likely to happen.\\n\\n## EE Interpreter: Improved TLB miss exception handling\\n- by [Gregory](https://github.com/gregory38)\\n\\nThe Program Counter value would be saved into the EPC register\\n(Exception-Program Counter) whenever a TLB miss occurs and previously\\nthe program counter got incremented by 4 whenever a CPU exception was\\ntriggered. So instead of executing again the instruction after handling\\nof the miss, we executed the next one!\\n\\nThis was eventually fixed by fetching the program counter value before\\nthe increment and executing them in case of CPU exception.\\n\\n\\n## New Feature - Support for loading Gzip and CSO compressed ISO\'s\\n- by [Avih](https://github.com/avih) and [Unknown W.Brackets](https://github.com/unknownbrackets)\\n\\nPCSX2 can now directly load compresed ISO images, so you can save your\\nprecious HDD space! Here is a breakdown by Unknown Brackets himself:\\n\\nA few of the differences between CSOs and gzipped ISOs, with respect to\\nPCSX2, are:\\n\\n* CSOs have the index built in to the file, and don\'t require an extra\\nfile.\\n* CSOs compress fairly well, but lose a bit compared to gzipped ISOs.\\n* However, if you keep the index file, CSOs may often be smaller.\\n* In my tests, CSOs read faster in pcsx2 and use less memory than\\ngzipped ISOs. But this is a tiny part of overall emulation.\\n\\nFor a comparison on size using Final Fantasy 12 (US) as a random\\nexample:\\nCSO = 90.46% the size\\nISO gz w/ pigz = 90.17% (90.95% including index file)\\nISO gz w/ 7-zip = 89.49% (90.27% including index file)\\n\\nNote that 7-zip required significantly longer (around 8 times longer) to\\ncreate than the other two, but resulted in the best compression. It was\\n0.21% smaller than the CSO.\\n\\nAs far as tools, I of course recommend the tool I wrote. There are\\nothers, but I know maxcso supports >= 4GB ISO files, which some of the\\nothers don\'t.\\n\\nAdditionally, this will use all of your CPU cores to compress as\\noptimally and quickly as possible. For gzipped ISOs, there\'s pigz which\\nwill also do this, but many other tools will only use one CPU core.\\n\\nThat\'s about it. Play! (another PS2 emulator) also supports CSO files.\\nI don\'t think it supports gzipped ISOs.\\n\\n# GSDX\\n\\n## Programmable blending to reproduce GS blending unit output\\n- by [Gregory](https://github.com/gregory38)\\n\\nThe source of the issues on GPU blending unit is due to the fact that\\nthe raster operations pipeline (ROP) differ from the GS and the GPU\\nwhich means that the GPU ROP\'s don\'t support the equations which are\\nsupported by the GS ROP\'s and hence it leads to wrong blending which\\ncauses situations like horizontal black lines or missing effects on some\\ngames.\\n\\nHardware implementations are usually limited to only a subset of all\\npossible equations. A software implementation based on a CPU (such as a\\nshader) would be able to do any operation at the cost of performance.\\n\\nThe new option (Blending Unit Accuracy), which is an OpenGL renderer\\nexclusive, moves the computing of the ROP to the shader. This way it is\\nmore accurate but considerably slower. You can try different levels of\\nthe option \\"Blending Unit Accuracy\\" to check out the impact on the\\naccuracy and performance.\\n\\nHere are some screenshots showing the improvements :\\n\\n<SliderCompare before={require(\\"./img/noblend-s.jpg\\").default} after={require(\\"./img/blend-s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/RuleofRose-no-blend-s.jpg\\").default} after={require(\\"./img/RuleofRose-blending-s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/VP2-no-blend-s.jpg\\").default} after={require(\\"./img/VP2-blending-s.jpg\\").default} />\\n\\n## Improved CRTC output size handling\\n- by [ssakash](https://github.com/ssakash) and [.r5](https://github.com/rz5)\\n\\nThere were few rare cases on games running at NTSC video mode where the\\ndetected frame buffer height was too large and eventually caused the\\nwhole screen to have a weird format with unexpected bottom black bars on\\nthe screen. A few games which suffered similar issues are Skyrunner,\\nDevil may cry 3, Tribes: Aerial Assault. This eventually got fixed by\\nproper saturation limit for height in case of NTSC video mode.\\n\\nHere are some comparison screenshots showing before and after the fix :\\n\\n<SliderCompare before={require(\\"./img/Tribes_before_s.webp\\").default} after={require(\\"./img/Tribes_after_s.webp\\").default} />\\n\\n<SliderCompare before={require(\\"./img/DMC3_before_s.webp\\").default} after={require(\\"./img/DMC3_after_s.webp\\").default} />\\n\\n## Software renderer improvements\\n- by [Gabest](https://github.com/gabest11) and [Gregory](https://github.com/gregory38)\\n\\nSilent Hill outputs a nan in Q to emulate the flashlight - an\\nunsupported NaN (not a number) on the projection value (Q). Gregory\\nused an isnan test to find such instances and emulate the flash\\nlight effect. Gabest later decreased the speed impact by using\\ninlined ASM. Fixes Flash light effects on Silent Hill 3.\\n\\n<SliderCompare before={require(\\"./img/silent-hill3-broken-s.jpg\\").default} after={require(\\"./img/silent-hill3-fixed-s.jpg\\").default} />\\n\\nBetter texture size management in software mode, fixes Horsez and\\nStolen memory issue and also lowers memory usage in general.\\n\\nBetter handling of textures addressing outside the limits by\\nextending the cached texture size to the upper limits of the region\\nclamp values: Fixes Lupin the 3rd\\n\\n\\n## Accurate destination alpha testing\\n- by [Gregory](https://github.com/gregory38)\\n\\nBetter behavior to replicate one of the GS functions where the Graphics\\nSynthesizer can discard a pixel based on the destination output. In\\norder to emulate this function properly you need in-order RW texture.\\nUnfortunately standard GPU only has either an in-order RO texture or an\\nout-of-order RW texture, to circumvent around this limitation accurate\\ndate implements a two pass algorithm to implement the effect. The 1st\\npass searches the valid primitive ID and the 2nd pass will do the draw\\nbased on the previous pass.\\n\\n<SliderCompare before={require(\\"./img/persona3DATEwrong_s.webp\\").default} after={require(\\"./img/persona3DATEcorrect_s.webp\\").default} />\\n\\n## Improved read of depth / color\\n- by [Gregory](https://github.com/gregory38)\\n\\nA standard GPU has separate textures for the color and the depth\\ninformation. The GS doesn\'t enforce such separation between color/depth\\ninformation. So it is allowed to read depth as color or write color into\\ndepth. You could even write depth in the color render target. It is used\\nfor effects such as \\"depth of field\\". The new option \\"Hardware\\ndepth\\", which is an OpenGL renderer exclusive, allows to convert\\ndepth/color into color/depth respectively. Now you can enjoy accurate\\nreproduction of such effects. However these conversions require\\nadditional resources from your GPU which might gradually decrease\\nperformance in cost of accuracy.\\n\\n<SliderCompare before={require(\\"./img/suikodentacticshardwaredepthoff_s.webp\\").default} after={require(\\"./img/suikodentacticshardwaredepthon_s.webp\\").default} />\\n\\n# SPU2-X\\n## New Feature - Per channel volume adjustment\\n- by [gigaherz](https://github.com/gigaherz)\\n\\nA.K.A Room Correction. This feature is present in the control panel of\\nsome audio chips, but often enough, the settings that work well for the\\nsystem in general, don\'t match the settings that you prefer for\\nemulated games, due to the intrinsic differences of the emulated\\nmachine.\\n\\nIt does exactly what it sounds like: lets you adjust each output channel\\nindependently, to compensate for things such as distance of the speakers\\nto the chair, or to emphasize the vocals (center channel) or the\\nsurround sound (side/back channels) when the game\'s balance is not\\nfully to your liking.\\n\\nYou\'ll find the values hidden in the SPU2-X.INI file, under the MIXING\\nsection (VolumeAdjust series of keys). The values are in decibels, which\\nmeans writing 1 in one of the volumes will make the amplitude 10x\\nlarger, 2 will blow it up to 100x, and -1 will make it 1/10th of the\\noriginal. Smaller values in the range of -1 to 1 are recommended for\\ntesting, as it\'s easy to cause unwanted clipping in the output.\\n\\n\\n## Time Stretcher: Improvements to tempo adjustments\\n- by [Avih](https://github.com/avih)\\n\\nPreviously latency values higher than 200ms will make the stretcher\\nadjustments overshoot the target\\nequilibrium back and forth, in effect never stabilizing. This bug was\\nfixed by lowering the tempo adjustments to avoid potential overshoots on\\nbigger buffers.\\n\\nThe latency slider will now allow a minimum value of 15ms. Providing\\nchoices of choosing from values between 15 to 29ms on the slider.\\n\\n\\n# GUI\\n\\n## Configurable template on GSFrame titlebar\\n- by [Avih](https://github.com/avih)\\n\\nThere was some\\n[discussion](https://github.com/PCSX2/pcsx2/commit/abdb8266b66db9d8bb2be7284cc216d6fa004714)\\namong the users about the elements which should be displayed on the\\ntitle bar of the rendering window, some of them disagreed with the\\nplacement of the elements and suggested to replace them in different\\norder and have certain elements prioritized. While our users opinions\\nare respected, all of them had very different ideas and it was\\nimpossible to satisfy everyone. Hence a consensus was never reached.\\n\\nSo Avih decided to create a [general template\\nsystem](https://github.com/PCSX2/pcsx2/commit/9b988ee12d09e1b05e08b7264bdbe7fab15c1fc6)\\nto allow customization of the elements on the title bar. The following\\ntemplate is located in the [ inis_1.4.0/PCSX2_ui.ini\\n]{style=\\"font-weight: bold;\\"} file though lacks a user interface for\\neasier customization.\\n\\n\\n## Revamped Core and GSDX plugin dialogs\\n- by [Turtleli](https://github.com/turtleli), [Gregory](https://github.com/gregory38) and [ssakash](https://github.com/ssakash)\\n\\nThe Core and GSDX dialogs have undergone quite a deal of changes like\\nconverting the three-state checkboxes to a combobox, inclusion of\\ntooltips on GSDX dialogs and further simplification / categorization\\nwhich eventually lead to the Shader configuration dialog which includes\\nall the Shader based options. (Shade Boost , FXAA , TV Shader and\\nExternal shader )\\n\\non the core side, there was a recent WX update from 2.8 to 3.0 which\\neventually caused a few issues but all of them got fixed eventually by\\nour WX Expert [Turtleli](https://github.com/turtleli) and there has also\\nbeen support for DPI scaling added for all the dialogs. The Emulation\\nsettings dialog has also been changed slightly to be more consistent\\nwith the Linux GUI.\\n\\nHere is a preview of the old GSdx GUI and the new one:\\n\\n<ImageCompare left={require(\\"./img/gsdx-old.webp\\").default} right={require(\\"./img/gsdx-new.webp\\").default} />\\n\\nIn conclusion, the team would like to thank everyone who has contributed\\nwith their time, knowledge, opinion, code or otherwise for this release\\nto happen. It\'s too many people, from our forum, wiki, GIT, IRC and\\nthis is why PCSX2 has improved so much over this time. Thank you all for\\nsticking with us, discussing, debating, offering your opinion, your free\\ntime and your skills!"},{"id":"/2015/september-2015-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2015/september-2015-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/september-2015-progress-report/index.mdx","source":"@site/blog/2015/september-2015-progress-report/index.mdx","title":"September 2015 Progress Report","description":"Now its time to present this month\'s changes.","date":"2015-10-01T00:00:00.000Z","formattedDate":"October 1, 2015","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":5.11,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2015-10-01T00:00:00.000Z","description":"Now its time to present this month\'s changes.","draft":false,"tags":["progress-report"],"title":"September 2015 Progress Report"},"prevItem":{"title":"1.4.0 Released! - Year End Report","permalink":"/pcsx2-net-www/blog/2016/year-end-report-released-1-4-0"},"nextItem":{"title":"July-August 2015 Progress Report","permalink":"/pcsx2-net-www/blog/2015/july-august-2015-progress-report"}},"content":"\x3c!-- truncate --\x3e\\n\\n![](./img/progrepsept.jpg)\\n\\nDear PCSX2 followers,\\n\\nPlease find the new monthly report below. First things first - sorry for\\nthe delay. As you may know, our team is pretty small and two members\\nhave been out of action due to their real lives (Blyss and Gregory). The\\npast two months were full of activity but first of all I want to share\\nsome good news with you. Not one but two new developers joined the\\nproject. Please welcome Micove and Turtleli! We wish them thousands of\\ncommits\\n\\nThey have already done a damn good job at improving the project, well\\ndone guys!\\n\\nNow its time to present this month\'s changes.\\n\\n## Windows Visual Studio improvement\\n- by [Micove](https://github.com/micove) [Pistachioman](https://github.com/Pistachioman)\\n\\nWindows build management had become very disorganized recently, however\\nthat has been improved a good deal thanks to the following changes:\\n\\n-   In a gigantic PR started by Micove, Visual Studio 2012 support was\\ndropped and Visual Studio 2015 support was added. As a bonus some\\nbuild targets that weren\'t working for quite a while were fixed as\\nwell as the compilation issues with the newly released update 5 of\\nVisual Studio 2013. Maintaining the old versions was pretty tiresome\\nbut now we\'ve been relieved of that burden.\\n-   The version-specific Visual Studio solution and project files were\\nreplaced with a single set of multi-version files. This removed 30k\\nlines of code and it allows us to easily support new versions of\\nVisual Studio.\\n-   Sometimes builds failed to compile due to a strange environment\\nsetup. After hours of debugging the culprit was found - missing\\ndependencies and a header conflict.\\n\\n\\nRelevant commits and PRs:\\n[Visual Studio: Fixes for\\nCompilation](https://github.com/PCSX2/pcsx2/pull/773)\\n[Avoid potential header clash between DirectX\' and lilypad\'s\\nxinput.h](https://github.com/PCSX2/pcsx2/pull/786)\\n[Fix git version detection](https://github.com/PCSX2/pcsx2/pull/817)\\n[Visual Studio - Universal Solution\\nfile](https://github.com/PCSX2/pcsx2/pull/690)\\n[Remove Dependency and UAC info from the manifest\\nfile](https://github.com/PCSX2/pcsx2/commit/4a743ac2fbebc28e7b85edb0a4d6c17810445d52)\\n\\n\\n## Windows version detection\\n- by [Micove](https://github.com/micove)\\n\\nAfter the big improvement to the build system, Micove decided to fix the\\nbad detection of some Windows versions in the console log. It\'s very\\nuseful since it helps the community support new users on the forum. The\\nWindows version is now displayed correctly in the console log. There was\\nalso a fix related to displaying Windows XP Professional as Home and\\nvice versa.\\n\\nRelevant PR:\\n[Recognize Win 8, 8.1 and 10](https://github.com/PCSX2/pcsx2/pull/795)\\n\\n\\n\\n## GSdx GUI revamp\\n- by [Turtleli](https://github.com/turtleli), [ssakash](https://github.com/ssakash) and [gregory](https://github.com/gregory38)\\n\\nIn the meantime, Turtleli revamped the GSdx GUI with some help from\\nSsakash. Instead of a long complicated description, let\'s compare two\\nscreenshots of the GUI.\\n\\nBefore changes on the left, after changes on the right\\n\\n<SliderCompare before={require(\\"./img/gsdx-before-s.webp\\").default} after={require(\\"./img/gsdx-after-s.webp\\").default} />\\n\\n-   As you can see, the Anisotropic Filtering Checkbox was removed as it\\nwas redundant with the 1x state (called OFF now).\\n-   Most of the options now have a nice tooltip to describe them. It is\\nnot as complete as a full guide but it\'s handy to see the impact of\\nan option without 10 minutes of googling. Hovering the cursor over\\nan option will display some quick info about it.\\n-   CRC hack selection was moved from the hack section to the main\\npanel. The main reason is that that option was independent of the\\n\\"Enable HW hacks\\" checkbox.\\n-   Confusing 3 state checkboxes were replaced by much nicer comboboxes.\\n-   Various options are OpenGL or DirectX renderer specific. Those\\noptions will be hidden based on the renderer selection.\\n\\n\\nRelevant PRs:\\n[little changes on AF value\\nbehavior.](https://github.com/PCSX2/pcsx2/pull/754)\\n[Gsdx: gui changes](https://github.com/PCSX2/pcsx2/pull/791)\\n[GSDX: Rework Internal resolution function.\\n(windows)](https://github.com/PCSX2/pcsx2/pull/829/commits)\\n\\n\\n\\n## PCSX2: Revamped FPS counter\\n- by [avih](https://github.com/avih) and [ssakash](https://github.com/ssakash)\\n\\n**Old FPS Counter**\\n\\n<Image cols={6} src={require(\\"./img/fpsold.webp\\").default} />\\n\\n**New FPS Counter**\\n\\n<Image cols={6} src={require(\\"./img/fpsnew.webp\\").default} />\\n\\nThe new format is specifically aimed to create less confusion for the\\nusers who assumed the previous FPS value as the original In-game FPS.\\nThe new implementation replaces \\"FPS\\" with \\"Speed\\" along with a\\npercentage value with respect to the region based frame limit. The old\\nFPS value is stored at a parenthesis alongside the percentage value. (It\\nwould be useful for identifying NTSC/PAL variable rates and the older\\nvalue is still used for lots of benchmark by members)\\n\\nRelevant Commits:\\n\\n[PCSX2: Add Percentage Counter for\\nFPS](https://github.com/PCSX2/pcsx2/commit/304fc990a1d9ddb93e8f60e4ee365b582439c700)\\n[FixedInt - round instead of truncate on\\nconstruction](https://github.com/PCSX2/pcsx2/commit/d10bbb73f78379270a6a9f09f7c8b871075b89ef)\\n[GS window title: remove \\"align\\" space at fps\\nvalue](https://github.com/PCSX2/pcsx2/commit/ece9c7f2d257a56e5e3aa03e6985e2fcec64051e)\\n[Custom frame rate: improve message, respect also for\\nNTSC-progressive](https://github.com/PCSX2/pcsx2/commit/a6737b87fdf9214bc4bb544010f4533f5dd77069)\\n\\n## (Windows) Request the use of the high-performance graphics card on systems where multiple graphics processors are available (nVidia Optimus, AMD Hybrid Graphics)\\n- by [charliebruce](https://github.com/charliebruce)\\n\\nBefore this fix, PCSX2 would always use the default video adapter of\\nyour system which was usually an onboard graphics chip. This had a major\\nperformance impact since users were not aware they had to select their\\ndedicated graphics card in GSdx for PCSX2 to actually use it. It mainly\\naffected laptop users (Nvidia Optimus, AMD Hybrid). With this fix,\\nhopefully PCSX2 will be able to automatically select the dedicated\\ngraphics card with no user input\\n\\nRelevant PR:\\n[Improve nVidia Optimus and AMD PowerXpress\\ncompatibility](https://github.com/PCSX2/pcsx2/pull/767)\\n\\n\\n## (Windows) Lilypad: Fix Local Volume control checkbox behavior\\n- by [ssakash](https://github.com/ssakash)\\n\\nA bug was fixed where the local volume control feature would always be\\nenabled if the user used the Lilypad config dialog, even if the\\ncorresponding checkbox was unchecked.\\n\\nRelevant PR:\\n[Lilypad: Fix Local Volume control CB function and few other\\nstuff](https://github.com/PCSX2/pcsx2/pull/781)\\n\\n\\n## (Windows) Third-party libraries updates\\n- by [Micove](https://github.com/micove)\\n\\nMicove performed a much needed update to (most) of the third-party\\nlibraries that PCSX2 is using. Some of them were over 2 years old! The\\nlibraries that were updated are as follows: bzip to bzip2, zlib,\\nSoundTouch and the OpenGL extensions header file (glext).\\n\\nRelevant commit:\\n[Update 3rdparty](https://github.com/PCSX2/pcsx2/pull/790)\\n\\nFinally comes a very important note. The next progress report will\\nlikely be delayed until around the end of the year. Why, you ask? Our\\nteam is quite small as a lot of you know and we are currently working on\\nreleasing a new stable build! Because of that we decided it would be\\nbest to consolidate our efforts on that in order to get it done as soon\\nas possible. So look forward to that, it\'s definitely exciting!"},{"id":"/2015/july-august-2015-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2015/july-august-2015-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/july-august-2015-progress-report/index.mdx","source":"@site/blog/2015/july-august-2015-progress-report/index.mdx","title":"July-August 2015 Progress Report","description":"Hello everyone! Welcome to PCSX2\'s July-August 2015 progress report!","date":"2015-08-17T00:00:00.000Z","formattedDate":"August 17, 2015","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":8.47,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2015-08-17T00:00:00.000Z","description":"Hello everyone! Welcome to PCSX2\'s July-August 2015 progress report!","draft":false,"tags":["progress-report"],"title":"July-August 2015 Progress Report"},"prevItem":{"title":"September 2015 Progress Report","permalink":"/pcsx2-net-www/blog/2015/september-2015-progress-report"},"nextItem":{"title":"June 2015 Progress Report","permalink":"/pcsx2-net-www/blog/2015/june-2015-progress-report"}},"content":"\x3c!-- truncate --\x3e\\n\\n![](./img/7-8-2015-logo.jpg)\\n\\n\\nHello everyone! Welcome to PCSX2\'s July-August 2015 progress report!\\nSince we were late again we\'ll include the first half of August in this report as well. So sit\\nback, buckle up and hold on as we go over the changes that happened in\\nthe months of July and August! First we will go over some more magic in\\nthe realm of GSdx.\\n\\nThis was given a brief mention last month, but I wanted to go over it in\\na little more detail because it is so important. Along with all the\\nchanges you\'ve read about in GSdx lately (if you\'ve been following our\\nreports), [GSdx was bumped to version\\n1.0](https://github.com/PCSX2/pcsx2/pull/628) . In the OpenGL backend\\nthis negated the need for many game specific hacks. The hacks are still\\npresent however, as they are still needed for the Direct3D backends.\\nOnce someone ports some of the new changes over to Direct3D they will be\\nable to be removed entirely. The hacks in question skip many different\\ntypes of effects that were broken until Gregory worked his magic things\\nlike fog, shadows, special shading, brightness, coloring and so on. With\\nthe new accurate options, not only are those hacks no longer needed but\\nthe effects in question now render correctly. You can take a look back\\nat our two previous reports for some screenshot examples of that. I\'d\\nlike to give a big shout out to Gregory for his massive improvements to\\nGSdx lately. It was very recently that the OpenGL backend was far\\ninferior to the Direct3D ones, but that isn\'t the case anymore. The\\naccuracy of GSdx OpenGL has improved by leaps and bounds lately and it\\nis now far more accurate than the Direct3D backends.\\n\\nIn more exciting news, the creator of GSdx,\\n[Gabest](https://github.com/gabest11) has showed up once more and\\nalready begun fixing bugs or speeding up things, we hope he\'ll stick\\naround more this time. Welcome back!\\n\\nSpeaking of that, there were a few more improvements in July/August so\\nlets take a look at those!\\n\\n# GSdx\\n\\n## Blending unit accuracy options\\n- by [ssakash](https://github.com/ssakash) & [Gregory](https://github.com/gregory38)\\n\\nWith the added accurate options in the OpenGL renderer, we had to group\\nand clarify them in the GUI. A new dropdown was added with 6 accurate\\nblending options from None to Ultra (note that Full and Ultra have\\ninsane CPU requirements!), so our users can choose which to use\\ndepending on the game and the power of their PCs\\n\\n\\nRelevant commit:\\n[Gsdx-gui: Accurate blending unit for\\nWindows](https://github.com/PCSX2/pcsx2/commit/68833e10d142734d5bccad6f5b71a32e84a83a76)\\n\\n------------------------------------------------------------------------\\n\\n\\n## Implement an ultra accurate blending feature in high accurate blending with a small performance hit\\n- by [Gregory](https://github.com/gregory38)\\n\\nSome users noticed that the ultra accurate blending mode was needed to\\nproperly emulate the distance fog in God of War but it was really too\\nslow (and never meant to be used anyway). After debugging, it was found\\nthat God of War uses a blending with the alpha of the destination to\\nemulate the fog. Very few draw calls use the alpha of the destination so\\nthey are now incorporated in the high accurate blending level with a\\nsmall performance hit.\\n\\nRelevant commit:\\n[Gsdx-ogl: extend cclip blending level with destination alpha\\nblending](https://github.com/PCSX2/pcsx2/commit/a0edcb58af8c725ef778ac343c9c72ebb8040217)\\n\\n------------------------------------------------------------------------\\n\\n\\n## HDR colclip\\n- by [Gregory](https://github.com/gregory38)\\n\\nHDR (AKA High Dynamic range rendering) is useful for calculations done\\non a larger dynamic range, which is more accurate to be used on these\\nscenarios since the PS2 also made use of HDR rendering. HDR allows to\\nrepresent a wider range of colors so the shading algorithms have\\naccurate color information for all the objects which is quite useful\\nsince it\'s needed for accurate reproduction of some lightning and bloom\\neffects.\\n\\nNote: Dynamic range is the ratio between the smallest and largest signal\\nvalues.\\n\\nThe previously discussed accurate blending algorithm has been made a lot\\nmore efficient by replacing it with a new high dynamic range rendering\\nbased algorithm.\\n\\nLet\'s take a look at the improvements made on the algorithm by comparing\\nit to the GS in a scenario of blending two fragments of color 20 and 255\\non a target of color 250. Notice that the new algorithm gives us the\\nresult using 2 passes, that\'s why it is also more CPU demanding than the\\nold code.\\n\\n|  **Formula**  |   **Equation**   | **Result** |\\n|:-------------:|:----------------:|:----------:|\\n| (Cd+Cs) % 256 | (250 + 20) % 256 |     14     |\\n| (Cd+Cs) % 256 | (14 + 255) % 256 |     13     |\\n\\n> Graphics Synthesizer\\n\\n|            **Formula**             |   **Equation**    |       **Result**       |\\n|:----------------------------------:|:-----------------:|:----------------------:|\\n|     for Cs &lt; 128 : Cd + Cs      |    (250 + 20)     | 255 (saturated result) |\\n| for Cs &gt; 128 : Cd - (256 - CS ) | (255 - (256-255)) |          254           |\\n\\n> Older Algorithmn (Direct3D)\\n\\n\\nWhere the old algorithm would only work in cases of no overflow of\\noperations, the new one will be even better since the first pass could\\ngo beyond the minimum and maximum limits. (no overflow)\\n\\n|      **Formula**       |    **Equation Pass 1**    | **Equation Pass 2** | **Result** |\\n|:----------------------:|:-------------------------:|:-------------------:|:----------:|\\n| Cd + Cs =&gt; Cd % 256 |     250+20 =&gt; 270      |      270 % 256      |     14     |\\n| Cd + Cs =&gt; Cd % 256 | 14+255 (pass 1) =&gt; 269 |      269 % 256      |     13     |\\n\\n> New HDR based algorithm\\n\\nAs you can see, the new HDR based algorithm produces accurate results\\ncompared to the GS in comparison to the older algorithm.\\n\\nCheck out the fog like effects in God of War 1 which are now emulated\\ncorrectly in OpenGL with blending accuracy set to high:\\n\\n<SliderCompare before={require(\\"./img/gow1-hdr-broken1-s.jpg\\").default} after={require(\\"./img/gow1-hdr-fixed1-s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/gow1-hdr-broken2-s.jpg\\").default} after={require(\\"./img/gow1-hdr-fixed2-s.jpg\\").default} />\\n\\nRelevant PR:\\n[Hdr colclip](https://github.com/PCSX2/pcsx2/pull/688)\\n\\n------------------------------------------------------------------------\\n\\n\\n## Software renderer fixes\\n- by [Gregory](https://github.com/gregory38) & [Gabest](https://github.com/gabest11)\\n\\n-   Silent Hill outputs a nan in Q to emulate the flashlight - an\\nunsupported NaN (not a number) on the projection value (Q). The\\nissue was fixed by Gregory using an isnan test to find out when this\\nis used. Gabest pitched in and decreased the speed impact by using\\ninlined ASM. Fixes the long standing Silent Hill 3 flashlight effect\\nissue.\\n-   Wrong data mask for DATE operation on pseudo 16 bits RT: Fixes\\nshadow colors on Haunting Ground\\n-   Fix texture addressing outside the limits (only for OCL and SW\\nmode), done by extending the cached texture size to the upper limits\\nof the region clamp values: Fixes Lupin the 3rd\\n-   Texture size reduction: Fixes Horzes, Stolen and likely all games\\nthat generate an out-of-memory error.\\n\\nHaunting Ground shadow coloring is now fixed under the OpenGL software\\nrenderer:\\n\\n<SliderCompare before={require(\\"./img/haunting-ground-broken-s.jpg\\").default} after={require(\\"./img/haunting-ground-fixed-s.jpg\\").default} />\\n\\nSilent Hill 3 flashlight working properly under the OpenGL software\\nrenderer:\\n\\n<SliderCompare before={require(\\"./img/silent-hill3-broken-s.jpg\\").default} after={require(\\"./img/silent-hill3-fixed-s.jpg\\").default} />\\n\\nRelevant commits:\\n[Gsdx: simplified isnan test, it compiles to an inline sse instruction\\nand a flag test, silent hill dump still looks\\nfine.](https://github.com/PCSX2/pcsx2/commit/85117ecbddc50b4fcb36293559ddfbdfa73f1f00)\\n[Gsdx-Ogl: rare corner case when both texture shuffle and date are\\nenabled](https://github.com/PCSX2/pcsx2/commit/744f9ebc097982e5dd6387e8e02826ecf9335452)\\n[Lupin 3 fix, texture addressing outside the limits, only for sw and\\nopencl\\nyet](https://github.com/PCSX2/pcsx2/commit/42f51591df66c3b82d353dc6bb6aad7e14d1127d)\\n[Gsdx: texture size reduction in sw mode, fixes Stolen, less memory\\nusage in\\ngeneral](https://github.com/PCSX2/pcsx2/commit/49b3acea72a4c2a37811a4616cb2d940355b6952)\\n\\n------------------------------------------------------------------------\\n\\n\\n## GSdx: Post-processing updates\\n- by [Asmodean](https://github.com/Asmodean-)\\n\\nOur resident post processing effect guru Asmodean made his comeback,\\nproviding a new version of his awesome effects suite for GSdx and fixing\\nits compatibility with the new and improved OpenGL renderer. Changelog\\nis\\n[here](http://forums.pcsx2.net/Thread-Custom-Shaders-for-GSdx?pid=441430#pid441430)\\n.\\n\\nRelevant PR:\\n[GSdx: Post-processing\\nupdates](https://github.com/PCSX2/pcsx2/pull/739)\\n\\n\\n# New feature:\\n\\n## Folder memory cards\\n- by [AdmiralCurtiss](https://github.com/AdmiralCurtiss)\\n\\nThis huge PR was finally merged after much debate, testing and\\nimprovements! The new system basically bypasses the traditional 8mb\\nmemory card file system and creates a folder, where each game freely\\ncreates its save files without the 8mb file limitation.\\nThis means that users can switch to this system and:\\n\\n-   Never worry again about their memcards getting filled and having to\\nuse many different files\\n-   Easily share single game saves instead of whole memory cards by\\nsimply zipping the folder of the game\\n-   Easily backup and delete game saves without going into the PS2 bios\\nor running the game\\n-   Convert your old memory cards to a folder using the built-in convert\\nfeature\\n\\nAdmiralCurtiss quickly nailed out some bugs that emerged after the\\nmerge, making this feature pretty much stable and safe for everyday\\nusage. Hopefully we will be able to extend this feature to even\\nautomatically convert GameFAQ saves (.cbs, .max etc) and use them\\nwithout much hassle\\n\\nA big thanks to him for putting up with our worries about the new system\\nand the hard work he put into this! You can use the new feature from the\\nmemory card configuration, create a new memory card and select Folder\\n(experimental). The convert feature is also in the memory card menu\\n\\n<Image cols={6} src={require(\\"./img/folder-memcards-s.jpg\\").default} />\\n\\nRelevant PR: [Memory Card as folder instead of a big raw\\nfile](https://github.com/PCSX2/pcsx2/pull/359%2026%20Nov%202014)\\n\\n\\n# GUI:\\n\\n## Upgrade to wxWidgets 3 for Windows-GUI fixes\\n- by [turtleli](https://github.com/turtleli) & [micove](https://github.com/micove)\\n\\nPCSX2 has been using wxWidgets for its GUI since Jake Stine\'s redesign\\nsome years back, which was then at version 2.8. Since then, wxWidgets\\nhas been updated to version 3 (on November 2013!) but no active\\ndeveloper dared to attempt an update due to various customizations done\\nby Jake. Until recently that is! Gregory started by updating the Linux\\nside of PCSX2 to the new version and turteli made it happen for Windows\\ntoo. The few bugs that emerged got quickly squashed by turteli and\\nmicove\\n\\nRelevant PR and commits:\\n[Windows: switch to wxWidgets\\n3.0](https://github.com/PCSX2/pcsx2/pull/657)\\n[Fix Unicode issues in SPU2-X with\\nPortAudio.](https://github.com/PCSX2/pcsx2/commit/0e533e1630a0bd34619a0b57f8d162455b96a056)\\n[wxWidgets 3.0 fixes](https://github.com/PCSX2/pcsx2/pull/741)\\n\\n\\n# Onepad (Linux):\\n\\n## Dual Shock 3 support for OnePad in Linux\\n- [JasonBrownDeveloper](https://github.com/JasonBrownDeveloper)\\n\\nA long standing issue with DS3 controller axis detection in Linux\\nprevented people from using them with the OnePad plugin, but no longer\\nthanks to JasonBrownDeveloper\\n\\nRelevant PR: [Minimum code needed to get Dualshock 3 working with onepad\\non recent linux and evdev\\nreleases](https://github.com/PCSX2/pcsx2/pull/667)\\n\\nThanks to all the GIT contributions during these 1,5 months and to all\\nthe active testers who encourage development to continue! The next\\nprogress report will probably come at the end of September since\\nvacations will happen and we\'re never on time anyway!"},{"id":"/2015/june-2015-progress-report","metadata":{"permalink":"/pcsx2-net-www/blog/2015/june-2015-progress-report","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/june-2015-progress-report/index.mdx","source":"@site/blog/2015/june-2015-progress-report/index.mdx","title":"June 2015 Progress Report","description":"As promised in last month\'s update, welcome to PCSX2\'s very first monthly progress report!","date":"2015-07-26T00:00:00.000Z","formattedDate":"July 26, 2015","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":8.085,"hasTruncateMarker":true,"authors":[{"name":"Blyss Sarania","url":"https://github.com/Sarania","imageURL":"https://github.com/Sarania.png","key":"blyss sarania"}],"frontMatter":{"authors":["blyss sarania"],"date":"2015-07-26T00:00:00.000Z","description":"As promised in last month\'s update, welcome to PCSX2\'s very first monthly progress report!","draft":false,"tags":["progress-report"],"title":"June 2015 Progress Report"},"prevItem":{"title":"July-August 2015 Progress Report","permalink":"/pcsx2-net-www/blog/2015/july-august-2015-progress-report"},"nextItem":{"title":"Major Gsdx Progress And Monthly Progress Reports!","permalink":"/pcsx2-net-www/blog/2015/major-gsdx-progress-and-monthly-progress-reports"}},"content":"\x3c!-- truncate --\x3e\\n\\n![](./img/6-2015-logo.jpg)\\n\\n\\nAs promised in last month\'s update, welcome to PCSX2\'s very first\\nmonthly progress report! Sorry that it\'s a bit later than I had said -\\ntotally my fault! Let\'s start things off with a bang, shall we? A\\nquestion that often gets asked on the forum to a surprising degree is a\\nvariation of the following: How can I get XYZ Snowblind engine game\\nworking in hardware mode? the answer up until very recently was You\\ncan\'t, use software mode and expect it to be ridiculously demanding. For\\nthose of you unfamiliar with it, the Snowblind engine was used for games\\nlike Baldur\'s Gate: Dark Alliance, Champions of Norrath, Champions:\\nReturn to Arms, and a few miscellaneous others. The Snowblind engine\\ndoes some pretty crazy stuff on the PS2, like using 2x Super Sample Anti\\nAliasing! Because of that, it\'s very demanding and even ultra powerful\\nrigs would have issues running these games in software mode. Running\\nthem in hardware mode would result in only half the screen being visible\\nbecause of the way the engine achieves the 2x SSAA.\\n\\n## GSdx: Hardware rendering Snowblind Game fix\\n- by [Gregory](https://github.com/gregory38) & [Refraction](https://github.com/refractionpcsx2)\\n\\nHowever the situation has changed drastically thanks to Gregory.\\nSnowblind engine games are now supported in hardware mode! Now these\\npopular games can be enjoyed in HD resolutions and without owning a\\nsuper computer! It is important to note however that they are still\\nrelatively demanding, just not quite as much as before.\\n\\nAside from that, June has once again seen a host of GSdx improvements!\\nMost of these improvements have been on the accuracy side of things this\\ntime, with Gregory taking on the GS and Refraction taking on the VU.\\nThere is quite a lot to cover, so let\'s get started!\\n\\n## GSdx: Usage of programmable blending instead of fixed blending\\n- by [Gregory](https://github.com/gregory38)\\n\\nTo understand the following issues and their solutions, you must\\nunderstand the difference between Fixed function and Shader based\\nfunction.\\n\\nWith Fixed function programming, as the name suggests, the functionality\\nis fixed and hence it\'s not very flexible to work with when trying to\\nemulate the GS, which is not at all similar to a normal GPU.\\n\\nHere\'s an example comparing clamping behavior of a normal GPU and the\\nGS:\\n\\nChannel colors are coded in the 0-255 luminance range. There are four\\nchannels - red, green, blue, alpha. Also it\'s important to remember that\\nthe output of the blending unit can be out of the valid range. Normally\\nthis is no problem - a GPU will clamp it. But things get a little\\ndifferent in the case of the GS which also wraps it.\\n\\n\\n\\n\\n| **Blending unit (Output)** | **Result** |\\n| :------------------------: | :--------: |\\n|            -10             |     0      |\\n|            300             |    255     |\\n\\n> Standard GPU\\n\\n| **Blending unit (Output)** | **Result** |\\n| :------------------------: | :--------: |\\n|            -10             |    246     |\\n|            300             |     44     |\\n\\n> Graphics Synthesizer\\n\\n\\nIn order to remedy this discrepancy between GS and standard GPU behavior\\nwe are using a shader that emulates the blending in a proper way with\\nrespect to the GS, instead of the fixed function unit of the GPU.\\nHowever, wrapping is only one difference between the GS and GPU - there\\nare still a lot more differences. Here is a graphical breakdown of the\\ndifference between the GS and a GPU in this regard:\\n\\n**Note:** Standard GPU behavior is a bit more complex, the diagram is\\nonly made to showcase how PCSX2 deals with some of the differences\\nbetween the GS and a GPU.\\n\\n<Image cols={6} src={require(\\"./img/gpu-gs-chart_s.webp\\").default} />\\n\\n<Image cols={6} src={require(\\"./img/gpu-gs-chart2_s.webp\\").default} />\\n\\nSince we have already seen examples of accurate blending in our previous\\ndeveloper blogs and accurate color clipping was explained just now, all\\nthat\'s left is the accurate framebuffer mask.\\n\\nThe standard GPU blending unit allows masking the shader output only\\nchannel by channel. The problem is that as the image shows, the GS can\\ndo it bit by bit. Yes, that means it\'s possible to write only the most\\nsignificant bit of the channel on the GS. Again this issue can be solved\\nby using a shader to emulate this feature instead of doing it on the\\nfixed function unit of the GPU. Accurate frame buffer mask is just a\\nfeature for handling bit masking instead of channel masking. It\'s\\nimportant to note that the new features which use shaders in place of\\nthe fixed function unit do so at the expense of some speed. High end\\nmachines should have no problems, but people with weaker machines may\\nexperience some slowdown when using a lot of the accurate options.\\n\\nNow let\'s take a look at how some of the games look with a shader that\\nproperly emulates blending \\\\[Accurate options enabled\\\\] compared to\\nnormal GPU Blending \\\\[Accurate options disabled\\\\].\\n\\n<SliderCompare before={require(\\"./img/fbmask_broken_s.jpg\\").default} after={require(\\"./img/fbmask_fixed_s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/castlevania_broken_s.jpg\\").default} after={require(\\"./img/castlevania_fixed_s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/moh_broken_s.jpg\\").default} after={require(\\"./img/moh_fixed_s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/nemo_broken_s.jpg\\").default} after={require(\\"./img/nemo_fixed_s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/fifa_street_broken_s.jpg\\").default} after={require(\\"./img/fifa_street_fixed_s.jpg\\").default} />\\n\\n<SliderCompare before={require(\\"./img/hulk_broken_s.jpg\\").default} after={require(\\"./img/hulk_fixed_s.jpg\\").default} />\\n\\nLastly, it should be noted that accurate date isn\'t the same as the\\nother accurate options. Accurate date implements an even more accurate\\nalgorithm to compute GS destination alpha testing.\\n\\nThe only drawback of the current situation is that there are lots of\\nsettings for the user to tweak in order to check which accurate option\\nhelps with which game. This will be changing in the future, since\\nGregory is currently working on a branch merging all the separate\\noptions into a single one called \\"Blending Unit Accuracy\\" with different\\nmodes with respect to it\'s accuracy and impact on performance.\\n\\n\\n## Log message and Title bar for showcasing Renderer change\\n- by [Turtleli](https://github.com/turtleli) & [ssakash](https://github.com/ssakash)\\n\\n<Image cols={6} src={require(\\"./img/gsdx_renderer_displ.webp\\").default} />\\n\\n<Image cols={6} src={require(\\"./img/gsdx_console_displ.webp\\").default} />\\n\\n\\nThe following feature had been requested a few times but was very low\\npriority, since the setting could easily be identified by taking a look\\nat the *GSdx Plugin settings*.\\nBut this wasn\'t actually as simple a case as it could have been. There\\nis a Shortcut key (F9) for toggling the mode of a specific renderer from\\nsoftware to hardware mode. Using said shortcut key and changing the\\nrenderer in the plugin settings can lead to a lot of confusion and\\nkeeping track of what\'s what can get messy. Because of that the title\\nbar status was added by Turtleli and the console message was added by\\nssakash.\\n\\nRelevant PR:\\n\\n-   [TitleBar](https://github.com/PCSX2/pcsx2/pull/606)\\n-   [Console Message](https://github.com/PCSX2/pcsx2/pull/617)\\n\\n\\n\\n## Stuart Little 3: VIF-MFIFO Stall Issue & Dev9ghz: Unique MAC\\n- by [Refraction](https://github.com/refractionpcsx2)\\n\\nThis issue was a regression which happened sometime between 1.0.0 and\\n1.2.1. The issue was quickly fixed by Refraction.\\n\\nThe issue was actually caused by a VIF interrupt firing on a \\"Wait for\\nGS Paths\\" instruction before the flushing was complete which caused the\\nemulator to hang. The condition check has been made a lot more stable\\nnow so such issues should never happen again.\\n\\nIn some unrelated work, there was an issue while using the Dev9ghz\\nplugin where users were being kicked from online servers because of\\nhaving similar MAC address. This was fixed by generating a unique MAC\\nbased on the host\'s MAC address.\\n\\nRelevant commit:\\n\\n-   [VIF-MFIFO: Fix for stalls on wait instructions, fixes Stuart Little\\n3](https://github.com/PCSX2/pcsx2/commit/c753f0d206d0da7a59d4bd771fffc52fbd0a6d94)\\n-   [dev9ghzdrk: Make the MAC truely\\nunique](https://github.com/PCSX2/pcsx2/commit/819133ee45834548bd5e4f248c0234584cb0ebb5)\\n\\n\\n## Dev9ghz: Improvement in Log file handling\\n- by [TheLastRar](https://github.com/TheLastRar)\\n\\nPreviously the Dev9ghz plugin used the system registry for saving\\nsettings. This has now been replaced by usage of an .ini file like all\\nthe modern plugins. Furthermore, the plugin looks in the registry for\\nold settings and if it finds them, they are imported into an .ini file\\nand then deleted from the registry.\\n\\nThere were also instances of crashing when the ethernet adapter was not\\nselected, this was fixed by TheLastRar by using a conditional\\nstatement.\\n\\nRelevant PR:\\n\\n-   [Fix Ethernet adapter\\ncrash](https://github.com/PCSX2/pcsx2/pull/654) .\\n-   [INI files for saving\\nsettings](https://github.com/PCSX2/pcsx2/pull/607) .\\n\\n\\n## Custom Patches to fix game crashes/hangs\\n- by [prafull](http://forums.pcsx2.net/User-prafull)\\n\\nThe number of PS2 games playable with PCSX2 has vastly increased over\\nthe years but there are still some games which crash/hang at the Intro\\nscenes/Menus/Ingame and as a result are considered \\"Unplayable\\" in the\\ngame database. Accurate debugging to find the conflict takes time, but\\nof course developers intend to fix them properly in the future. In the\\nmean time some of these unplayable games are now playable in PCSX2 using\\ncustom patches. Such a custom patch might not seem like an ideal\\nsolution from a developer\'s perspective, but it will surely be good news\\nfor users who were waiting to play these games.\\n\\nGames that have become playable with patches this month include:\\n\\n-   Spongebob Squarepants - The Movie\\n-   Neo Contra\\n-   World Rally Championship 3\\n-   The Incredibles\\n-   The Incredibles - Rise of the Underminer\\n-   Dead or Alive 2 Hardcore\\n-   NHL 2K8\\n\\n\\nThese new patches have been merged into the GameDB so that every user\\ncan make use of them by enabling \\"Automatic Gamefixes\\" option when\\nplaying the game. This option is enabled by default. The patch is\\napplied by matching the game\'s serial with the list present in our\\ndatabase. Thanks to Prafull for spending countless of nights fixing\\nthese games. You can check the progress on the patches\\n[here](http://forums.pcsx2.net/Thread-Fixing-unplayable-games).\\n\\nLastly, a brief mention of something exciting. Along with these changes,\\nGSdx was bumped to version 1.0. On the OGL side of things, this negated\\nthe need for a lot of game specific hacks. Once someone ports those\\nchanges to the DX backend, those hacks can be removed entirely! Exciting\\nstuff!\\n\\nThanks to all the GIT contributions during the month of June and to all\\nthe active testers who encourage development to continue!"},{"id":"/2015/major-gsdx-progress-and-monthly-progress-reports","metadata":{"permalink":"/pcsx2-net-www/blog/2015/major-gsdx-progress-and-monthly-progress-reports","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/major-gsdx-progress-and-monthly-progress-reports/index.mdx","source":"@site/blog/2015/major-gsdx-progress-and-monthly-progress-reports/index.mdx","title":"Major Gsdx Progress And Monthly Progress Reports!","description":"Hello everyone! I know our news updates have been few and far between as of late, but that\'s going to change starting now!","date":"2015-06-11T00:00:00.000Z","formattedDate":"June 11, 2015","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":7.705,"hasTruncateMarker":true,"authors":[{"name":"Blyss Sarania","url":"https://github.com/Sarania","imageURL":"https://github.com/Sarania.png","key":"blyss sarania"}],"frontMatter":{"authors":["blyss sarania"],"date":"2015-06-11T00:00:00.000Z","description":"Hello everyone! I know our news updates have been few and far between as of late, but that\'s going to change starting now!","draft":false,"tags":["progress-report"],"title":"Major Gsdx Progress And Monthly Progress Reports!"},"prevItem":{"title":"June 2015 Progress Report","permalink":"/pcsx2-net-www/blog/2015/june-2015-progress-report"},"nextItem":{"title":"Explanation Impossible Blend","permalink":"/pcsx2-net-www/blog/2015/explanation-impossible-blend"}},"content":"Hello everyone! I know our news updates have been few and far between as\\nof late, but that\'s going to change starting now! Several really nice\\nnew features have been added by GSdx master Gregory lately. He has been\\nworking at breakneck pace and making amazing progress. This update will\\ncover those as well as a few notable improvements by some of the other\\ndevs and some changes to how we are doing things going forward. The most\\nvisible of those changes for you guys is that we will now be writing\\nmonthly progress reports! Sometime around the end of each\\nmonth/beginning of the next we will be posting a news update which\\ncovers all the major changes that have taken place during that month.\\nFor now, let\'s take a look at what has been happening in the world of\\nPCSX2 since the last update!\\n\\n\x3c!-- truncate --\x3e\\n\\nThe first and most noticeable changes are a couple of new GSdx hardware\\nhacks Align sprite and Round sprite. Yes, hacks are generally not the\\nbest way to accomplish things in an emulator. However, the problems that\\nthese hacks solve were not solvable in any other way. PS2 games were\\nnever meant to be upscaled and because of that when we do several\\nproblems occur in many games. Some of these problems are unavoidable and\\nrequire workarounds to fix.\\n\\nThe first one that we will take a look at is the Align sprite hack. For\\nyears, anyone who has played certain Namco games in PCSX2 was stuck\\neither using native resolution or using very specific X resolutions, the\\nlargest being 1200. The reason was that if you upscaled in any other way\\nyou would end up with these nasty black vertical lines in the image. The\\nreasons behind that are complicated, but can be summed up by saying It\'s\\nsimply the result of how the game engine does things. However, thanks to\\nGregory we don\'t have to deal with this issue any more! Now games like\\nSoul Calibur II and III, Tekken, and Ace Combat can be upscaled as much\\nas you want without issues. Simply enable the Align sprite hack in GSdx\\nhardware hacks and voil! No more black lines! Games known to be\\ncorrected by it include:\\n\\n- Tekken series\\n- Soul Calibur series\\n- Street Fighter\\n- Death by Degrees\\n- Ace Combat series\\n\\nHere is a screenshot comparison showing Tekken 5:\\n\\nWithout/Without Align Sprite:\\n\\n<ImageCompare left={require(\\"./img/Tekken-5-Without-Align-Hack_s.webp\\").default} right={require(\\"./img/Tekken-5-With-Align-Hack_s.webp\\").default} />\\n\\nThe second hack is the Round sprite hack. As above, this hack solves an\\nupscaling problem that was not solvable in any other way. In many games\\nthat use a lot of sprites, upscaling produces noticeable glitches in the\\nsprites. A very good example of that is the character portraits in Artonelico games. Before, when you upscaled you would wind up with little\\nboxes around the characters faces. Many other games would have lines or\\nother errors in their sprites when at any resolution aside from native.\\nThis again comes down to the fact that PS2 games were never meant to be\\nupscaled. However, Gregory was up to the task and very quickly produced\\nthe Round sprite hack which solves all of these problems. If you have a\\ngame with many sprites and those sprites have issues with upscaling then\\nit\'s very likely the Round sprite hack will solve that for you. Games\\nknown to be corrected by it include:\\n\\n- Artonelico series\\n- Atelier series\\n- Ace Combat Series\\n\\nHere is a comparison screenshot showing Artonelico - Melody of Elemia:\\n\\nWithout/Without Round Sprite:\\n\\n<ImageCompare left={require(\\"./img/ATon-no-round-sprite_s.jpg\\").default} right={require(\\"./img/ATon-round-sprite_s.jpg\\").default} />\\n\\nFor an in depth explanation of both of these new hacks, please read the\\ndeveloper blog post\\n[here](/blog/2015/explanation-hacks-needed-for-upscaling-glitches/).\\n\\nNow we come to something that is not a hack. Many of you who played\\ncertain games have encountered an error in the log such as Impossible\\nblend for D3D: (Cd - Cs) \\\\* 7 &gt;&gt; 7 + Cd and while it produces no\\nissue in playing the game, it does mean some effects are not being\\nrendered or are being rendered incorrectly. A good example of this is\\nGrand Theft Auto: San Andreas. This game was practically unplayable in\\nhardware mode due to the graphical issues arising from the impossible\\nblend. The reason we have this issue is that some of the things that the\\nPS2 hardware can do are not very easy or even possible to do on PC\\nhardware. Gregory however decided to tackle the problem. He realized\\nthat there are some features in OpenGL which would allow the impossible\\nblend to be emulated correctly and efficiently. In no time at all he had\\nquite literally made the impossible be possible! Currently the issue is\\nfixed only in OpenGL, however Gregory and Refraction are working on\\nfixing it in DirectX 11 as well. Games known to be improved by the\\ncorrect blending are:\\n\\nGrand Theft Auto: San Andreas\\nValkyrie Profile 2: Silmeria\\nMetal Gear Solid 3: Snake Eater\\nHaunting Ground (still has some other broken effects though)\\n\\nHere is a screenshot comparison showing Metal Gear Solid 3: Snake\\nEater:\\n\\nIncorrect/Correct Blending:\\n\\n<ImageCompare left={require(\\"./img/MGS-bad-blend_s.webp\\").default} right={require(\\"./img/MGS-good-blend_s.webp\\").default} />\\n\\nFor an in depth explanation of why we have \\"impossible\\" blends and how\\nGregory fixed that, please read the developer blog post located\\n[here](/blog/2015/explanation-impossible-blend/).\\n\\nNext we will take a look at some of the changes happening in the OpenGL\\nrealm lately. Gregory has been working very hard on this oft neglected\\nbackend and it really shows. As a result of that hard work it is now on\\npar with the DirectX backend in most situations and even more accurate\\nin some games. A good example of that is the shadow rendering in Shadow\\nof the Colossus (pun not intended!).\\n\\n<ImageCompare left={require(\\"./img/sotc_before_s.webp\\").default} right={require(\\"./img/sotc_after_s.webp\\").default} />\\n\\nWe can see from these images that it\'s the OpenGL backend that does it\\nbest now. However the OpenGL backend is also known for being much slower\\nthan our DirectX ones so even if it is on the same level accuracy wise\\nthe only people who would really use it would be Linux users, since they\\ndon\'t have a choice. Recognizing that issue, Gregory decided to pull out\\nall the stops. By utilizing a formerly unused OpenGL feature and taking\\nadvantage of threaded optimization he was able to bring the OpenGL\\nbackend quite literally up to speed. Here are some numbers that show\\njust how well they compare now (thanks go to Refraction for testing):\\n\\n**Soul Calibur III**\\n\\nWithout MTVU:\\n- OGL+Texture Storage = 96fps\\n- DirectX11 = 92fps\\n\\nWith MTVU:\\n- OGL+Texture Storage = 114fps\\n- DirectX11= 112fps\\n\\n**Grand Theft Auto: San Andreas**\\n\\nWithout MTVU:\\n- OGL+Texture Storage = 120fps\\n- DirectX11= 121fps\\n\\nWith MTVU:\\n- OGL+Texture Storage = 155fps\\n- DirectX11= 157fps\\n\\n**Grandia III**\\n\\nWithout MTVU:\\n- OGL+Texture Storage = 94fps\\n- DirectX11= 94fps\\n\\nWith MTVU:\\n- OGL+Texture Storage = 123fps\\n- DirectX11= 122fps\\n\\nAs you can see the results are practically epic! The one unfortunate\\ncaveat is this: It\'s currently only that fast on Nvidia graphics cards.\\nThis is due to only Nvidia\'s drivers currently supporting the Threaded\\noptimization settings which needs to be on for this level of performance\\nto be achieved. If AMD/Intel drivers start supporting that then it will\\nwork there too. Regardless, Gregory is always working on new ways to eek\\nextra performance out of the OpenGL backend so don\'t fret if you can\'t\\nmake use of the current boost. Things will only get better as we go\\non!\\n\\nNext up is something that is useful to those of us with tons of PS2\\ngames but who don\'t happen to have unlimited hard drive space compressed\\nISO support. A while back, avih had added support for reading gzipped\\nISOs which was well received due to many of us having lots of PS2 games.\\nLast month things got even better on that front when a coder by the name\\nof unknownbrackets added support for CSO to PCSX2. You may be familiar\\nwith CSO files from using them with your PSP or PPSSPP they are\\nbasically a type of compressed ISO file. In order to create CSO files\\nfor PCSX2 you should use a program called\\n[maxcso](https://github.com/unknownbrackets/maxcso/releases) which can\\nhandle files larger than 4GB. For creating gzip files you can use 7zip\\n(change the Archive format: in the compression dialog box to gzip). Once\\nyou have your compressed file it can be loaded into PCSX2 via the normal\\nmethod. If you are using a gzip file then PCSX2 will create an index the\\nvery first time you load the compressed game in order to speed up access\\ntimes to various parts of the archive. The amount of space saved is not\\nterribly huge per ISO but if you have many games then it can add up\\nquite quickly. This chart shows the file size of a few games for\\nuncompressed, gzip and CSO file types.\\n\\n<Image cols={6} src={require(\\"./img/chart1.webp\\").default} />\\n\\nAs you can see, gzip results in slightly smaller files when using ultra\\ncompression level. However it takes a lot longer to compress than CSO so\\nthere is a bit of a trade off. Regardless of whether you choose gzip or\\nCSO, this feature is sure to be of good use to those of us with large\\ncollections of games!"},{"id":"/2015/explanation-impossible-blend","metadata":{"permalink":"/pcsx2-net-www/blog/2015/explanation-impossible-blend","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/explanation-impossible-blend/index.mdx","source":"@site/blog/2015/explanation-impossible-blend/index.mdx","title":"Explanation Impossible Blend","description":"The goal of blending is to combine two colors","date":"2015-06-08T00:00:00.000Z","formattedDate":"June 8, 2015","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.54,"hasTruncateMarker":true,"authors":[{"name":"Gregory","url":"https://github.com/gregory38","imageURL":"https://github.com/gregory38.png","key":"gregory"}],"frontMatter":{"authors":["gregory"],"date":"2015-06-08T00:00:00.000Z","description":"The goal of blending is to combine two colors","draft":false,"tags":["devblog"],"title":"Explanation Impossible Blend"},"prevItem":{"title":"Major Gsdx Progress And Monthly Progress Reports!","permalink":"/pcsx2-net-www/blog/2015/major-gsdx-progress-and-monthly-progress-reports"},"nextItem":{"title":"Explanation Hacks Needed For Upscaling Glitches","permalink":"/pcsx2-net-www/blog/2015/explanation-hacks-needed-for-upscaling-glitches"}},"content":"The goal of blending is to combine two colors. The general equation on a\\nmodern GPU is:\\n\\n\x3c!-- truncate --\x3e\\n\\n```cpp\\ncoefficient1 * color1 +/- coefficient2 * color2\\n```\\n\\nColor1/Color 2 are either the source color or the destination color.\\nCoefficient1/Coefficient2 are either the alpha value (transparency) of\\nsource/source2/destination, 1 - alpha, or a constant. The GPU will clamp\\nthe coefficients to \\\\[0;1\\\\]\\n\\nThe general equation on the PS2 however is:\\n\\n```cpp\\n(Color1 - Color2) * Coefficient + Color3\\n```\\n\\nColor1/Color2/Color3 are either the source or destination color or zero.\\n\\nCoefficient is the alpha value (transparency) of the source or\\ndestination, or a constant.\\n\\nThe issues we have with this are as follows:\\n1. In the PS2, the coefficient factor could range from \\\\[0;2\\\\]\\n(fortunately this almost never happens)\\n2. If Color3 and Color1 are the same source, the equation will be:\\n\\n\\n```cpp\\nColor1 * (1+Coefficient) - Color2 *Coefficient\\n```\\n\\n\\nwhich will result in the first half of this equation always being larger\\nthan 1. This is a problem because the GPU is limited to 1. This is why\\nthis type of blending is impossible on the fixed function unit of a PC\'s\\nGPU.\\n\\nOur recent update fixed the second case. Since it is impossible to do\\nthat blending on the fixed function unit, we instead emulate them in the\\nGPU\'s fragment shader. Fragment shaders are very small dedicated CPUs so\\nit is quite easy to do a few small operations on them.\\n\\nThere is a catch however. Fragment shaders (like any CPU) are relatively\\nslow. In order to compensate for this the fragments are executed\\nout-of-order. For example, if you do a draw call consisting of 2\\ntriangles, it is possible that the second triangle will be computed\\nbefore the first one. It is quite annoying because blending is an\\nin-order operation. However as long as primitives don\'t self overlap,\\nonly a single fragment shader must execute and therefore there is no\\nissue with order.\\n\\nGreat. At this point we just need to split the draw calls into N draw\\ncalls without primitive overlap. It\'s not free performance wise to do\\nthis, but it remains reasonable in some cases.\\n\\nMoving on, we need to access the destination value to compute the final\\nvalue, however the GPU has a texture cache. The texture cache is read\\nonly so that there is no coherency issue. The target value can be\\nwritten but all the subsequent reads will be wrong because of the\\ndiscrepancy with the cache. Getting back to the input texture case, the\\ntexture is read only during the draw but this could change on the\\nfollowing draw. There must be a way to invalidate the cache if you\\nupload a new texture to the same location. The driver has this ability,\\nbut until recently applications did not. GL 4.5 changes this. A function\\nis provided to invalidate the cache\\n\\nThe end result is that we can implement basic blending in the fragment\\nshader instead of relying on the limited GPU core.\\n\\n\\nProofread and corrected by [Blyss\\nSarania](http://forums.pcsx2.net/User-Blyss-Sarania)"},{"id":"/2015/explanation-hacks-needed-for-upscaling-glitches","metadata":{"permalink":"/pcsx2-net-www/blog/2015/explanation-hacks-needed-for-upscaling-glitches","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/explanation-hacks-needed-for-upscaling-glitches/index.mdx","source":"@site/blog/2015/explanation-hacks-needed-for-upscaling-glitches/index.mdx","title":"Explanation Hacks Needed For Upscaling Glitches","description":"First, let\'s explain aliasing and why people are so keen on removing it with anti-aliasing","date":"2015-06-08T00:00:00.000Z","formattedDate":"June 8, 2015","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":4.45,"hasTruncateMarker":true,"authors":[{"name":"Gregory","url":"https://github.com/gregory38","imageURL":"https://github.com/gregory38.png","key":"gregory"}],"frontMatter":{"authors":["gregory"],"date":"2015-06-08T00:00:00.000Z","description":"First, let\'s explain aliasing and why people are so keen on removing it with anti-aliasing","draft":false,"tags":["devblog"],"title":"Explanation Hacks Needed For Upscaling Glitches"},"prevItem":{"title":"Explanation Impossible Blend","permalink":"/pcsx2-net-www/blog/2015/explanation-impossible-blend"},"nextItem":{"title":"Linux News","permalink":"/pcsx2-net-www/blog/2015/linux-news"}},"content":"First, let\'s explain aliasing and why people are so keen on removing it\\nwith anti-aliasing. Let\'s start with some math\\n\\n\x3c!-- truncate --\x3e\\n\\nIn the real world, signals are often \\"continuous.\\" If you take two\\npoints A and B and A is very close to B then F(A) is very close to F(B).\\nBut a screen is not continuous. If you take two pixels side by side, one\\ncan be white while the other is black.\\n\\nTypical example of some continuous/discrete signals:\\n\\n![](./img/signals_s.webp)\\n\\nIt is very easy and accurate to transform a continuous signal into a non\\ncontinuous signal. You just need to sample it, i.e. take a subset of\\nvalues. It is often used in computer science to reduce the quantity of\\ninformation compared to the original signal. Otherwise it simply\\nrequires to much power to process it.\\n\\nThe thing is that later, when you render it, you need to do the reverse\\ntransformation. Human senses expect continuous video and sound. The\\ntransformation above is very easy, but this time things are much more\\ncomplicated. If you need a value exactly at a sample point - it\'s fine,\\nyou have it\\n\\nBut what happens if you need a value that is between two samples? It\\ndoesn\'t exist, so you need to create it. This is called aliasing - any\\nrandom value is an alias of the original value.\\n\\nThe purpose of anti aliasing is to predict a value between samples that\\nis as close as possible to what the original value would have been by\\nusing the samples that you do have to estimate what is missing.\\n\\nFor example, let\'s imagine that sample 1 is white and sample 2 is black.\\nWhat will the value of a pixel between sample1 and sample 2 be? It could\\nbe white or black (Nearest filtering.) It could be a mixture of both, so\\ngray (Linear filtering.) Note that nothing prevents the true value of\\nthat pixel from being red, blue, yellow or anything, but it is\\nimpossible to predict that based on the data we have.\\n\\nLet\'s get back to GS emulation now.\\n\\nPrimitives sent to the GPU/GS are continuous. For example, you ask the\\nGPU to draw a triangle, not to draw N pixels. However due to limited\\nresources, your GPU will only compute the colors of N pixels on your\\nscreen/framebuffer. The rendering will be exactly the same as if you had\\nasked the GPU to draw N pixels in a triangle shape. Nobody will see the\\n\\"holes.\\" However, if you increase the frequency of the sampling (i.e.\\nuse a bigger resolution) you will see those holes. If your screen had\\ninfinite resolution you would be able to see that the rendering is\\nvarious points shaped like a triangle - not a real triangle.\\n\\nThe PS2 does something similar. It sends various rectangles that fill\\nthe screen, but they have holes. Due to aliasing you never see them at\\nnative resolution. Upscaling however increases the frequency of sampling\\nbecause it is \\"emulating\\" a higher resolution output. As with the\\nprevious example, the holes become visible. In the case of Namco games\\nthey manifest as black vertical lines.\\n\\nIn other words, when upscaling, the emulation of the GS is more accurate\\nthan the real GS that the PS2 has. Unfortunately, humans don\'t like\\ntheir images full of pointless black lines. So to fix it, we added\\nanother hack. The hack will detect rectangle primitives that are too\\nsmall and then extend them half a pixel to fill the hole. It does the\\njob well and it doesn\'t impact speed much.\\n\\nNow let\'s explain the other new hack. Primitives have only color\\ninformation - this is enough for a small surface but not efficient to\\ndraw a big surface. In order to reduce computational load they just map\\na texture on to the primitive. You just need to provide the texture\\ncoordinates. Instead of a lengthy explanation, let\'s just use an\\nexample.\\n\\n![](./img/native_res_s.webp)\\n\\n![](./img/native_x2_s.webp)\\n\\nAs you can see in the picture, you will sample an invalid value at 2x\\nresolution. Generally games use a texture atlas so you inadvertently\\nsample from the next texture. This is quite noticeable on font textures.\\nThe idea of this hack is to shift and round the texture size to better\\nfit the intended behavior of the game. There are various corner cases so\\nit is difficult to have something both fast and accurate. Many games are\\nbetter but they\'re not perfect.\\n\\n![](./img/infinite_res_s.webp)\\n\\nThe hack also disables extra linear filtering. Globally the upscaling\\nissue is caused by a texture that is too small. This was likely done on\\npurpose to reduce memory usage (PS2 video memory is only 4MB, compared\\nto multiple gigabytes that we have today). Linear filtering allows\\ninterpolating a color based on the texels around it. But it requires\\nthat those texels exist\\n\\nSo textures need to be one texel bigger than they are for linear\\ninterpolation. We don\'t have that possibility, unfortunately.\\n\\nIn conclusion, native resolution works because of aliasing issues. The\\nholes and errors in the image are below the sampling rate of the PS2\'s\\ntraditional output and therefore you never see them. Once you enable\\nsome form of anti aliasing (linear filtering/upscaling/MSAA/\\\\*\\\\*AA),\\nthey become visible as the sample rate is high enough to expose them.\\n\\nProofread and corrected by [Blyss\\nSarania](http://forums.pcsx2.net/User-Blyss-Sarania)"},{"id":"/2015/linux-news","metadata":{"permalink":"/pcsx2-net-www/blog/2015/linux-news","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/linux-news/index.mdx","source":"@site/blog/2015/linux-news/index.mdx","title":"Linux News","description":"Hello guys, here are some news on the Linux front","date":"2015-02-08T00:00:00.000Z","formattedDate":"February 8, 2015","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.07,"hasTruncateMarker":true,"authors":[{"name":"Gregory","url":"https://github.com/gregory38","imageURL":"https://github.com/gregory38.png","key":"gregory"}],"frontMatter":{"authors":["gregory"],"date":"2015-02-08T00:00:00.000Z","description":"Hello guys, here are some news on the Linux front","draft":false,"tags":["devblog"],"title":"Linux News"},"prevItem":{"title":"Explanation Hacks Needed For Upscaling Glitches","permalink":"/pcsx2-net-www/blog/2015/explanation-hacks-needed-for-upscaling-glitches"},"nextItem":{"title":"Mmu Mini Series Part2 4","permalink":"/pcsx2-net-www/blog/2015/mmu-mini-series-part2-4"}},"content":"Hello guys, here are some news on the Linux front. Yes I know, I ought\\nto do that more regularly \ud83d\ude1b\\n\\n\x3c!-- truncate --\x3e\\n\\nIn short progress is slow but steady\\n\ud83d\ude0a\\n\\n* A port to wxWidget 3.0 was done recently, mostly because Debian will\\ndrop wxWidget 2.8 . It is enabled by default but wx2.8 is still there,\\nyou can restore is with the -DWX28_API=TRUE build option.\\n\\n-   Most of regressions were fixed so it will work as bad as before\\n\ud83d\ude09 No I\'m kidding, it actually works better on\\nmy PC. Feel free to test it.\\n-   Unfortunately Windows is still blocked to wx2.8, [ contributions are\\nwelcome (first step is to add a wx3.0 library build)\\n]{style=\\"color: #1e90ff;\\"}\\n-   Some wxWidget libraries depend on GTK3. PCSX2 code was updated to\\nsupport GTK3 but wxWidget is not as stable as expected.\\nNevertheless, you can enable GTK3 with the -DGTK3_API=TRUE build\\noption (debug build only).\\n\\n\\n* Better support of cross-building (thanks to Micove). Cmake used to\\nselect wrong libraries between lib32/lib64/lib/...\\n\\n-   You need to use this new option on 64 bits machines\\n-DCMAKE_TOOLCHAIN_FILE=cmake/linux-compiler-i386-multilib.cmake\\n-   Note: build.sh will do it by default, so just build.sh\\n\\n\\n* Support of AVX\\n\\n-   code is now compiled with -march=native to support all optimizations\\nof your CPU. It can be disabled with the -DISABLE_ADVANCE_SIMD=TRUE\\nbuild option (for example distribution or inside VM)\\n-   Note: GSdx (Linux) needs a couple of updates to support SSE4x. [\\nAgain contributions are welcome ]{style=\\"color: #1e90ff;\\"} , check\\nthis issue <https://github.com/PCSX2/pcsx2/issues/438>\\n\\n\\n* New (nearly) playable game: Bouken Jidai Katsugeki Goemon\\n\\n-   Full support of MMU with the interpreter, and a dedicated game-fix\\nfor the recompiler\\n-   No more TLB misses!\\n-   Crashes are reported on GSdx windows not sure on Linux.\\n\\n\\n* Finally, Ubuntu PPA is up to date with the latest feature. However,\\nUbuntu 12.04 support is discontinued!\\n\\n------------------------------------------------------------------------\\n\\n\\nOngoing work (aka the plan for the next months):\\n\\n* port lilypad to Linux\\n\\n-   It will bring Force Feedback, MultiTap and it might work better in\\nseveral games.\\n-   I\'m close to have keyboard support [ but help would be appreciated\\nto build a full GUI. Please contact us if you are interested.\\n]{style=\\"color: #1e90ff;\\"}\\n\\n* port GSdx to openGL 4.5\\n\\n-   A long time ago, I planned to update the code to support\\nGL_ARB_direct_state_access. It was postponed because no official\\ndriver supported it.\\n\\n------------------------------------------------------------------------\\n\\n\\nLast but not least, thanks to all contributors. Even the smallest\\npatches are a big help."},{"id":"/2015/mmu-mini-series-part2-4","metadata":{"permalink":"/pcsx2-net-www/blog/2015/mmu-mini-series-part2-4","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2015/mmu-mini-series-part2-4/index.mdx","source":"@site/blog/2015/mmu-mini-series-part2-4/index.mdx","title":"Mmu Mini Series Part2 4","description":"After a long delay, this is the second part of the MMU mini-presentation","date":"2015-02-02T00:00:00.000Z","formattedDate":"February 2, 2015","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":6.205,"hasTruncateMarker":true,"authors":[{"name":"Gregory","url":"https://github.com/gregory38","imageURL":"https://github.com/gregory38.png","key":"gregory"}],"frontMatter":{"authors":["gregory"],"date":"2015-02-02T00:00:00.000Z","description":"After a long delay, this is the second part of the MMU mini-presentation","draft":false,"tags":["devblog"],"title":"Mmu Mini Series Part2 4"},"prevItem":{"title":"Linux News","permalink":"/pcsx2-net-www/blog/2015/linux-news"},"nextItem":{"title":"Merry Christmas From The PCSX2 Team","permalink":"/pcsx2-net-www/blog/2014/merry-christmas-from-the-pcsx2-team"}},"content":"Hello PCSX2 followers,\\n\\nAfter a long delay, this is the second part of the MMU\\nmini-presentation. In the previous chapter we saw that MMU allows giving\\na virtual address space to a process. Besides, I told you MMU controls\\nthe cache behavior (cacheable/uncached accelerated/uncached). First, let\\nme quickly explain the different cache accesses. Then I will introduce\\nthe default memory mapping of the PS2.\\n\\n\x3c!-- truncate --\x3e\\n\\nSo let\'s start with a short explanation of the cache. The goal of\\ncaching is to hide RAM latency. RAM is a very slow memory. It\'s not as\\nslow as an HDD/SSD but still very slow. Any access requires a full\\nprotocol to prepare the data. You need to select the line, the column,\\ncharge output buffer... A RAM access costs you a hundred of CPU cycles.\\nIn the meantime, the CPU is idling if it misses instruction or data. It\\nis very annoying, only 10% of the CPU would be used. The biggest cost is\\nthe setup of the RAM, transfer speed remains reasonable. So a 64 bytes\\ntransfer is a bit slower than a 4 bytes transfer. But a 64 bytes\\ntransfer is way faster than two 4 bytes transfers. Therefore, it is more\\nefficient to load/store data by 64 bytes packets. Note: generally cache\\nlines are 64 bytes wide.\\n\\nEmploying a cache is a clever solution to avoid multiple CPU-RAM\\ntransfers. It is based on two properties: spacial locality\\n(instructions/data are closely packed) and temporal locality (program\\nloop/reuse of the same data again and again over the time). The general\\nidea of caching is to create a small, but fast memory. 1% of your RAM\\ndata is used 99% of the time (a.k.a. the general 90/10 rules). So if you\\njust put those 1% inside the cache, 99% of your accesses will be fast\\n\\nWell let\'s say not too slow, even the fastest cache still has 2 or 3 CPU\\ncycles access time.\\n\\nCache is really nice but there are a couple of scenarios where you\\nmustn\'t use it: Coherency and performance. Wait, we just said that cache\\naccelerate memory access and so improves performance? That is true, but\\nonly if the data has temporal locality. If you want to access the data\\nonly once, it won\'t be efficient. You pay an extra latency cost (the\\ncache layer) for no gain because data won\'t be reused. It is even worse!\\nUseful data will be evicted from the cache. We really want to keep the\\n1% of frequently used data on the cache. Don\'t worry, we aren\'t doomed,\\nthere is still a way to accelerate this kind of transfer. The PS2 has a\\nspecial mode called \\"uncached accelerated\\" that will be discussed a bit\\nlater.\\n\\nNow let\'s talk about coherency. Coherency is very critical to ensure\\nsystem stability. The cache is a copy of RAM. If the hardware (typically\\nthe DMAC) updates the memory content, the data of the cache will be\\nwrong and your CPU will be screwed. This kind of memory is called\\nvolatile, it means hardware can update it without any notice to the CPU.\\nCache will be disabled to ease the management of this special memory. No\\ncache means no copy, means no coherency issue.\\n\\nYou now understand the reason to disable the cache. Let\'s continue with\\nthe explanation of the \\"uncached accelerated\\" mode. I told you that a 64\\nbytes transfer is much faster than several small transfers. There must\\nbe a way to exploit this feature. CPU registers are only 16 bytes wide,\\nway too short. So the engineers added a couple of extra buffers (64\\nbytes wide). Those buffers allow you to transfer 64 bytes at once from\\nthe RAM without any pollution of the cache. You directly do a\\ncomputation on the data and send it back to the RAM, therefore you can\\nfully exploit your RAM. Note, on your PC this feature is often called\\nwrite-combining.\\n\\n\\nLet\'s conclude this cache chapter. In short there are 3 cache modes\\n1. uncached for volatile access\\n2. uncached accelerated for data that will be used once\\n3. cache to accelerate all remaining situations\\n\\n\\nOn the PS2, 95% of the MMU job is to select the cache. The remaining 5%\\nis to forbid the game to use/access special resources (OS\\ncounter/SIF/kernel code). Very few games (I know only one) use the MMU\\nto remap a page during the game. Nearly all games use a default mapping\\nthat allows accessing all hardware resources.\\n\\n\\nPS2 MMU specification:\\nEntries: 48 double pages (pages are mapped by block of two, the odd and\\neven pages, so in total you can map 96 pages)\\nPage size: 4K/16K/64K/256K/1M/4M/16M\\n\\nDefault mapping: 39 entries already allocated and reserved for the OS.\\nOnly 9 entries remain for the games but we don\'t care. As I said, all\\nthe memory is already mapped, so we don\'t need more. Besides, it removes\\nthe handling of TLB miss that is very expensive. It is clearly much more\\nefficient than a standard PC.\\n\\nHere is an overview of the TLB configuration.\\n\\n![](./img/mmu_memory_map_s.webp)\\n\\nAs you can see, there are 2 modes, a USER mode for the game and a KERNEL\\nmode for the PS2 OS. The mode selection is done by a CPU configuration\\nregister. Syscalls are generally used to switch to higher privilege\\nmodes, but that\'s another story, albeit very interesting\\n\\nPlease note that TLB is only used for USER mode. The kernel is god, it\\ncan access anything therefore it uses physical addresses directly. On\\nthe contrary the game is limited to the mapped memory, it means that\\ngames can only access 31.5MB. Besides, some registers are read only (EE\\ncounter 2/3 and SIF DMA), in others words they are reserved for the\\nkernel.\\n\\nIt\'s about time that we answer the mini quiz of the previous series:\\n\\\\* The first 512KB of RAM is not virtually mapped because it is at the\\nlocation of the OS, do you know how the kernel will access this\\nlocation?\\nThe kernel is like god it can use physical addresses directly. The\\naddress will range from 0x8000\\\\_0000 to 0x9FFF\\\\_FFFF. Those accesses are\\ncache accelerated.\\n\\n\\\\* A hardware component needs to access the memory without the CPU\\nintervention. Do you know which one? Do you know how the addresses are\\nhandled?\\n\\nThe component is the Direct Memory Access Controller (aka DMAC). This\\ncomponent is allowed to do a Direct Memory Access (DMA) behind the CPU,\\nin others words it can copy data around the chip. This way the CPU can\\nwork without any interruption. However, memory is volatile from the CPU\\npoint of view so access to this memory must be done uncached. In\\nparticular the kernel will use this address range\\n0xA000\\\\_0000-0xBFFF\\\\_FFFF\\n\\nTo conclude this post, the memory subsystem is very critical for\\nperformance and the MMU is a very powerful mechanism to control memory\\naccess. However, the MMU is completely underused on the PS2. Let\'s be\\nhonest it is a waste of die space. A hardwired implementation (as done\\nby older consoles) would have been 10 times more efficient. So why did\\nSony keep the MMU? I don\'t know! Here are some possibilities:\\n\\n\\\\* to support Linux\\n\\\\* no right to modify this part of the CPU (remember it is based on\\nMIPS)\\n\\\\* to reduce cost and time to market\\n\\n\\nThat\'s all for today. Next time you\'ll see how I managed to make Goemon\\n(\\n<http://forums.pcsx2.net/Thread-Bouken-Jidai-Katsugeki-Goemon-SLPM-65014-J>\\n) playable with this knowledge."},{"id":"/2014/merry-christmas-from-the-pcsx2-team","metadata":{"permalink":"/pcsx2-net-www/blog/2014/merry-christmas-from-the-pcsx2-team","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/merry-christmas-from-the-pcsx2-team/index.mdx","source":"@site/blog/2014/merry-christmas-from-the-pcsx2-team/index.mdx","title":"Merry Christmas From The PCSX2 Team","description":"e hope that you\'ve all had a good year!","date":"2014-12-22T00:00:00.000Z","formattedDate":"December 22, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.23,"hasTruncateMarker":false,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-12-22T00:00:00.000Z","description":"e hope that you\'ve all had a good year!","draft":false,"tags":["devblog"],"title":"Merry Christmas From The PCSX2 Team"},"prevItem":{"title":"Mmu Mini Series Part2 4","permalink":"/pcsx2-net-www/blog/2015/mmu-mini-series-part2-4"},"nextItem":{"title":"Mmu Mini Series","permalink":"/pcsx2-net-www/blog/2014/mmu-mini-series"}},"content":"We hope that you\'ve all had a good year! Be sure to enjoy what little\\nis left it (it sure went by fast!). Eat some good food, enjoy the\\ncompany of good friends, and make sure to check back here for more PCSX2\\nrelated news soon!"},{"id":"/2014/mmu-mini-series","metadata":{"permalink":"/pcsx2-net-www/blog/2014/mmu-mini-series","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/mmu-mini-series/index.mdx","source":"@site/blog/2014/mmu-mini-series/index.mdx","title":"Mmu Mini Series","description":"It\'s been a while since the last developer blog entry. I would like to resume this old tradition","date":"2014-11-23T00:00:00.000Z","formattedDate":"November 23, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":5.3,"hasTruncateMarker":true,"authors":[{"name":"Gregory","url":"https://github.com/gregory38","imageURL":"https://github.com/gregory38.png","key":"gregory"}],"frontMatter":{"authors":["gregory"],"date":"2014-11-23T00:00:00.000Z","description":"It\'s been a while since the last developer blog entry. I would like to resume this old tradition","draft":false,"tags":["devblog"],"title":"Mmu Mini Series"},"prevItem":{"title":"Merry Christmas From The PCSX2 Team","permalink":"/pcsx2-net-www/blog/2014/merry-christmas-from-the-pcsx2-team"},"nextItem":{"title":"Contriibute To PCSX2 Wiki","permalink":"/pcsx2-net-www/blog/2014/contriibute-to-pcsx2-wiki"}},"content":"Hello PCSX2 followers,\\n\\nIt\'s been a while since the last developer blog entry. I would like to\\nresume this old tradition.\\n\\n\x3c!-- truncate --\x3e\\n\\nI will present you a mini series on the MMU (memory management unit) and\\nvirtual memory. Jake and ZeroFrog already wrote some posts relating to\\nthis topic:\\n- [So Maybe It\'s About Time We Explained Vtlb](/blog/2009/so-maybe-it-s-about-time-we-explained-vtlb/)\\n- [Virtual Memory](/blog/2006/virtual-memory/)\\n\\nThis time, I will explain the goal of MMU and why it is mandatory for\\nmodern systems. The MMU is a cornerstone for stability and security. I\\nwill also explain why it could be costly for the performance on the\\nnative system.\\n\\nOn the next article, I will present you the PS2 address space and how\\nthe MMU is really used.\\n\\nLet\'s begin with the root, the Operating System (OS). Hardware can run\\nwithout any OS but it is often a necessary evil. The OS has 2 major\\ngoals:\\n\\n1/ The first goal of the OS is to control privilege access of\\nprocesses.\\nMaybe you want to keep a resource for the hardware or OS internal, for\\nexample a hardware watchdog. Maybe you only want to check the validity\\nof a command. It could be as simple as only allowing a stop command\\nafter a start command.\\n\\nLet\'s see a basic example: starting some hardware counters\\n\\n![](./img/mmu-schematic-1s.webp)\\n\\nAs you can see, without any OS you could easily kill your system. The OS\\nallows the separation of privileged and standard resources.\\n\\n2/ The second goal is to share the resources between processes\\nYou need to understand that processes are independent for coding\\nsimplicity and security.\\nLet\'s reuse our hardware counter example\\n\\n\\n------------------------------------------------------------------------\\n\\n![](./img/mmu-schematic-2s.webp)\\n\\nThis time we want to start the same counter from two different threads.\\nUnfortunately process 1 will be corrupted by process 2. It\'s pretty bad,\\nprocess 1 will likely crash. Again the OS is the solution. It replaces\\nthe corruption with an error that can be handled by the process.\\n\\nConcluding this mini presentation, the OS is the gatekeeper of the\\nhardware. The OS is a real god but be aware \\"with great power, comes\\ngreat responsibility\\". System stability depends on the quality of the\\nOS. On the contrary the process is isolated. A bad process will die\\nalone, yes life is tough.\\n\\nNow let\'s talk about virtualization. In our 2nd example, the OS throws\\nan error because the counter is already used by another process. However\\nour system can support several counters, it is a shame to wait for the\\nfirst counter to be available. The process wants to start a counter, it\\ndoesn\'t care which one. So it might be possible to handle this situation\\nbetter. The solution is virtualization.\\n\\nHere\'s the idea, let\'s create a pool of virtual counters by process and\\nthen the OS will remap them to a real physical counter. As a bonus, we\\ndon\'t need to limit the number of counters based on the hardware. You\\ncan have 10 virtual counters for only 2 physical counters.\\n\\nLet\'s redo the previous example with a virtualization layer in the OS.\\n\\n![](./img/mmu-schematic-3s.webp)\\n\\nAs a side note, virtualization is a common solution for resource\\nmanagement. On the internet you have a logical IP address instead of\\nusing the Mac address directly. HDD access can be virtualized too with a\\ntool like LVM\\n<http://en.wikipedia.org/wiki/Logical_Volume_Manager_%28Linux%29> .\\nSometimes the whole machine is virtual, see VirtualBox or even PCSX2.\\n\\n------------------------------------------------------------------------\\n\\n\\nThe hardware counter was an example but the subject of the blog is the\\nMMU so let\'s get back to virtual memory. And yes you got it right,\\nvirtual memory is the same concept as we discussed earlier. The process\\nwill access virtual memory. The OS will translate it to the physical\\naddress.\\n\\nI said that the OS will remap the virtual memory to physical memory but\\nthat is not exactly correct. Memory access is very common in a process,\\nlet\'s say every 2 or 5 instructions. Imagine if the kernel did a lookup\\nof the physical address every 4 instructions, it would be slow as hell.\\nActually it is even worse because the program counter (PC) is also a\\nvirtual address. Software is deemed to be slow, it needs to be hardware\\naccelerated.\\n\\nHere comes the MMU that allows the CPU to do the conversion on the fly.\\nThe MMU uses a dedicated cache named TLB (Translation Lookup-aside\\nBuffer). However a hardware cache is very costly, you can\'t store a\\nphysical address for each logical address, besides remember that the\\nvirtual memory could be bigger than the physical memory. So the memory\\naddress space is split in pages, often 4K but various CPUs can support\\nseveral page sizes. The PS2 supports 7 sizes of pages from 4K to 16MB.\\n\\nA TLB miss will cost you hundreds of CPU cycles and for good reason, a\\n4GB virtual space requires 1 million table entries of 4K-pages. A common\\ntrick to reduce cache misses is to increase the page size so you can fit\\n\\"more memory\\" in the TLB cache. However there is a terrible issue, the\\nwaste of resources. One page is an atomic resource, that means either\\nthe page is free or the page is locked by the process. If the process\\nallocates a single byte on a 16MB page, nearly 16MB is lost for other\\nprocesses. It\'s not a real solution for the PC which uses hundreds of\\nprocesses but that is very different for the PS2. We will discuss this\\nnext time.\\n\\nSee below a typical use model of the MMU:\\n\\n![](./img/mmu-schematic-4s.webp)\\n\\n\\nThe MMU is a nice and complex solution to handle memory access. But\\nthere is more. You can attach some flags to each page. For example on a\\nmodern PC, you have readable/writable/executable. The PS2 doesn\'t\\nsupport all those flags, yes it\'s not modern anymore, however it has\\nanother class of flag that controls cache behavior: cacheable/uncached\\naccelerated/uncached. Note for completeness sake that the PS2 also has\\nread only flags. It is a powerful mechanism but we will discuss the\\nimplications on the next chapter.\\n\\n\\nMini quiz:\\n\\\\* The first 512KB of RAM is not virtually mapped because it is at the\\nlocation of the OS, do you know how the kernel will access this\\nlocation?\\n\\\\* A hardware component needs to access the memory without the CPUs\\nintervention. Do you know which one? Do you know how the addresses are\\nhandled?"},{"id":"/2014/contriibute-to-pcsx2-wiki","metadata":{"permalink":"/pcsx2-net-www/blog/2014/contriibute-to-pcsx2-wiki","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/contriibute-to-pcsx2-wiki/index.mdx","source":"@site/blog/2014/contriibute-to-pcsx2-wiki/index.mdx","title":"Contriibute To PCSX2 Wiki","description":"After quite some time, I take the chance to write up this blog post about our wiki","date":"2014-11-16T00:00:00.000Z","formattedDate":"November 16, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.92,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-11-16T00:00:00.000Z","description":"After quite some time, I take the chance to write up this blog post about our wiki","draft":false,"tags":["devblog"],"title":"Contriibute To PCSX2 Wiki"},"prevItem":{"title":"Mmu Mini Series","permalink":"/pcsx2-net-www/blog/2014/mmu-mini-series"},"nextItem":{"title":"First 60 Fps Video And Some Website News","permalink":"/pcsx2-net-www/blog/2014/first-60-fps-video-and-some-website-news"}},"content":"After quite some time, I take the chance to write up this blog post\\nabout our wiki, in place of our wiki overlord and forum member\\n[ng](http://forums.pcsx2.net/User-ng) !\\n\\n\x3c!-- truncate --\x3e\\n\\nHere it is:\\n\\nSalutations the fair people of PCSX2 land! Did you know we have a\\n**[wiki](http://wiki.pcsx2.net/index.php/Main_Page)** in our borders?\\nWell, apparently we do! And for more than 5 years now this wiki is\\nwaiting for someone like y\'all PCSX2 geeks to help it thrive and to be\\nthe beacon of hope for those new users who desperately seek help in the\\nocean of boundless Internet. But some of you didn\'t even suspect of its\\nexistence!\\n\\nIn all seriousness, 5 long years have passed for PCSX2 wiki and we could\\nsay they were mostly quiet years. We had our share of fun though, and\\nwent through many changes. For example just recently we\'ve adopted test\\ntables and any of you can add your own test case or in-game issue so\\nthat new users can solve their game related problems quickly and\\ncomfortably. The wiki enjoyed many good contributors during its years.\\nThese people are the ones who really built it, filled it with\\ninformation and helped it to become what it is now. It\'s difficult to\\nmention all of these people in this small article but to those who have\\ncontributed to the wiki over the years we have an enormous gratitude!\\nThe wiki is in your perpetual debt!\\n\\nAlthough we have many informative game cards a huge number of lesser\\nknown games are left without any test cases, issues, images or\\nadditional info. So we appeal to all of you who has a small amount of\\nfree time and a tested (or completed) game on your hands (whether it\\nalready has some test cases or not), -- you\'re more than welcome to\\nregister at\\n[http://wiki.pcsx2.net/index.php?title=Special:UserLogin&returnto=PCSX2+Wiki&type=signup](http://wiki.pcsx2.net/index.php?title=Special:UserLogin&returnto=PCSX2+Wiki&type=signup%20)\\nand add your contribution to the wiki. Besides test cases the wiki could\\nuse some updates in general articles and guides (they are quite\\noutdated).\\n\\nLast but not least, anyone with designer skills can try his hand in\\nre-designing the main page which is pretty old and honestly was never a\\nreal looker. And generally to those who want to fill any info, complete\\npages, fix errors, re-phrase sentences and do stuff, your help is\\nsincerely appreciated!"},{"id":"/2014/first-60-fps-video-and-some-website-news","metadata":{"permalink":"/pcsx2-net-www/blog/2014/first-60-fps-video-and-some-website-news","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/first-60-fps-video-and-some-website-news/index.mdx","source":"@site/blog/2014/first-60-fps-video-and-some-website-news/index.mdx","title":"First 60 Fps Video And Some Website News","description":"I\'m proud to announce our first 60 FPS youtube video","date":"2014-11-01T00:00:00.000Z","formattedDate":"November 1, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.515,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-11-01T00:00:00.000Z","description":"I\'m proud to announce our first 60 FPS youtube video","draft":false,"tags":["devblog"],"title":"First 60 Fps Video And Some Website News"},"prevItem":{"title":"Contriibute To PCSX2 Wiki","permalink":"/pcsx2-net-www/blog/2014/contriibute-to-pcsx2-wiki"},"nextItem":{"title":"PCSX2 Development Picks Up Speed","permalink":"/pcsx2-net-www/blog/2014/pcsx2-development-picks-up-speed"}},"content":"I\'m proud to announce our first 60 FPS youtube video (and possibly the\\nfirst 60 FPS Kingdom Hearts 2 video on the internet), after 60 FPS\\nvideos got enabled a couple of days ago. The gameplay has been recorded\\nwith the 60 FPS patch from our forum members and at 6x native\\nresolution. It\'s not as smooth as the original file, but still you can\\nfinally see how lovely it looks on PCSX2 without frame dropping! **All\\nour youtube videos from now on will be 50/60 FPS!**\\n\\n\x3c!-- truncate --\x3e\\n\\n**Keep in mind that for now, 60 FPS videos only work on Google Chrome!**\\n\\nhttps://www.youtube.com/embed/DdDnRSp4UIc?wmode=transparent&rel=0&fs=1&autoplay=1\\n\\n\\n** The past weeks I\'ve been working on upgrading our website to the\\nlatest version of Joomla and on the way decided to also redesign it as I\\ndidn\'t like how it ended up last time. I\'ve already used many of the\\nideas posted in the last redesign thread on our forum, I\'ve fixed a few\\nstuff that were buggy, reduced both CSS and javascript and finally got\\nthemes working\\n\ud83d\ude0a It\'s still pretty bad code wise but I\'ve done\\nmy best to improve it and will keep at it.\\n\\nI\'m not sure when it will be done, but it might be synchronized with a\\nserver wide upgrade of our linux OS as well, to reduce downtime.\\n\\nAfter the main page is done, I will move on to updating mybb to the\\nlatest 1.8 version, although I\'m still waiting for the software to be\\nmature. 1.8 was extremely buggy, 1.8.1 is better but still not good\\nenough so I hope with the next 1.8.2 release I will be able to start\\nworking on it (and a new custom theme it seems\\n\ud83d\ude1b )\\n\\nEdit: Uploaded new video, this should be with the 60 FPS patch on, sorry\\nguys"},{"id":"/2014/pcsx2-development-picks-up-speed","metadata":{"permalink":"/pcsx2-net-www/blog/2014/pcsx2-development-picks-up-speed","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/pcsx2-development-picks-up-speed/index.mdx","source":"@site/blog/2014/pcsx2-development-picks-up-speed/index.mdx","title":"PCSX2 Development Picks Up Speed","description":"After a brief period of slowed development, PCSX2 has started picking up speed again with the help of new contributors as well as familiar faces","date":"2014-09-09T00:00:00.000Z","formattedDate":"September 9, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.83,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-09-09T00:00:00.000Z","description":"After a brief period of slowed development, PCSX2 has started picking up speed again with the help of new contributors as well as familiar faces","draft":false,"tags":["devblog"],"title":"PCSX2 Development Picks Up Speed"},"prevItem":{"title":"First 60 Fps Video And Some Website News","permalink":"/pcsx2-net-www/blog/2014/first-60-fps-video-and-some-website-news"},"nextItem":{"title":"PCSX2 Drops Avg Toolbar","permalink":"/pcsx2-net-www/blog/2014/pcsx2-drops-avg-toolbar"}},"content":"After a brief period of slowed development, PCSX2 has started picking up\\nspeed again with the help of new contributors as well as familiar faces.\\nSeveral important improvements have been made since the last\\nannouncement.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe most important of these improvements is undoubtedly the new\\ndebugger. Our debugger has long been an area in need of attention, and\\nthanks to [Kingcom](https://github.com/Kingcom) it has finally received\\na much needed overhaul. This new debugger will make it much easier to\\nchase down the problems in broken games. Rama has already managed to get\\nthe NHL series working by using it! Featuring a live instruction\\nassembler, thread view, full register view, a function list and more,\\nthis improved debugger will certainly be a boon for our developers.\\n\\nAnother area that has received welcome attention is work towards 64 bit\\ncompatibility. Although there is still a lot of work to be done before\\nwe release a 64 bit build, the foundation has been laid. GSdx compiles\\nfor x64 now, and several key changes have been made to the PCSX2 core to\\nsupport x64 as well. These changes include preparing the emitter for 64\\nbit jumps, updating vtlb to work on x64, and changing instances of 32bit\\nonly code to be universal. These improvements help move us closer to\\nhaving a true 64 bit build.\\n\\nLinux matters have improved as well. Many of the new contributors use\\nthat OS instead of Windows and improvements here always help general\\nportability in the long run.\\n\\nLastly, a few important changes have been made to some of the plugins.\\nOn top of general bug fixes, CDVDgigaherz now tries to keep the disc\\nalways spinning at a low speed instead of letting the drive spin all the\\nway down. This improves game performance when using a physical disc\\nbecause the drive is always ready to provide data. Lilypad also supports\\nhot-plugging of Xinput devices now. That means if you forget to plug in\\nyour Xinput device before starting PCSX2, it will recognize it when it\\nis plugged in without requiring a restart.\\n\\nHere is a rundown of the most significant changes:\\n\\n64 bit related:\\n\\n-   Changed instances of u32 to uptr\\n-   Prepared emitter for 64 bit jumps\\n-   Made yuv2rgb and hashmap functions 64 bit ready\\n-   vtlb now works on on x64\\n-   Supported grabbing the MXCSR mask on x86_64 in cpudetect\\n-   GSdx now compiles for x64\\n\\nVIF:\\n\\n-   Fixed Looney Tunes: Back in Action\\n\\n\\nImproved Debugger:\\n\\n-   Allows much easier debugging of broken games\\n-   Already used to get NHL games working\\n-   Features a live assembler (e.g. mark an instruction, type nop to\\nreplace that instruction with nop)\\n\\nPlugins:\\n\\n-   Bug fixes for CDVDgigaherz\\n-   CDVDgigaherz now prevents the drive from spinning all the way down\\nwhich improves performance when playing from disc\\n-   Lilypad supports hot-plugging of Xinput devices\\n\\nCode cleanup:\\n\\n-   Changed int to bool for variables that only hold 0/1\\n-   Fixes for potential crashes\\n-   Fixes for potential variable leaks\\n-   Preparation for WX3 (for now we still use a custom 2.8)\\n-   Removed managed Vsync\\n-   Folder name fixes for Windows/Linux\\n-   Improved use of namespaces\\n-   Fixes for ELF parser\\n-   Started using generic memcpy instead of custom one(this actually\\nbrings a small speedup!)\\n\\nMisc:\\n\\n-   Updated translations for several languages\\n\\nCheck out the new debugger below:\\n\\n<Image cols={6} src={require(\\"./img/debugger_s.webp\\").default} />"},{"id":"/2014/pcsx2-drops-avg-toolbar","metadata":{"permalink":"/pcsx2-net-www/blog/2014/pcsx2-drops-avg-toolbar","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/pcsx2-drops-avg-toolbar/index.mdx","source":"@site/blog/2014/pcsx2-drops-avg-toolbar/index.mdx","title":"PCSX2 Drops Avg Toolbar","description":"This news post comes at an awkward moment, but AVG sent a letter a while ago stating they were terminating our partnership","date":"2014-07-13T00:00:00.000Z","formattedDate":"July 13, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.525,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-07-13T00:00:00.000Z","description":"This news post comes at an awkward moment, but AVG sent a letter a while ago stating they were terminating our partnership","draft":false,"tags":["devblog"],"title":"PCSX2 Drops Avg Toolbar"},"prevItem":{"title":"PCSX2 Development Picks Up Speed","permalink":"/pcsx2-net-www/blog/2014/pcsx2-development-picks-up-speed"},"nextItem":{"title":"Config Guide 1.2.1, Updated Netplay Plugin, Updated Compatibility List","permalink":"/pcsx2-net-www/blog/2014/config-guide-1-2-1"}},"content":"This news post comes at an awkward moment, but AVG sent a letter a while\\nago stating they were terminating our partnership, and this termination\\nhas now become effective. Because of that, we have uploaded an unbundled\\nversion of the latest release installer, which you can find in our\\ndownloads section.\\n\\n\x3c!-- truncate --\x3e\\n\\nWe would like to thank those users who have provided us with donations\\nand supported us through our bundled toolbar. They have been essential\\nin ensuring the team can afford the things required to improve the\\nemulator and keep everything up and running.\\n\\n\\nThank you all for the support so far!"},{"id":"/2014/config-guide-1-2-1","metadata":{"permalink":"/pcsx2-net-www/blog/2014/config-guide-1-2-1","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/config-guide-1-2-1/index.mdx","source":"@site/blog/2014/config-guide-1-2-1/index.mdx","title":"Config Guide 1.2.1, Updated Netplay Plugin, Updated Compatibility List","description":"I finally got around updated the configuration guide for the 1.2.1 release","date":"2014-07-03T00:00:00.000Z","formattedDate":"July 3, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.6,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-07-03T00:00:00.000Z","description":"I finally got around updated the configuration guide for the 1.2.1 release","draft":false,"tags":["devblog"],"title":"Config Guide 1.2.1, Updated Netplay Plugin, Updated Compatibility List"},"prevItem":{"title":"PCSX2 Drops Avg Toolbar","permalink":"/pcsx2-net-www/blog/2014/pcsx2-drops-avg-toolbar"},"nextItem":{"title":"PCSX2 Source Code Development Switches To Git","permalink":"/pcsx2-net-www/blog/2014/pcsx2-source-code-development-switches-to-git"}},"content":"I finally got around updated the configuration guide for the 1.2.1\\nrelease with all the new features and also adding some new plugins that\\nmost people don\'t know about\\n\\n\x3c!-- truncate --\x3e\\n\\nAs usual and you can find instructions on translating it to your language\\n[here.](http://forums.pcsx2.net/Thread-Translator-template-1-2-1)\\n\\nI have also updated our netplay plugin **DEV9giga-razi** to include the\\nlatest fixes brought by two contributors in Git,\\n[MrColdbird](https://github.com/MrColdbird) and\\n[Bigpet](https://github.com/Bigpet) whom we thank for their nice\\ncontributions. The plugin should crash much rarer than it did before, so\\nwe hope it will be usable for those who couldn\'t run it.\\n\\nFinally, thanks to a lot of contributions from forum members\\n(DESTRUIDOR,JBoughter,Altomar and many others), our compatibility list\\nhas been updated and expanded"},{"id":"/2014/pcsx2-source-code-development-switches-to-git","metadata":{"permalink":"/pcsx2-net-www/blog/2014/pcsx2-source-code-development-switches-to-git","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/pcsx2-source-code-development-switches-to-git/index.mdx","source":"@site/blog/2014/pcsx2-source-code-development-switches-to-git/index.mdx","title":"PCSX2 Source Code Development Switches To Git","description":"We just moved the PCSX2 version control system from SVN over to GIT","date":"2014-03-28T00:00:00.000Z","formattedDate":"March 28, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.74,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-03-28T00:00:00.000Z","description":"We just moved the PCSX2 version control system from SVN over to GIT","draft":false,"tags":["devblog"],"title":"PCSX2 Source Code Development Switches To Git"},"prevItem":{"title":"Config Guide 1.2.1, Updated Netplay Plugin, Updated Compatibility List","permalink":"/pcsx2-net-www/blog/2014/config-guide-1-2-1"},"nextItem":{"title":"Linux PCSX2 1.2.2 Release","permalink":"/pcsx2-net-www/blog/2014/linux-pcsx2-1-2-2-release"}},"content":"Hey everyone,\\n\\n\\nWe just moved the PCSX2 version control system from SVN over to GIT.\\nThe new official source code repository is hosted on GitHub.\\nYou can find the source code [here](https://github.com/PCSX2/pcsx2) .\\nAnd the new issue tracker [here](https://github.com/PCSX2/pcsx2/issues)\\n.\\n\\n\x3c!-- truncate --\x3e\\n\\nGit is more contributor friendly than SVN. The process of sending\\npatches to a team member for eventual review has been streamlined.\\nNow people can just fork the master repository, add their changes and\\nopen a pull request if they think it\'s good. The devs can then merge\\nthe request and the code is live.\\n\\nThis change is a pretty big operation, so please excuse (and report) any\\nissues you find while we\'re transferring\\n\ud83d\ude09\\n\\nKeep in mind the build bot will take some time to update to the new\\nsource code repository, whenever Orphis can get around to it so until\\nthen, be patient!"},{"id":"/2014/linux-pcsx2-1-2-2-release","metadata":{"permalink":"/pcsx2-net-www/blog/2014/linux-pcsx2-1-2-2-release","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/linux-pcsx2-1-2-2-release/index.mdx","source":"@site/blog/2014/linux-pcsx2-1-2-2-release/index.mdx","title":"Linux PCSX2 1.2.2 Release","description":"Dear Linux users, Here is a new release of the greatest PS2 emulator. At version 1.2.2 it is ahead of Windows this time","date":"2014-02-12T00:00:00.000Z","formattedDate":"February 12, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.385,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-02-12T00:00:00.000Z","description":"Dear Linux users, Here is a new release of the greatest PS2 emulator. At version 1.2.2 it is ahead of Windows this time","draft":false,"tags":["devblog"],"title":"Linux PCSX2 1.2.2 Release"},"prevItem":{"title":"PCSX2 Source Code Development Switches To Git","permalink":"/pcsx2-net-www/blog/2014/pcsx2-source-code-development-switches-to-git"},"nextItem":{"title":"Bug Fix Release - 1.2.1 Out","permalink":"/pcsx2-net-www/blog/2014/bug-fix-release-1-2-1-out"}},"content":"Dear Linux users,\\n\\n\x3c!-- truncate --\x3e\\n\\nHere is a new release of the greatest PS2 emulator\\n\ud83d\ude0a\\nAt version 1.2.2 it is ahead of Windows this time\\n\ud83d\ude09\\n\\nThis new release is based on version 1.2.1 plus two additional patches\\nregarding GSdx:\\n1/ It solves depth fighting issues when using NVIDIA drivers\\n2/ It solves random crashes with AMD drivers\\n\\nFor PPA users, you only need to update your system. For other Linux\\npackages, ping the maintainer."},{"id":"/2014/bug-fix-release-1-2-1-out","metadata":{"permalink":"/pcsx2-net-www/blog/2014/bug-fix-release-1-2-1-out","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/bug-fix-release-1-2-1-out/index.mdx","source":"@site/blog/2014/bug-fix-release-1-2-1-out/index.mdx","title":"Bug Fix Release - 1.2.1 Out","description":"This bugfix release fixes Psychonauts and others that rely on correct MFIFO","date":"2014-02-03T00:00:00.000Z","formattedDate":"February 3, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.23,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-02-03T00:00:00.000Z","description":"This bugfix release fixes Psychonauts and others that rely on correct MFIFO","draft":false,"tags":["devblog"],"title":"Bug Fix Release - 1.2.1 Out"},"prevItem":{"title":"Linux PCSX2 1.2.2 Release","permalink":"/pcsx2-net-www/blog/2014/linux-pcsx2-1-2-2-release"},"nextItem":{"title":"PCSX2 1.2.0 Released!","permalink":"/pcsx2-net-www/blog/2014/pcsx2-1-2-0-released"}},"content":"In other news, some sneaky bugs crept in and got past our amazing\\n10-step testing (\\n\ud83d\ude1b ).\\n\\n\x3c!-- truncate --\x3e\\n\\nThis bugfix release fixes Psychonauts and others that rely on correct\\nMFIFO\\n\\nSorry for this, we promise it was all refrac...eerrr some very bad\\nluck!"},{"id":"/2014/pcsx2-1-2-0-released","metadata":{"permalink":"/pcsx2-net-www/blog/2014/pcsx2-1-2-0-released","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2014/pcsx2-1-2-0-released/index.mdx","source":"@site/blog/2014/pcsx2-1-2-0-released/index.mdx","title":"PCSX2 1.2.0 Released!","description":"It has been a year and a half since our first major release and as promised we decided PCSX2 has progressed enough for yet another stable release","date":"2014-02-02T00:00:00.000Z","formattedDate":"February 2, 2014","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.67,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2014-02-02T00:00:00.000Z","description":"It has been a year and a half since our first major release and as promised we decided PCSX2 has progressed enough for yet another stable release","draft":false,"tags":["devblog"],"title":"PCSX2 1.2.0 Released!"},"prevItem":{"title":"Bug Fix Release - 1.2.1 Out","permalink":"/pcsx2-net-www/blog/2014/bug-fix-release-1-2-1-out"},"nextItem":{"title":"PCSX2 Partners With Avg","permalink":"/pcsx2-net-www/blog/2013/pcsx2-partners-with-avg"}},"content":"It has been a year and a half since our first major release and as\\npromised we decided PCSX2 has progressed enough for yet another stable\\nrelease. Needless to say, we have been continuing our hard work since\\nthen to further improve the emulator, adding new features and fixing\\nmore bugs.\\n\\n\x3c!-- truncate --\x3e\\n\\nAs I\'m sure many of you have been following the SVN revisions and have\\nnoticed the changes we have made in this time and many of you even\\nassisted in finding problems for us to fix, so a big thank you to all\\nthose who helped out!\\n\\nOne big change in this release is the integration of the wide screen\\npatches made by the community for the community numbering nearly 1200\\ngames patched to support proper 16:9 aspect ratio. A huge thanks to\\neveryone who has contributed for this and keep up the great job\\n\ud83d\ude0a\\n\\nHere are a rundown of the biggest changes in this release:\\n\\n**[ Windows ]{style=\\"text-decoration: underline;\\"}**\\n\\n**Core:**\\n\\n-   microVU fixes for Dreamworks games, later Tony Hawks games, Evil\\nDead and others\\n-   Fixes to New GIF unit to solve regressions\\n-   microVU bugs fixed (affecting Extreme-G Racing and others)\\n-   CDVD fixes (Impossible Mission now boots)\\n-   Path 3 arbitration and timing refinements\\n-   MFIFO fixes for DDR games\\n-   Huge DMAC bug fix solving most of the problematic videos. (Baldurs\\nGate 2, Katamari Damacy and more)\\n-   Memory card support improved in many games, now supports PSX memory\\ncards also Multitap support improved greatly\\n-   Many game fixes for COP2 problems inherent with emulation. (Ace\\nCombat, Forbidden Siren and others)\\n-   VIF Unpack optimizations\\n-   VU Delays added to fix the graphics of Snowblind engine games\\n(Champions of Norrath, Baldurs Gate 2)\\n-   Various other game specific fixes in GameDB\\n-   NVM file creation (if one doesn\'t exist) now fills in iLink ident.\\n(Age of Empires 2)\\n\\n\\n**SPU2-X:**\\n\\n-   Improved DMA system\\n-   Fixes to reverb\\n-   Improved time-stretcher recovery on extreme speed changes.\\n-   Portaudio (providing WASAPI in Windows, ALSA/+OSS in Linux) now\\nsupported and the default output module. Latencies with this mode\\nare lower than other modules\\n\\n\\n**GSdx:**\\n\\n-   Improved adapter selection for detecting of videocards\\n-   CLUT (Color LookUp Table) fixes for games such as Disney Golf\\n-   Texture Offset options added to help improve upscaling artifacts\\n-   OpenGL mode added (Experimental currently)\\n-   Various CRC hacks\\n-   Hack for NVIDIA cards, solves problems with stretching on drivers\\nabove 320.18\\n-   New shader resources! Complete PCSX2 FX Revised 2.0 by Asmodean has\\nbeen integrated\\n\\n****DEV9ghzdrk:****\\n\\n-   Improved support for online play and make the users MAC address\\nunique.\\n\\n\\n**[ Linux ]{style=\\"text-decoration: underline;\\"}\\n\\nCore:**\\n\\n-   Support for external patch (pnach) files\\n\\n\\n**OnePad changes:**\\n\\n-   Bugfixes for multiple button presses\\n-   Bugfixed memory leaks\\n\\n\\n**ZZogl:**\\n\\n-   Added support for MESA drivers\\n-   Bump OpenGL requirement to 3.0 with floating texture\\n-   Various OpenGL fixes\\n\\n\\n**SPU2-X:**\\n\\n-   Added SDL Backend\\n\\nThe PCSX2 executable has been built and tested with PGO optimizations\\nenabled so it will be an extra 10% faster over regular SVN builds.\\n\\nWe hope you enjoy this release and have fun playing your games on it!\\n\\nHere\'s to the future of PCSX2!"},{"id":"/2013/pcsx2-partners-with-avg","metadata":{"permalink":"/pcsx2-net-www/blog/2013/pcsx2-partners-with-avg","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2013/pcsx2-partners-with-avg/index.mdx","source":"@site/blog/2013/pcsx2-partners-with-avg/index.mdx","title":"PCSX2 Partners With Avg","description":"As you all know, PCSX2 is a free open source project that has been in development since early 2001","date":"2013-12-26T00:00:00.000Z","formattedDate":"December 26, 2013","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.88,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2013-12-26T00:00:00.000Z","description":"As you all know, PCSX2 is a free open source project that has been in development since early 2001","draft":false,"tags":["devblog"],"title":"PCSX2 Partners With Avg"},"prevItem":{"title":"PCSX2 1.2.0 Released!","permalink":"/pcsx2-net-www/blog/2014/pcsx2-1-2-0-released"},"nextItem":{"title":"Merry Christmas 2013","permalink":"/pcsx2-net-www/blog/2013/merry-christmas-2013"}},"content":"As you all know, PCSX2 is a free open source project that has been in\\ndevelopment since early 2001.\\nFor all these years the team has tried to give you the best emulator\\npossible, with everyone working on it voluntarily.\\n\\n\x3c!-- truncate --\x3e\\n\\nNow, after 12 years, development has slowed down considerably. This is\\ndue to both, the increased difficulty in ironing out the persistent bugs\\nand also lack of motivation from the few remaining developers to\\ndedicate the time that is needed.\\n\\nA few months ago a representative of AVG, the maker of a well-known\\nanti-virus solution, contacted us about a partnership offer.\\nAfter carefully considering the proposal, the team decided to accept the\\npartnership with AVG which will generate some much-needed income by\\nbundling the AVG SafeGuard product with PCSX2.\\n\\nThe money generated from this partnership will be divided among the team\\nmembers to provide incentive and motivation to further improve PCSX2.\\nUsing it we can invest in special hardware, recruit new coders or pay\\nsome bills, freeing up time for the project.\\n\\nWhat this means for the end-user:\\n- Our full installer for the official windows release (and ONLY that)\\nwill now come bundled with the AVG SafeGuard toolbar. When installing\\nusers will be free to opt-out and NOT install it.\\n- If you decide to accept the AVG toolbar, you will directly help the\\nteam keep PCSX2 going.\\n- Users will have increased protection against visiting potentially\\ndangerous websites, reducing the chance of getting viruses.\\n- The SafeGuard toolbar can be uninstalled like any other windows\\nprogram. If you require further asssistance in the removal process we\\nwill be happy to help.\\n\\nWe care for our users and we have accepted this offer after being\\nensured the toolbar is harmless and can be easily uninstalled if and\\nwhen a user decides to.\\nStill, if any of you have any problem you can ask for help in our forum\\nand we will do our best to help you.\\n\\nIn the end, we believe this move will be for the benefit of the project\\nand will play a significant role in improving PCSX2.\\n\\nThat said, we are already gearing up for a 1.2.0 release, so we will\\nkeep you posted when that happens!\\n\ud83d\ude0a"},{"id":"/2013/merry-christmas-2013","metadata":{"permalink":"/pcsx2-net-www/blog/2013/merry-christmas-2013","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2013/merry-christmas-2013/index.mdx","source":"@site/blog/2013/merry-christmas-2013/index.mdx","title":"Merry Christmas 2013","description":"The team wishes everyone a Merry Christmas!","date":"2013-12-24T00:00:00.000Z","formattedDate":"December 24, 2013","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.24,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2013-12-24T00:00:00.000Z","description":"The team wishes everyone a Merry Christmas!","draft":false,"tags":["devblog"],"title":"Merry Christmas 2013"},"prevItem":{"title":"PCSX2 Partners With Avg","permalink":"/pcsx2-net-www/blog/2013/pcsx2-partners-with-avg"},"nextItem":{"title":"Frontends,Cheating,Editors And More!","permalink":"/pcsx2-net-www/blog/2013/frontends-cheating-editors-and-more"}},"content":"The team wishes everyone a Merry Christmas!\\n\\n\x3c!-- truncate --\x3e\\n\\nWe hope you have a nice time off, play some games, visit family and\\nenjoy a great New Years, too!\\nSince we get some time off as well, we will be busy preparing a new\\nrelease. Promised!\\n\ud83d\ude0a"},{"id":"/2013/frontends-cheating-editors-and-more","metadata":{"permalink":"/pcsx2-net-www/blog/2013/frontends-cheating-editors-and-more","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2013/frontends-cheating-editors-and-more/index.mdx","source":"@site/blog/2013/frontends-cheating-editors-and-more/index.mdx","title":"Frontends,Cheating,Editors And More!","description":"After my earlier news post about some incredible tools our community members have developed for PCSX2, it\'s time people learn more about them","date":"2013-06-29T00:00:00.000Z","formattedDate":"June 29, 2013","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.725,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2013-06-29T00:00:00.000Z","description":"After my earlier news post about some incredible tools our community members have developed for PCSX2, it\'s time people learn more about them","draft":false,"tags":["devblog"],"title":"Frontends,Cheating,Editors And More!"},"prevItem":{"title":"Merry Christmas 2013","permalink":"/pcsx2-net-www/blog/2013/merry-christmas-2013"},"nextItem":{"title":"Official PCSX2 1.0.0 Configuration Guide Video","permalink":"/pcsx2-net-www/blog/2013/official-pcsx2-1-0-0-configuration-guide-video"}},"content":"After my earlier news post about some\\nincredible tools our community members have developed for PCSX2, it\'s\\ntime people learn more about them\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nAll the tool authors graciously gave us their permission to add their\\nvarious programs to our download system, so you can easily review them\\nand have them more accessible. You will find all kinds of tools, from\\nsome great **frontends for PCSX2** which so many people ask for, to very\\npowerful **save editors** and **cheat generators** to Scarlet Crush\'s\\nrenowned **Xinput wrapper for DS3 controllers** !\\n\\n\\nThanks to all the authors of these programs, which are all provided for\\nfree just like PCSX2! We\'ll try to keep everything updated to their\\nlatest versions for your convenience.\\n\\nP.S. If any tool author has any issues with the description or finds any\\nincorrect information, please contact me to fix it."},{"id":"/2013/official-pcsx2-1-0-0-configuration-guide-video","metadata":{"permalink":"/pcsx2-net-www/blog/2013/official-pcsx2-1-0-0-configuration-guide-video","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2013/official-pcsx2-1-0-0-configuration-guide-video/index.mdx","source":"@site/blog/2013/official-pcsx2-1-0-0-configuration-guide-video/index.mdx","title":"Official PCSX2 1.0.0 Configuration Guide Video","description":"After popular demand, I decided to create a video for everyone who prefers following a configuration step by step instead of reading one","date":"2013-02-10T00:00:00.000Z","formattedDate":"February 10, 2013","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.4,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2013-02-10T00:00:00.000Z","description":"After popular demand, I decided to create a video for everyone who prefers following a configuration step by step instead of reading one","draft":false,"tags":["devblog"],"title":"Official PCSX2 1.0.0 Configuration Guide Video"},"prevItem":{"title":"Frontends,Cheating,Editors And More!","permalink":"/pcsx2-net-www/blog/2013/frontends-cheating-editors-and-more"},"nextItem":{"title":"Merry Christmas From The PCSX2 Team - What\'s New","permalink":"/pcsx2-net-www/blog/2012/merry-christmas-from-the-pcsx2-team"}},"content":"After popular demand, I decided to create a video for everyone who\\nprefers following a configuration step by step instead of reading one.\\nAlso, since there are tons of \'best\' configuration videos for PCSX2\\nfloating around the web, it should be better to have an official one\\nwhich we will support\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nIf there is enough demand, I might create additional videos for speed\\nconfigurations or high end/quality configurations. **Set quality to\\n1080p** and enjoy!\\n\ud83d\ude0a\\n\\nhttps://www.youtube.com/embed/plo8rMytBNg?wmode=transparent&rel=0&fs=1&autoplay=1"},{"id":"/2012/merry-christmas-from-the-pcsx2-team","metadata":{"permalink":"/pcsx2-net-www/blog/2012/merry-christmas-from-the-pcsx2-team","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2012/merry-christmas-from-the-pcsx2-team/index.mdx","source":"@site/blog/2012/merry-christmas-from-the-pcsx2-team/index.mdx","title":"Merry Christmas From The PCSX2 Team - What\'s New","description":"It\'s that time of the year again and since everyone else is off drink...celebrating","date":"2012-12-25T00:00:00.000Z","formattedDate":"December 25, 2012","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.295,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2012-12-25T00:00:00.000Z","description":"It\'s that time of the year again and since everyone else is off drink...celebrating","draft":false,"tags":["devblog"],"title":"Merry Christmas From The PCSX2 Team - What\'s New"},"prevItem":{"title":"Official PCSX2 1.0.0 Configuration Guide Video","permalink":"/pcsx2-net-www/blog/2013/official-pcsx2-1-0-0-configuration-guide-video"},"nextItem":{"title":"PCSX2 1.0 Released!","permalink":"/pcsx2-net-www/blog/2012/pcsx2-1.0-released"}},"content":"It\'s that time of the year again and since everyone else is off\\ndrink...celebrating, I\'m the only one left around to wish all our\\nvisitors and users a Merry Christmas for 2012\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nAs you all can see development has been sluggish after the huge 1.0.0\\nrelease (as it always happens after releases) but there are still new\\nstuff to look out for. So since the release of 1.0.0 here is a breakdown\\nof most of the changes on PCSX2 itself and its plugins:\\n\\n-   Various SPU2-X fixes for crashes/hanging in some games\\n-   Snowblind engine fix (Baldur\'s Gate etc) which also fixed Mortal\\nKombat Shaolin Monks. Keep in mind Baldur\'s Gate games only work in\\nsoftware mode for now and with various bugs still (we are getting\\nthere...)\\n-   Adapter selector in GSdx so you can select your dedicated graphics\\ncard instead of that pesky on board graphics chip\\n-   Videos finally working for Katamari Damacy, Baldur\'s Gate, Tales of\\nDestiny 2, Suikoden Tactics, Midnight Club,Guilty Gear XX Accent\\nCore Plus, Ace Combat games and probably many more\\n-   Various fixes here and there\\n\\nThe website also got its share of fixes, with various layout fixes, a\\nmuch nicer looking video gallery under Demo, random screenshot on index\\npage really random (\\n\ud83d\ude1b ) and more functionality on the compatibility\\nlist. I am planning on adding some very handy features to it soon, which\\nare still under development but I\'m sure most will appreciate them!\\n\\nOur community has also been very active, with many members coding tools\\nand patches for PCSX2 which are worth a mention:\\n\\n-   [XInput Wrapper for DS3 and Play.com USB Dual DS2\\nController](http://forums.pcsx2.net/Thread-XInput-Wrapper-for-DS3-and-Play-com-USB-Dual-DS2-Controller)\\nby [Scarlet.Crush](http://forums.pcsx2.net/User-Scarlet-Crush) , so\\nyou can use your Playstation 3 DS3 controller with PCSX2 and PC\\ngames, supporting both rumble and button sensitivity\\n-   [Pokopom](http://forums.pcsx2.net/Thread-Pokopom-KrossX-s-Pad-Plugin)\\n, a (relatively) new pad plugin by\\n[KrossX](http://forums.pcsx2.net/User-KrossX) , which works great\\nfor Playstation 3 DS3 controllers in conjunction with the above\\nwrapper.\\n-   [Multi Converter - Cheats\\ndecrypter/converter/editor](http://forums.pcsx2.net/Thread-Multi-Converter-Cheats-decrypter-converter-editor-and-much-more)\\nby [vsub](http://forums.pcsx2.net/User-vsub) , a great tool for\\ncheat file generation of any kind but also providing save state\\npreview when ran along with PCSX2\\n-   You can find various tools for PCSX2 like save editors, cheat\\ngenerators and frontends in our [Tools\\nsection](http://forums.pcsx2.net/Forum-Tools-Applications-Homebrew)\\n-   [Wide screen patches for 429\\ngames](http://forums.pcsx2.net/Thread-PCSX2-Widescreen-Game-Patches?pid=271674#pid271674)\\n, submitted by many forum members whom we thank for their work, all\\norganized together by\\n[devina40](http://forums.pcsx2.net/User-devina40)\\n\\nFinally, our [Youtube channel](http://www.youtube.com/user/PCSX2team)\\nhas already exceeded the 1,000,000 views mark! Visit to watch various\\ngames running on PCSX2 in 1080p quality\\n\ud83d\ude0a\\n\\n\\nThat\'s it for now, keep in touch for more news (I promise we\'ll post\\nupdates more regularly from now on\\n\ud83d\ude1b ) and have a great time with family and friends\\n(and your PC!)"},{"id":"/2012/pcsx2-1.0-released","metadata":{"permalink":"/pcsx2-net-www/blog/2012/pcsx2-1.0-released","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2012/pcsx2-1.0-released/index.mdx","source":"@site/blog/2012/pcsx2-1.0-released/index.mdx","title":"PCSX2 1.0 Released!","description":"After many long years of development, debugging and testing effort, we have reached a point where PCSX2 runs a great majority of the games","date":"2012-08-03T00:00:00.000Z","formattedDate":"August 3, 2012","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.78,"hasTruncateMarker":true,"authors":[{"name":"rama","url":"https://github.com/ramapcsx2","imageURL":"https://github.com/ramapcsx2.png","key":"rama"}],"frontMatter":{"authors":["rama"],"date":"2012-08-03T00:00:00.000Z","description":"After many long years of development, debugging and testing effort, we have reached a point where PCSX2 runs a great majority of the games","draft":false,"tags":["devblog"],"title":"PCSX2 1.0 Released!"},"prevItem":{"title":"Merry Christmas From The PCSX2 Team - What\'s New","permalink":"/pcsx2-net-www/blog/2012/merry-christmas-from-the-pcsx2-team"},"nextItem":{"title":"PCSX2 Mac Updates","permalink":"/pcsx2-net-www/blog/2012/pcsx2-mac-updates"}},"content":"After many long years of development, debugging and testing effort, we\\nhave reached a point where PCSX2 runs a great majority of the games, and\\nthere are no important issues that could possibly be fixed without\\nrequiring major modifications to the emulator.\\n\\n\x3c!-- truncate --\x3e\\n\\nBecause of that (and because we already felt it was overdue), we decided\\nto stop thinking of new things to do for a bit, polish the stability,\\ncompatibility and existing features and release the result as the first\\nmajor version of PCSX2!\\n\\nThere have been tons of changes since the last release, including\\nimprovements to Jake Stine\'s wxWidgets GUI overhaul, cottonvibes\' new\\nmultithreaded VU core and improvements on the primary plugins.\\n\\nThis release is a big milestone that marks the way to new features and\\nimprovements!\\n\\nHere is an excerpt of the latest changes:\\n\\n**Windows**\\n\\n**Core:**\\n\\n-   Video timing adjustments\\n-   microVU fixes for Metal Gear Solid 2 and others\\n-   General speedups\\n-   microVU speedup\\n-   New GIF unit that mimics the real one better\\n-   microVU elementary function bug fixed (affecting Valkyrie Profile 2,\\nRadiata Stories and Star Ocean 3)\\n-   Implemented Multi-Threaded VU! A new speed hack with almost 100%\\ncompatibility with games, using a third core to run the VU1 unit\\nseparately\\n-   CDVD fixes (Time Crisis boots now)\\n-   Added support for progressive scan timings\\n-   Path 3 arbitration and timing refinements\\n-   Added Finnish, Malaysian, Korean, French, Indonesian, Italian,\\nJapanese and Polish translations\\n\\n\\n**SPU2-X:**\\n\\n-   Configurable output volume\\n-   Fixes to reverb\\n-   Various sound looping fixes\\n-   Improved time stretcher\\n-   Reverse phase audio quality improved\\n\\n\\n**GSdx:**\\n\\n-   Fixed RGB mode movie recording\\n-   Texture cache change that fixes some black screening games\\n-   Implemented NVidia FXAA 3.10, page up key activates it\\n-   Better multithreading\\n-   Arc the Lad bad fog fix\\n-   Fixed shadows in software renderer\\n-   Implementation of GSdx \\"Shadeboost\\" project (saturation,\\nbrightness, contrast settings)\\n-   User configurable hacks in the GUI\\n-   Fixed flickering in many FMVs\\n-   Implementation of GSdx \\"Cutie\\" project (various extra CRC hacks)\\n\\n\\n**Lilypad:**\\n\\n-   Pad state getting stuck with savestates bug fixed\\n\\n\\n**USBqemu:**\\n\\n-   Revamped it a bit\\n\\n\\n**Linux:**\\n\\n**OnePad changes:**\\n\\n-   New dialog configuration panel\\n-   Improved support of various pad (sixaxis)/mouse/wiimote\\n-   Added support for more controllers\\n-   Added support for pressure-sensitive buttons\\n\\n\\n**GSdx:**\\n\\n-   GSdx ported for Linux! Based on OpenGL 3.3 with some 4.x hardware\\nindependent extensions. Requires OpenGL 4.2 drivers and is still in\\nexperimental stages. Don\'t expect the hardware renderer to run\\nproperly, but the Software renderer should be fine.\\n\\n-   Added support for configuration and keyboard shortcuts from PCSX2\\n\\n\\n**ZZogl:**\\n\\n-   Added support for configuration and keyboard shortcuts from PCSX2\\n-   Added a GLSL backend to replace CG. Like GSdx, it requires OpenGL\\n4.2 drivers. Only available with PCSX2 self-compilation.\\n\\n\\n**PCSX2 GUI:**\\n\\n-   Added thread timing information to see the CPU usage in the status\\nbar\\n-   Fix multiple frame/box letters sizing.\\n\\n\\n\\nIn addition to these changes we found a fixed several bugs that could\\nlead to crashes in various situations.\\nThe PCSX2 executable has been built and tested with PGO optimizations\\nenabled so it will be an extra 10% faster over regular SVN builds.\\n\\nWe hope you enjoy this first major version release and have fun playing\\nyour games on it!\\n\ud83d\ude0a\\n\\n[Share on reddit\\nhere!](http://www.reddit.com/r/gaming/comments/xmvhm/ps2_emulator_pcsx2_version_10_out/)"},{"id":"/2012/pcsx2-mac-updates","metadata":{"permalink":"/pcsx2-net-www/blog/2012/pcsx2-mac-updates","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2012/pcsx2-mac-updates/index.mdx","source":"@site/blog/2012/pcsx2-mac-updates/index.mdx","title":"PCSX2 Mac Updates","description":"The developer of the Mac port of PCSX2 zedr0n came back with a bang","date":"2012-07-02T00:00:00.000Z","formattedDate":"July 2, 2012","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.645,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2012-07-02T00:00:00.000Z","description":"The developer of the Mac port of PCSX2 zedr0n came back with a bang","draft":false,"tags":["devblog"],"title":"PCSX2 Mac Updates"},"prevItem":{"title":"PCSX2 1.0 Released!","permalink":"/pcsx2-net-www/blog/2012/pcsx2-1.0-released"},"nextItem":{"title":"PCSX2.Net Revamped","permalink":"/pcsx2-net-www/blog/2012/pcsx2-net-revamped"}},"content":"The developer of the Mac port of PCSX2,\\n[zedr0n](http://forums.pcsx2.net/User-zedr0n) , came back with a bang\\nafter some time of silence! He has released a new version of his 0.9.6\\nport of PCSX2 for Lion with some additional compatibility fixes. Here is\\nwhat he had to say about it:\\n\\n\x3c!-- truncate --\x3e\\n\\n> I\'m releasing a slightly updated version of pcsx2 0.9.6 it\\n> should crash less because of the audio plugin. 0.9.7 is proving very\\n> difficult so no update for now.\\n>\\n> From this version onwards this becomes a regular .dmg bundle with\\n> pcsx2.app separated from the required libraries package which is still\\n> included in the dmg by default.\\n> You can get it from Downloads or direct link pcsx2.dmg\\n>\\n> The package has been cleaned so that all libraries reside in\\n> /usr/local/pcsx2 and can be removed easily. The Uninstaller.pkg\\n> included in the dmg will do that for you.\\n>\\n> Latest version of XQuartz and CG framework still required\\n\\nIn addition, he released an early 0.9.7 alpha port. This version should\\nbe considered unstable and pre-beta but you can give it a try. Here is\\nwhat was posted about this:\\n\\n> And the day has come Im releasing a very early alpha\\n> version of 0.9.7 it does play some games but you are advised to do a\\n> lot of save states.\\n>\\n> Im going to continue working on this so hopefully will get better as\\n> the time goes on.\\n>\\n> You can grab it here: pcsx2 0.9.7.dmg\\n>\\n> The installer includes another mandatory package WXWidgets.pkg which\\n> should be installed after Libraries.pkg. Note that Uninstaller.pkg is\\n> going to delete the whole install but otherwise 0.9.6 and 0.9.7\\n> coexist well.\\n\\nHere are some comparative screenshots of Final Fantasy X, 0.9.6 (left)\\nvs 0.9.7 (right)\\n\\n<Image cols={4} src={require(\\"./img/comp1s.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/comp2s.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/comp3s.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/comp4s.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/comp5s.jpg\\").default} />"},{"id":"/2012/pcsx2-net-revamped","metadata":{"permalink":"/pcsx2-net-www/blog/2012/pcsx2-net-revamped","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2012/pcsx2-net-revamped/index.mdx","source":"@site/blog/2012/pcsx2-net-revamped/index.mdx","title":"PCSX2.Net Revamped","description":"After almost 3 months of under cover preparation, I present you the new PCSX2 homepage","date":"2012-05-27T00:00:00.000Z","formattedDate":"May 27, 2012","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.515,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2012-05-27T00:00:00.000Z","description":"After almost 3 months of under cover preparation, I present you the new PCSX2 homepage","draft":false,"tags":["devblog"],"title":"PCSX2.Net Revamped"},"prevItem":{"title":"PCSX2 Mac Updates","permalink":"/pcsx2-net-www/blog/2012/pcsx2-mac-updates"},"nextItem":{"title":"Interview At Goodgame.Hr","permalink":"/pcsx2-net-www/blog/2012/interview-at-goodgame-hr"}},"content":"After almost 3 months of under cover preparation, I present you the new\\nPCSX2 homepage! The last PCSX2.net redesign was done 7 years ago by\\nCKemu and Falcon4ever and now it is my turn to update it\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nThe new website is based on the latest Joomla! platform with a custom\\nmodified theme for PCSX2, and is no longer bound to our forum. It uses\\nPHP, a new database for the compatibility list and jQuery for various\\nnew features. Here\'s a short overview:\\n\\n# **Design:**\\n\\n-   Totally fresh design, taking into consideration higher resolutions\\nand a self-adapting template, so the website will take up all your\\nscreen no matter what resolution you use.\\n\\n-   Detection for iOS and Android, in which case the website uses a more\\nmobile theme.\\n\\n-   Tested and working in Firefox, Chrome, IE9, IE8 and Opera.\\n\\n-   Article-based, so you can link and like/share each news post or dev\\nblog separately.\\n\\n# **Content-Features:**\\n\\n-   New main navigation menu, **more user friendly with much more\\ncontent** and easy to follow\\n\\n-   **Latest forum threads, youtube videos and SVN revisions,\\nautomatically updated via RSS every 3 minutes** , for the most up to\\ndate overview of what\'s new with PCSX2.\\n\\n-   **Compatibility list redesigned from scratch** . New list look to\\neasily find what you\'re looking for, more info like last updated\\nand tester who updated and screenshots (not complete yet).\\nPagination is done via jQuery for faster and easier navigation.\\nAdded counters for each status and a user configured games per page,\\nso you can limit the results for smaller screens or vice versa for\\nlarger ones.\\n\\n-   **New, detailed Downloads section. This is the largest change of the\\nnew website along the compatibility list** , which was enormous\\nwork. All downloads are now categorized in sections for easier and\\nclearer navigation. They all have detailed descriptions, file size,\\ndate published and more info. Almost every plugin released for PCSX2\\ncan be found in the windows plugin section, including Dev9gigarazi,\\nNuvee and more.\\n\\nAfter endless digging on the internet since 2002 when PCSX2 had its\\nfirst public release, the archive section was completed. **There you\\nwill find ALL PCSX2 versions ever released, from** **v0.026 up to\\nthe current v0.9.8 with source code and Linux releases when\\npossible.** You will also find old GSdx versions and betas.\\n\\n-   One button google translate of the website, for our non english\\nspeaking visitors.\\n\\n-   Share box, so you can like on facebook, +1 on google and share on\\ntwitter and make PCSX2 known to even more people. You can also share\\nnews posts after you click on the title\\n\ud83d\ude0a\\n\\n-   Compatibility overview, showing you the compatibility status of\\nPCSX2 of our total game pool, updated daily.\\n\\n-   Search function, so you can find old news or blog posts easily.\\n\\n-   Read more button for news - blog posts which are too long and made\\nthe site look bad.\\n\\n-   Screenshots and videos section, with sexy lightbox pop ups for\\nimages.\\n\\n-   Article archive for a nice overview of our posts over the years.\\n\\n-   More stuff I probably forgot\\n\ud83d\ude1b\\n\\n# Code and speed\\n\\n-   In general the new website should be a bit slower than the old due\\nto the additional features, but should be barely noticeable.\\n\\n-   Vastly optimized compatibility list with the development of a new\\ndatabase for it, server side and client side caching for reduced\\nserver load.\\n\\n-   Search engine optimized, we should rank much higher in google now\\nthanks to meta tags in each article and SEO URLs.\\n\\n-   Server side and client side caching for the whole website, reducing\\nserver load and decreasing load times.\\n\\n-   Script and CSS minifying functions.\\n\\nI hope everyone enjoys the website and finds it as exciting as I do,\\neven after working on it for so long\\n\ud83d\ude0a You can post your feedback or any bugs you find\\nin this forum thread (if you flame it you\'re banned!):\\n<http://forums.pcsx2.net/Thread-PCSX2-net-revamped>\\n\\nFinally, I want to thank Falcon4ever for helping with the server side of\\nstuff and all team members for their valuable input on how things should\\nlook and feel. Dedicated to all our loyal user base!\\n\\n-bositman"},{"id":"/2012/interview-at-goodgame-hr","metadata":{"permalink":"/pcsx2-net-www/blog/2012/interview-at-goodgame-hr","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2012/interview-at-goodgame-hr/index.mdx","source":"@site/blog/2012/interview-at-goodgame-hr/index.mdx","title":"Interview At Goodgame.Hr","description":"Some days ago we were contacted by a Croatian gaming site goodgame.hr and were asked to give an interview about PCSX2","date":"2012-03-28T00:00:00.000Z","formattedDate":"March 28, 2012","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":9.71,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2012-03-28T00:00:00.000Z","description":"Some days ago we were contacted by a Croatian gaming site goodgame.hr and were asked to give an interview about PCSX2","draft":false,"tags":["devblog"],"title":"Interview At Goodgame.Hr"},"prevItem":{"title":"PCSX2.Net Revamped","permalink":"/pcsx2-net-www/blog/2012/pcsx2-net-revamped"},"nextItem":{"title":"Merry Christmas","permalink":"/pcsx2-net-www/blog/2011/merry-christmas"}},"content":"Some days ago we were contacted by a Croatian gaming site\\n[goodgame.hr](http://www.goodgame.hr) and were asked to give an\\ninterview about PCSX2\\n\ud83d\ude0a We were happy to answer all the questions and\\nhelp make PCSX2 known to even more people, so here it is:\\n\\n\x3c!-- truncate --\x3e\\n\\n*1.Hello. Can you tell us something about yourself before we get on with\\nthe interview?*\\n\\nI\'m \'bositman\', I\'ve been with the PCSX2 team since 2003 and I am\\nresponsible for the site, forum, configuration guide, user support,\\ndocumentation and testing.\\n\\n\\n*2.Can you briefly tell us about development of PCSX2 emulator till this\\nday?*\\n\\nPCSX2 has advanced immensely in the past 2 years. With the 0.9.8 release\\nthe compatibility and speed of the emulator got dramatically increased,\\nto the point that almost every modern system can handle most games. With\\nthe latest addition of the MTVU speed hack (multi-threaded VU, runs the\\nVU1 unit in a separate thread, taking advantage of a third core, since\\nEE and GS already run in separate threads) many users got some nice\\n~15% speed up on their quad cores\\n\ud83d\ude0a\\n\\n\\n*3.How much people are working on this project? When has it all\\nstarted?*\\n\\nUnfortunately currently the development team has been reduced in size\\nsince cottonvibes and Jake Stine both found demanding jobs and had to\\nleave the project. Still, rama, pseudonym, refraction, gregory, arcum,\\navih and Gabest (with a big comeback!) are working on PCSX2 these days.\\nIt all started back in 2001 with shadow (A.K.A. expert, the current team\\nleader of JPCSP) and linuzappz both founders of the PCSX(1) project.\\nThey started from the PCSX(1) source since the two systems share some\\nparts. I joined the team around 2003 assisting in testing and without\\nany particular knowledge of the PS2 or computer science. 10 (!!) years\\nlater, here we are\\n\ud83d\ude0a\\n\\n*4.Is it hard to work on the emulator development and what are the most\\ncommon problems you face?*\\n\\nIt can be very frustrating at times. I recall times where the documents\\nthe coders were basing their code on were wrong or inaccurate, while we\\nwere looking for the bug in our code implementation. Other times, you\\nfix something but something else that was relying on it and was also\\nbuggy works worse after the fix, instead of better.\\nThings are so intertwined it is often impossible to know the result of a\\nbug fix or an improvement, even if the code is clearly better than\\nbefore.\\n\\n*5.Where there any differences between developing PCSX2 and PCSX?*\\n\\nThe PS2 is a whole world different than the PS1 in terms of complexity,\\nI know that much. The SPU unit and some part of the R5900 CPU are very\\nclose to the PS1 but that\'s where my knowledge ends. You\'ll have to\\nask shadow or linuzappz for more info about that!\\n\\n*6.Considering the amount of information and options regarding the\\nPCSX2, average user can be frightened over complicity of using PCSX2.\\nSome other emulators are far simpler with no additional adjustments\\nregarding graphics. Is PCSX2 more complicated because its better?*\\n\\nNo, that\'s not the reason. We offer so many options to give the user\\nmore freedom to tweak the emulator as he likes. This way power users can\\nachieve more things, rather than if we had only a couple of simple\\noptions.\\nWe also have the configuration guide I\'ve created which has been\\ntranslated by PCSX2 fans in 25 different languages (great job guys!)\\nwhich can be found in our website and forum. Avih recently made a quick\\nstart guide for those who are bored of reading the big one and just want\\nto play fast.\\nAdditionally, we introduced the preset system in the 0.9.8 release,\\nwhich is a slider that changes settings from safest and most compatible\\nto fastest and less compatible for some fast and easy tweaking without\\nthe need of knowing what the options do.\\nWe understand that the new users might be scared by the dozens of\\noptions PCSX2 has, but since 0.9.8 the emulator comes configured with\\nthe most compatible settings. All you have to do is install it, choose\\nyour game and run it. Most games work great with the pre configured\\nsettings we have\\n\ud83d\ude0a\\n\\n*7.Do you think that you reached the limit in emulator development or\\nare there more things to add in PCSX2?*\\n\\nThere are tons of things that can still be added in PCSX2. Netplay and\\nUSB emulation are two things that come in mind which are in very early\\ndevelopment stages. Of course compatibility and speed are still being\\nimproved daily in small (or sometimes big) steps.\\n\\n*8.How much money do you make on developing PCSX2? Is there any profit?\\nIf not, why do you do it?*\\n\\nThe team doesn\'t get paid for developing PCSX2. We use the google ads\\non our site and any donations from fans to pay for the server costs and\\nif there is any more left we use it to upgrade the developer\'s systems\\nso they can more easily integrate new technologies.\\n\\n*9.Personally, on my configuration (Core 2 Duo 2.66, Nvidia GeForce\\n9600GT, 2 GB Ram) Ive noticed that RPG games are more pleasant to play\\non normal graphic adjustments and with speed hacks enabled. Other games\\nare too slow, glitchy or unplayable at all. Which configuration is\\noptimal for PCSX2?*\\n\\nThis is one of the most frequent questions we get\\n\ud83d\ude0a The truth is, there is no \'golden\\nconfiguration\' for everything and this is why we have so many options\\nin PCSX2. The best configuration for the system you mentioned in your\\nquestion might be the worst for an older PC. The same goes for various\\ngames, a good configuration for game X might not even work with game Y.\\nBut to give you a general idea, a configuration that works with most\\ngames and at nice speeds is the default one with all speed hacks marked\\nas [recommended] enabled. Of course there are games which are glitch,\\nvery slow or simply not working for which you cant do anything but hope\\nthe next version of PCSX2 takes care of those bugs for you\\n\ud83d\ude0a\\n\\n*10.What is your attitude towards new HD editions of different games?\\nMaybe they would not be developed if they haven\'t seen the graphic\\nimprovement on your PCSX2?*\\n\\nIf you ask me, the HD remakes of PS2 games on the PS3 look worse than\\nthe initial PS2 game upscaled with PCSX2 at x3 or x4 its original\\nresolution. Still, I\'m sure that even if everyone knew and could play\\ntheir games in HD using PCSX2, Sony would still release these HD remakes\\nsince it\'s very easy money for them with minimal costs.\\nIn addition, some HD remakes add more detail instead of just increasing\\nthe resolution, something PCSX2 will never be able to do\\n\ud83d\ude0a\\n\\n*11.What percentage of games is compatible with the PCSX2?*\\n\\nAccording to our compatibility list and if we project that percentage to\\nthe total of PS2 games, it should be around 70% playable games, huge\\nnumber in my opinion\\n\ud83d\ude0a\\n\\n*12.What is SONY\'s official attitude towards PCSX2?*\\n\\nSony has not bothered us and we haven\'t bothered them either\\n\ud83d\ude1b They certainly know we exist, but we never had\\nany legal problem with them, which was expected.\\nEven if Sony hated us, the PCSX2 team has been very careful to not\\ninfringe any copyright of Sony since PCSX2 is provided for free, the\\nwhole program was created with reverse engineering, no BIOS files are\\nprovided with it which is a Sony copyright and there is no support for\\npiracy in our help forum.\\nSo in the end, everyone is happy\\n\ud83d\ude0a\\n\\n*13.Do you think that there is anything illegal with your emulator? Lets\\nface it, many users dont have original games but they download illegally\\nthe games and then play it on the computer. How does PCSX2 deal with\\nthese situations?*\\n\\nAs I explained in the previous question, there is nothing illegal with\\nPCSX2. Yes I agree there are many people who use PCSX2 with illegally\\ndownloaded games and BIOS files, but this is out of our control. We\\nprovide the program, if you use it legally or not is up to the user who\\nis responsible for his actions. The PCSX2 team gives no support for\\nanyone who is found to have pirated games or BIOS files, which is all we\\ncan do.\\nNo one thinks of the other side though, which in my opinion is very\\ncommon too. There are many people who own a PS2 console and because of\\nthe features PCSX2 offers them (increased resolution, texture filtering,\\nsave states, infinite memcards, usage of any pad-keyboard-mouse, cheats\\netc) buy old PS2 games just to play them on the emulator which otherwise\\nthey would not, thus increasing Sony sales.\\n\\n*14.Considering the small number of people who know how emulators are\\nbeing developed, can you describe the process to us? How much time takes\\nbetween two versions? Do you have strict schedule? Offices? Secretary?\\n\ud83d\ude0a*\\n\\nI can\'t tell you about the coding process since this was not my role on\\nthe team, but I can tell you about the release process. We make a new\\nrelease when we feel that the changes from the previous versions are big\\nenough to warrant it and when it is stable enough for people to use.\\nThere is no strict schedule but there is hours and hours and hours (you\\nget the drift\\n\ud83d\ude1b ) of testing so we make sure that the release\\nwill be stable and of high standards. This is usually achieved by\\nreleasing internally to testers only some Release Candidate versions and\\ndebugging them until they are stable. All the documentation and the\\nconfiguration guide are updated. We also have a room of hot, half naked\\nsecretaries where the team members get their massage and...oh wait I\'m\\nnot supposed to tell you that!!\\n\\n*15.When will the next version go out?*\\n\\nI hate to do it but I\'ll have to use the cliche \\"When it\'s ready\\".\\nAs I described above, a release will be made when the team believes\\nthere have been significant improvements over the previous version, the\\nprogram is stable and has been tested with lots of games to make sure.\\nUsing our release scheme (odd numbers like 0.9.7 and 0.9.9 are\\nbeta-unstable releases while even numbers like 0.9.8 or...1.0.0(!!!\\nwe\'re not sure about that yet!\\n\ud83d\ude1b ) are stable releases) the next one (0.9.9) will\\nbe beta-SVN only.\\n\\n*16.Is it realistic to expect a PlayStation 3 emulator in a near\\nfuture?*\\n\\nIf you ask me, no it isn\'t. It is possible some development might start\\nin the near future (just like PCSX2 started back at 2001) but keep in\\nmind PCSX2 could run games decently at around 2007, 6 years after it\\nstarted! Now imagine how much time a PS3 emulator would need to start\\nrunning games properly (if it ever happens) considering the PS3 is more\\ncomplex and MUCH more powerful than the PS2....\\nStill, never say never\\n\ud83d\ude0a I\'d just like to warn people to NOT believe\\nsome youtube videos or websites advertising working PS3 emulators\\nbecause they are all fake and virus infested (we recently found one of\\nthese sites posted in our forum). It will take years before that will\\nhappen for real\\n\ud83d\ude0a\\n\\nThank you for your time and thank you for getting to know the GG public\\nwith all the details of PCSX2 emulator\\n\ud83d\ude0a\\nThank you for giving us the chance to talk about PCSX2 and let more\\npeople know of it\\n\ud83d\ude0a\\n\\nYou can check out the posted article here (although it\'s obviously in\\nCroatian\\n\ud83d\ude1b ):\\n[http://www.goodgame.hr/vijesti/gg-interv...m-intervju](http://www.goodgame.hr/vijesti/gg-interviewpcsx-2-team-intervju)"},{"id":"/2011/merry-christmas","metadata":{"permalink":"/pcsx2-net-www/blog/2011/merry-christmas","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/merry-christmas/index.mdx","source":"@site/blog/2011/merry-christmas/index.mdx","title":"Merry Christmas","description":"It\'s already close to 2012 but here I am once more wishing on Christmas day to everyone following and using PCSX2!","date":"2011-12-25T00:00:00.000Z","formattedDate":"December 25, 2011","tags":[],"readingTime":0.65,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2011-12-25T00:00:00.000Z","description":"It\'s already close to 2012 but here I am once more wishing on Christmas day to everyone following and using PCSX2!","draft":false,"title":"Merry Christmas"},"prevItem":{"title":"Interview At Goodgame.Hr","permalink":"/pcsx2-net-www/blog/2012/interview-at-goodgame-hr"},"nextItem":{"title":"News And Updates","permalink":"/pcsx2-net-www/blog/2011/news-and-updates"}},"content":"It\'s already close to 2012 but here I am once more wishing on Christmas day to everyone following and using PCSX2!\\n\\n\x3c!-- truncate --\x3e\\n\\nSo we all wish you will get what you want (and wish even more it\'s a new PC so you can run PCSX2 better!!), have fun and enjoy these few days with your loved ones because that\'s what counts in the end. If you don\'t celebrate Christmas, Merry Sunday!\\n\\nIn other news, 0.9.9 is still in development with Gabest making a surprise comeback lately and working on the software rendering of GSdx. You can give the latest changes a try by going [HERE](/downloads)\\n\\nAnd finally, an image I ripp..err found on the internet which is\\nappropriate for the day and place! \ud83d\ude1b\\n\\n<Image cols={6} src={require(\\"./img/kratosxmas.jpg\\").default} />"},{"id":"/2011/news-and-updates","metadata":{"permalink":"/pcsx2-net-www/blog/2011/news-and-updates","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/news-and-updates/index.mdx","source":"@site/blog/2011/news-and-updates/index.mdx","title":"News And Updates","description":"It\'s been some time since the last news post so this will help bring everyone up to date with what we\'ve been up to.","date":"2011-11-20T00:00:00.000Z","formattedDate":"November 20, 2011","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":1.69,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2011-11-20T00:00:00.000Z","description":"It\'s been some time since the last news post so this will help bring everyone up to date with what we\'ve been up to.","draft":false,"tags":["progress-report"],"title":"News And Updates"},"prevItem":{"title":"Merry Christmas","permalink":"/pcsx2-net-www/blog/2011/merry-christmas"},"nextItem":{"title":"A Farewell From Cottonvibes","permalink":"/pcsx2-net-www/blog/2011/a-farewell-from-cottonvibes"}},"content":"It\'s been some time since the last news post so this will help bring everyone up to date with what we\'ve been up to.\\n\\n\x3c!-- truncate --\x3e\\n\\n- For those of you who haven\'t heard, the latest SVN builds of PCSX2\\nhave a new speed hack thanks to cottonvibes, named MTVU (multi threaded\\nVU) which enables PCSX2 to use 3 threads now! (4 if you count the minor\\nGUI thread). The speed hack has very high compatibility and provides a\\nbig speed boost in most games, especially for triple and quad core CPUs\\n(but even on dual cores).\\n\\n- We have a new page on our site, which you can view by clicking \'SVN\'\\nat the top menu. You will find the 20 latest SVN builds there, courtesy\\nof Orphis\' build bot so you will be always up to date with the bleeding\\nedge changes in PCSX2! Do keep in mind that these builds might be a bit\\nbuggier than the official releases since they are all work in progress.\\n\\n- The configuration\\nguide has been updated for the 0.9.8 release (a bit late\\n\ud83d\ude1b) and a new [quick start\\nguide](http://forums.pcsx2.net/Thread-Quick-Start-PCSX2-Configuration-Guide-v0-9-8)\\nhas been created by avih aiming to be much more compact and easy to\\nread. As always you can apply for translating in [this\\nthread](http://forums.pcsx2.net/Thread-Program-and-Guide-translation-applications)\\n. Check them both out!\\n\\n- A new input plugin named Nuvee and developed by Shalma came to our\\nattention, which is the first to support Lightguns and USB Mice! It\\nseems it already works with almost all games supporting Lightguns so be\\nsure to check it out\\n[HERE](http://forums.pcsx2.net/Thread-Nuvee-PS1-PS2-input-plugin-supporting-lightguns-by-Shalma).\\n\\n- New PCSX2 wiki hosted on our server, you can find it\\n[here!](http://wiki.pcsx2.net) . With your input, the wiki will\\neventually become a huge knowledge base for individual game settings and\\nknown workarounds for bugs, so those of you willing, start contributing\\nyour findings\\n\ud83d\ude0a\\n\\n- Our youtube channel already has over 150,000 video views and almost\\n2,000 subscribers!\\n\ud83d\ude0a You can visit it by clicking\\n[HERE](http://www.youtube.com/user/PCSX2team) .\\n\\nThat\'s all for now\\n\ud83d\ude0a"},{"id":"/2011/a-farewell-from-cottonvibes","metadata":{"permalink":"/pcsx2-net-www/blog/2011/a-farewell-from-cottonvibes","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/a-farewell-from-cottonvibes/index.mdx","source":"@site/blog/2011/a-farewell-from-cottonvibes/index.mdx","title":"A Farewell From Cottonvibes","description":"As of today I am officially retiring from the PCSX2 emulation project","date":"2011-11-10T00:00:00.000Z","formattedDate":"November 10, 2011","tags":[],"readingTime":0.73,"hasTruncateMarker":true,"authors":[{"name":"cottonvibes","key":"cottonvibes"}],"frontMatter":{"authors":["cottonvibes"],"date":"2011-11-10T00:00:00.000Z","description":"As of today I am officially retiring from the PCSX2 emulation project","draft":false,"title":"A Farewell From Cottonvibes"},"prevItem":{"title":"News And Updates","permalink":"/pcsx2-net-www/blog/2011/news-and-updates"},"nextItem":{"title":"Path masking and geometry syncing","permalink":"/pcsx2-net-www/blog/2011/path-masking-geometry-syncing"}},"content":"As of today I am officially retiring from the PCSX2 emulation project.\\nI am being offered a great job opportunity which will not only utilize\\nmy programming skills, but will provide an environment which allows them\\nto further grow and improve.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe decision to leave was not an easy one, and I would not leave the\\nproject for just any job, but this career opportunity is too good to let\\nit slide.\\n\\nI have learned a great deal in my years coding for PCSX2, and I want to\\nthank the team for allowing me to work with them on this great project.\\nI hope the project continues to improve in my absence, and I look\\nforward to the future PCSX2 v1.0 release.\\n\\nSo to the PCSX2 team, thanks and good luck!\\nAnd thank you to the users who appreciated my work.\\n\\n> cottonvibes"},{"id":"/2011/path-masking-geometry-syncing","metadata":{"permalink":"/pcsx2-net-www/blog/2011/path-masking-geometry-syncing","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/path-masking-geometry-syncing/index.mdx","source":"@site/blog/2011/path-masking-geometry-syncing/index.mdx","title":"Path masking and geometry syncing","description":"I promised myself ages ago I would write a blog about this","date":"2011-09-02T00:00:00.000Z","formattedDate":"September 2, 2011","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.53,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2011-09-02T00:00:00.000Z","description":"I promised myself ages ago I would write a blog about this","draft":false,"hide_table_of_contents":true,"image":"./feature-personapath3.webp","tags":["devblog"],"title":"Path masking and geometry syncing"},"prevItem":{"title":"A Farewell From Cottonvibes","permalink":"/pcsx2-net-www/blog/2011/a-farewell-from-cottonvibes"},"nextItem":{"title":"Threading Vu1","permalink":"/pcsx2-net-www/blog/2011/threading-vu1"}},"content":"I promised myself ages ago I would write a blog about this, more for the\\nPS2 community than anything else as this seems to be almost a dark art\\nin terms of understanding how it works.\\n\\n\x3c!-- truncate --\x3e\\n\\nSome of you may be familiar with Path 3 masking, some of you may not. In\\nany versions around 0.9.4 or older, have you ever played a game where\\nsay some of the floor textures have had writing on them or just looked\\nlike absolute crap? Well the likelihood is that was due to Path 3\\nMasking problems. For those not familiar, here is a picture example of\\nPersona 4 displaying Path 3 masking issues.\\n\\n![](img/personapath3.webp)\\n\\n**So, what is it exactly?**\\n\\nPath 3 masking is a method of synchronizing the order in which geometry\\ndata (polygons etc) and the textures that go on them are sent to the GS\\n(Graphical Synthesizer). It was a pretty efficient method of\\ntransferring information, which took completely different path routes to\\nmake optimal use of the PS2 Memory BUS and used a stalling method to\\nkeep the texture and geometry lists in order instead of interrupts which\\ntook extra cpu time. This way, developers could queue up massive amounts\\nof textures and stream them to the GS in time with the geometry data\\nefficiently.\\n\\nHere is a badly drawn diagram showing what the Mask does:\\n\\n![](img/Path3mask.webp)\\n\\nAs you can see, the mask stops PATH3 from transferring while the VU is\\nbusy, then lets it go and almost immediately puts the mask back on, this\\nensures that at the end of the texture transfer, PATH3 stops again!\\n\\n**So what was the problem? Why did everything look like crap?**\\n\\nTruthfully? we never had proper control over these packets. The GIF\\npackets can come through the PATH3 DMA channel lumped together, where in\\nactual fact, we should have been stalling half way through it, but in\\nthe emulator, we didn\'t really care what these packets were, so we just\\nthrew it all at the GS and ignored any packet ends and this is what\\ncaused the Texture/Geometry lists to go out of sync, this is where the\\ncrap on the screen came from. As the emulator evolved it became\\nprogressively easier to fix this issue, although we had the theory down,\\ndevelopers would handle it in different ways with different timings for\\nthe masks, so it took a fair amount of testing and tweaking to get\\nright.\\n\\nFortunately these days we have got this pretty much solved and we\\ncompletely analyze the GIF Packets before sending them on their way, so\\nwe know where we can stop the transfers, however we do still get the odd\\ntime where this rears its ugly head, due to how we have to time\\neverything perfectly, but due to the nature of emulators, timing is\\npainful to get correct and will probably never be so. Generally however,\\nusing gamefixes such as \\"EE Timing Fix\\" can get around these issues,\\nwithout compromising too much on stability.\\n\\n**[Post a Comment!](https://forums.pcsx2.net/thread-24047.html)**"},{"id":"/2011/threading-vu1","metadata":{"permalink":"/pcsx2-net-www/blog/2011/threading-vu1","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/threading-vu1/index.mdx","source":"@site/blog/2011/threading-vu1/index.mdx","title":"Threading Vu1","description":"Getting pcsx2 to use more cores is something many people have asked for, and they wondered why we werent doing it","date":"2011-08-14T00:00:00.000Z","formattedDate":"August 14, 2011","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":15.535,"hasTruncateMarker":true,"authors":[{"name":"cottonvibes","key":"cottonvibes"}],"frontMatter":{"authors":["cottonvibes"],"date":"2011-08-14T00:00:00.000Z","description":"Getting pcsx2 to use more cores is something many people have asked for, and they wondered why we werent doing it","draft":false,"tags":["devblog"],"title":"Threading Vu1"},"prevItem":{"title":"Path masking and geometry syncing","permalink":"/pcsx2-net-www/blog/2011/path-masking-geometry-syncing"},"nextItem":{"title":"PCSX2 On Youtube And Vimeo","permalink":"/pcsx2-net-www/blog/2011/pcsx2-on-youtube-and-vimeo"}},"content":"Well if you\'ve kept up with pcsx2\'s\\nSVN, you\'ll notice we recently added a\\nMTVU (Multi-Threaded microVU1) option, which runs VU1 on its own\\nthread.\\n\\n\x3c!-- truncate --\x3e\\n\\nGetting pcsx2 to use more cores is something many people have asked for,\\nand they wondered why we werent doing it. Some users would go as far as\\nto flame us pcsx2 coders saying we didnt have the skills to do it or\\nwould say some other nonsense.\\n\\nIn reality, there are plenty of reasons why its taken so long for us to\\ncode something like MTVU. The key reason is that emulation in general\\ndoes not lend itself well to threading components. If you want to be\\nsafe and accurate at a hardware emulation level, you generally take the\\napproach of running the core CPU of the system (the EE-core in ps2s\\ncase), and then based off the cycles you ran the CPU for, you time the\\nexecution of all the other processing units in the system (DMAC (GIF,\\nVIF, SIF, ), VU0/VU1, IPU, IOP, etc).\\n\\nIf you try to naively thread the components in the above model, youll\\nhave 2 huge problems which may not be apparent to non-emu coders. One\\nproblem is that threading the components (say GIF and VU1) at the same\\ntime, will lead to very bad syncing errors if the GIF and VU1 need to\\ncommunicate with each other (and they do). The other problem is that\\njust running a component on a thread is actually going to be a slow-down\\nunless the thread is doing a lot of work without having to sync with\\nother components. As an example, both Jake Stine (Air) and I have in the\\npast experimented with naively threading VU1, and in addition to getting\\nunstable graphics and crashes, our attempts also ran slower.\\n\\nSo now you may be wondering, If threading has all those problems how can\\nyou get a speedup? Well we had to be smart about it, and figure out a\\nway to make threading work based on the properties of the hardware. One\\nthing we know is that for a component to even be worth-while to thread,\\nit needs to have relatively low interaction with other components (which\\nwill limit the amount of syncing needed with other components; and\\ntherefore increase the thread throughput), and it also needs to be a\\ncomponent that is used frequently and is computationally expensive to\\nemulate (or else theres no point in threading it). Luckily the GS fit\\nthat bill very well (which gave us MTGS), and to a lesser extent VU1\\ndoes (giving us MTVU).\\n\\n![](./img/PS2_Flow_Diagram.webp)\\n(Some key components in the ps2; these arent drawn to any relative\\nscale)\\n\\nIn the above diagram, I have drawn some of the key components which must\\nbe considered when threading VU1 and the GS. The dark arrows show common\\ndata paths where data is transferred frequently between the components\\nin games. The white arrow heads show data paths that are possible in\\ngames, but are rarely used due to various reasons. There are some more\\ndata paths and more components to the ps2, but theyre excluded for\\nsimplicity (the actual grouping of the components in the ps2 also is a\\nbit different, but drawing them that way would complicate the\\ndiagram).\\n\\nJust so youre not left in the dark Ill briefly explain what the above\\ncomponents are used for. The EE-core is the main CPU of the ps2 and\\nmostly handles game logic; using the GIF FIFO and Path 3, games\\ngenerally send image data (textures) to the GS (the gpu of the ps2). VU1\\n(Vector Unit 1) is used for coordinate, matrix, and vector calculations\\ngames need to do for 3d graphics; when its done calculating it sends the\\nprocessed data over to the GS via GIFs Path 1. The VIF1 unit is in\\ncharge of sending micro-programs to VU1, unpacking compressed data to\\nVU1s data memory, signaling VU1 to start executing its micro-program,\\nand it also can send data to the GS via GIFs Path 2. The GIF Unit is in\\ncharge of managing the Path 1/2/3 transfers that are being sent to the\\nGS, and it does this according to path priority (Path 1 &gt; Path 2 &gt;\\nPath 3) and some other specific rules.\\n\\nIf you notice in the diagram, the GS (Graphics Synthesizer) has data\\ncoming into it frequently, and rarely ever needs to send data back to\\nother components. When threading the GS, what we essentially do is\\nbuffer GIF transfers that are being sent to the GS, and then once we\\nhave enough buffered data we kick-start the MTGS thread and have it\\nstart processing the GIF packets we previously buffered. While its\\nprocessing this buffered data, the EE main thread is still running and\\nmore GIF transfers are being buffered so that MTGS can process them when\\nit gets the chance\\n\\nThe key to making something like this work from an emulation standpoint\\nis that the main emulation thread thinks that nothing is being threaded\\nat all; it sends data to the GIF Unit like normal, and this gets\\nprocessed according to the timing information from the EE core. However\\nthat GIF transfer data is being buffered which allows the MTGS thread to\\nprocess the buffered data in parallel with the main emulation thread. If\\nyou notice though this design means that the MTGS thread is actually\\nrunning behind the main emulation thread in terms of the data its\\nprocessing, because the buffered data is old data that the main\\nemulation thread has generated. The only time this can be a problem, is\\nif the main emulation thread ever needs to read back data from the MTGS\\nthread. In this case what needs to happen is the main emulation thread\\nneeds to stall and wait until the MTGS thread is done processing. Once\\nthat is done, the MTGS thread should have up-to-date status information,\\nand the main emulation thread can read back the appropriate data from\\nthe MTGS thread. This syncing is slow and if emulation needs to do it a\\nlot it eliminates the speedup from threading (and can even be a big\\nslowdown), however as noted in the above diagram, the GS rarely ever\\nneeds to transfer data back; so that means threading the GS is almost\\nalways a speedup for us.\\n\\nNow that we understand the basics of how the MTGS thread works, we can\\nmove onto MTVU. Since the GS was already the best candidate for\\nthreading in a ps2 emulator, it meant that threading any other component\\nwould be even more of a challenge. From analyzing pcsx2s activity and\\ndesign, the next component that made sense to thread was VU1. It is\\nrelatively isolated compared to the other components, and it takes a lot\\nof computation power to emulate. However, there are some big problems\\nwhich must be solved to get a fast and working threaded VU1.\\n\\nOne of the problems deals with what was talked about in the beginning of\\nthis article, how typical emulation runs the different components based\\noff the cycles of the main CPU. With the typical emulation approach we\\nwould run the EE for say 2048 cycles, and then we would run VU1 for its\\nequivalent amount of cycles which would be 1024 vu cycles (VU1 runs at\\nhalf the clock speed of the EE). This approach would be very problematic\\nfor us with threading, because it would mean VU1 doesnt run long enough\\nfor threading to be a speedup. However we are very fortunate because on\\nthe PS2 games cant be as cycle-critical as they are with older systems.\\nAny well coded ps2 game has to have thread safe code and account for\\npossible timing inconsistencies (if the game doesnt do this, then it\\nlikely wont be stable on the real console, or between minor variations\\nof the console). This means we can generally get away with running VU1\\nprograms disregarding EE timing completely, and pcsx2 has actually been\\nusing this approach for VU1 for years now (because even in a\\nnon-threaded design its faster to emulate this way). Instead of running\\nVU1 for X amount of cycles based off EE cycles, we have code it so that\\nVU1 executes its complete micro-program till its finished. This is great\\nnews for threading VU1 because it means that we can run VU1 on a thread\\nregardless of any EE timing and it wont be a problem. It also means that\\nsince VU1 has been running in its entirety this whole time, from the EEs\\npoint of view it has always seen that VU1s status is finished (because\\nit never gets a chance to read the status as executing). This means that\\nyou can actually queue multiple VU1 programs, and run them at a later\\ntime as far as the EE is concerned, because it doesnt really care about\\nVU1s status. This is even more good news for threading since it means\\nmore through-put for the VU1 thread if it can be queuing and\\nsequentially executing multiple VU1 programs (as opposed to running only\\none VU1 program while the EE waits on it to finish).\\n\\nThere is another big problem with VU1 threading however: the VU1\\nprocessor works closely with the GIF Unit, and the GIF Unit is timed and\\nexecuted according to the main emulation thread. So that means sending\\ndata to the GIF Unit from the VU1 thread would be at totally incorrect\\ntimes with respect to core emulation timing. Now our solution for this\\nis a bit tricky. What we end up doing is assume every VU1 program will\\nsend data to the GIF Unit. So immediately when the main emulation thread\\nfinds out it needs to execute a VU1 program, it sends a fake GIF\\ntransfer packet to pcsx2s GIF Unit (and immediately after starts\\nexecuting the VU1 program on the MTVU thread). The GIF Unit then acts\\nlike normal on the main emulation thread with its path arbitration and\\neventually uploads this fake GIF packet to the MTGS thread. The MTGS\\nthread acts like normal telling the GS plugin to process real Path\\n2/Path 3 GIF packets until it reaches the fake Path 1 packet. When it\\ndoes this, the MTGS thread asks the MTVU thread if at least 1 VU1\\nprogram has finished since the uploading of the fake GIF packet. If it\\nhasnt, then the MTGS thread stalls until the MTVU thread can finish a\\nVU1 program. If the MTVU thread has already finished a VU1 program, it\\nsignals the MTGS thread and then the MTGS thread wakes up and starts\\ntalking to pcsx2s GIF Unit. At this point the GIF Unit should have a\\nPath 1 packet pending which the MTGS thread can process, because while\\nthe MTGS thread was waiting, the MTVU thread had been communicating with\\nthe GIF Unit and uploading real Path 1 packet data asynchronously to a\\nbuffer. When the MTVU thread finishes the VU1 program, just before it\\nsignals the MTGS thread that its done, it talks to the GIF Unit and\\ntells it that all the Path 1 data that was just transferred to it should\\nbe considered a full Path 1 packet (and if no data was written to it,\\nconsider it a full Path 1 packet with size = 0). So going back to the\\nMTGS thread, at this point it requests a full Path 1 packet from the GIF\\nUnit, and the GIF Unit gives it one of the Path 1 packets that the MTVU\\nthread has finished. Then the MTGS thread tells the GS plugin to process\\nthis Path 1 packet, and the cycle just continues over and over every\\ntime a VU1 program is run.\\n\\nThe only flaw in the above solution for GIF processing is that in\\nreality pcsx2 needs to do some additional processing of GIF packet data\\non the main emulation thread to check if certain privileged GS registers\\nare being written to (SIGNAL/FINISH/LABEL). With the approach described\\nabove, we first send fake GIF packet data that the GIF Unit processes\\ninstead of the real one; but if the game was really supposed to send a\\nGIF packet which writes to the GSs SIGNAL/FINISH/LABEL registers, then\\nwe dont know about it and were out of luck. The game in this case will\\nlikely hang. There is no 100% reliable solution to this problem that\\nstill allows a fast threaded VU1, because in order to know for sure that\\nthose privileged registers will not be written, you need to execute the\\nVU1 program and find out that it is not sending a GIF packet which\\nwrites to them. The best you can do is predict what the VU1 program will\\ndo based off what it did last time, but this is still not fully\\nreliable, and a lot more complicated, it also will have a lot more\\noverhead compared to the way were currently threading VU1, so in my\\nopinion its not worth it. The good news is that its very rare for a game\\nto write to the privileged registers from VU1s GIF Path 1 (they usually\\ndo it from Path 2/Path 3), so that means that MTVU should be very\\ncompatible, however due to this potential problem, MTVU has to remain a\\nspeedhack instead of adding it as a normal option.\\n\\nThe third big problem with VU1 emulation is the communication with VIF1.\\nThe VIF1 if you remember is in charge of sending new micro-programs to\\nVU1 and decompressing data onto VU1 memory. In addition to this it has\\ncommands to tell VU1 to start executing, and it has commands to wait on\\nVU1 to finish executing. All this VIF1 - VU communication screams\\nproblems for a threaded VU1 design. However we have a clever solution\\nfor this too. What we essentially do is duplicate VIF1, we have one\\ninstance on the main emulation thread, and we have another instance on\\nthe MTVU thread. Whenever VIF1 is told to do something on the main\\nemulation thread, it runs like normal until it reaches a command which\\ninteracts with VU1. If the command is to wait on VU1, it just ignores\\nit, because remember pcsx2 already has been used to VU1 running in its\\nentirety, so VU1 is always complete when VIF1 has a command to wait on\\nit; so theres no need to wait on VU1. If the command is to transfer data\\nto VU1s memory, things get a tad more complex. What we do is write the\\ncommand in the MTVU threads internal ring buffer. The MTVU thread is\\nessentially just a ring buffer with queued commands which get processed\\nin-order. The VIF1 writes a command in MTVUs ring buffer to say upload\\n1024 bytes of data to VU1 micro-memory, and then the 1024 bytes of data\\nis also written to the ring buffer. Next VIF1 can send a command that\\nsays execute VU1 with PC address = 0x1000, and this command gets written\\nto MTVUs ring buffer as well. Finally MTVU decides its time to start\\nexecuting commands in its ring buffer, and it sees the VIF1 command that\\nwrites 1024 bytes to VU1 micro-memory, and it executes this command on\\nthe MTVU thread. Then it sees the command to start VU1 executing at\\naddress 0x1000, and it starts executing the microVU1 recompiler with PC\\n= 0x1000. This is the basics of how it works, the reason I said we have\\nto duplicate VIF1 between the main emulation thread, and the MTVU\\nthread, is that some VIF1 commands like VIF Unpack rely on status\\ninformation from VIF1s registers. To get this working on the MTVU thread\\nwe need a separate state of VIF1 registers and status information,\\nbecause the VIF1s status on the main emulation thread would be different\\nby the time the commands are executed on the MTVU thread. Essentially\\nfrom this description, you can see that the MTVU thread not only threads\\nVU1, but also threads VIF1 command too. This is another speedup since\\nVIF1 Unpacks are very computationally expensive (and thats why we even\\nhave a VIF Unpack recompiler).\\n\\nThe remaining problems of VU1 threading are handling the cases where the\\nEE or other processors like VU0 ever need to read back from VU1. This\\nhappens very rarely, but in this situation all we need to do is call a\\nWait on VU1 Thread function immediately before trying to read from VU1\\nmemory. If it happened often it would ruin any chance of speedups\\nthreading VU1 had, but luckily it rarely happens. The EE actually works\\nvery closely with VU0 as opposed to VU1, and so threading VU0 would not\\nbe a speedup because the EE would end up reading back from it too much.\\nThe good thing is that VU0 is rarely a bottleneck in games; this is\\nevident because you can usually run VU0 interpreters and get a minimal\\nspeed-hit (if you try to run vu1 interpreters on the other hand, your\\nspeed will usually crawl to \\\\~2fps).\\n\\nBy now you should hopefully have a better understanding of how pcsx2s\\nVU1 and GS threading basically works, but you may still have questions\\non why its taken so long for us to do it. Well as shown above there were\\na lot of problems with threading VU1 which needed to be solved, and we\\nwerent sure about the best ways to handle them. Another huge reason is\\npcsx2 was not in a good state to make VU1 threading a reality until\\nrecently. We didnt have a centralized GIF Unit like the ps2 does;\\ninstead we had code that was all over the place and running the GIF\\npaths without proper scheduling. The new GIF Unit rewrite solved this\\nproblem for us. Another problem was that Super VU1, the old VU1\\nrecompiler, was not thread safe (it combines stuff for VU0 and VU1\\nemulation together), so a new thread safe recompiler was needed, which\\nwas one of the goals for the microVU recompiler I wrote. Another problem\\nwas the sloppiness of a lot of old pcsx2 code which had needless inter\\ndependencies between various other code modules; we needed to isolate\\nthe related code with code refactoring and rewrites to clearly separate\\nthe code and make it thread safe. We also needed a thread-safe code\\nemitter which allowed us to run multiple dynamic-recompilers in\\nparallel; we solved this by a code emitter rewrite and using thread\\nlocal storage for the emitters global data. Lastly we needed someone who\\nknew about all these various components and was bored enough to try\\nmaking something like this work"},{"id":"/2011/pcsx2-on-youtube-and-vimeo","metadata":{"permalink":"/pcsx2-net-www/blog/2011/pcsx2-on-youtube-and-vimeo","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/pcsx2-on-youtube-and-vimeo/index.mdx","source":"@site/blog/2011/pcsx2-on-youtube-and-vimeo/index.mdx","title":"PCSX2 On Youtube And Vimeo","description":"While trying to make PCSX2 known to more people, I decided to create a YouTube and Vimeo channel to post HD videos of PCSX2 running games, for people to see how well it runs","date":"2011-06-30T00:00:00.000Z","formattedDate":"June 30, 2011","tags":[],"readingTime":0.44,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2011-06-30T00:00:00.000Z","description":"While trying to make PCSX2 known to more people, I decided to create a YouTube and Vimeo channel to post HD videos of PCSX2 running games, for people to see how well it runs","draft":false,"title":"PCSX2 On Youtube And Vimeo"},"prevItem":{"title":"Threading Vu1","permalink":"/pcsx2-net-www/blog/2011/threading-vu1"},"nextItem":{"title":"Spu2-X 2.0","permalink":"/pcsx2-net-www/blog/2011/spu2-x-2-0"}},"content":"While trying to make PCSX2 known to more people, I decided to create a YouTube and Vimeo channel to post HD videos of PCSX2 running games, for people to see how well it runs\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nYou can check them out here:\\nYoutube:\\n<http://www.youtube.com/user/PCSX2team>\\n\\nVimeo:\\n<http://vimeo.com/groups/pcsx2team>\\n\\n(for now they both have the same videos, albeit Vimeo has quite a nicer\\nquality HD version)\\n\\nSupport us by commenting and pressing the like button!\\n\ud83d\ude0a\\n\\nAlso don\'t forget to visit our Facebook and Twitter pages:\\n<http://twitter.com/#!/PCSX2>\\n\\nand\\n\\n<http://www.facebook.com/groups/98483509559>"},{"id":"/2011/spu2-x-2-0","metadata":{"permalink":"/pcsx2-net-www/blog/2011/spu2-x-2-0","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/spu2-x-2-0/index.mdx","source":"@site/blog/2011/spu2-x-2-0/index.mdx","title":"Spu2-X 2.0","description":"Not even 2 weeks ago we released SPU2-X 1.5, yet today we feel that the plugin has matured enough for another release.","date":"2011-06-27T00:00:00.000Z","formattedDate":"June 27, 2011","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.17,"hasTruncateMarker":true,"authors":[{"name":"rama","url":"https://github.com/ramapcsx2","imageURL":"https://github.com/ramapcsx2.png","key":"rama"}],"frontMatter":{"authors":["rama"],"date":"2011-06-27T00:00:00.000Z","description":"Not even 2 weeks ago we released SPU2-X 1.5, yet today we feel that the plugin has matured enough for another release.","draft":false,"tags":["devblog"],"title":"Spu2-X 2.0"},"prevItem":{"title":"PCSX2 On Youtube And Vimeo","permalink":"/pcsx2-net-www/blog/2011/pcsx2-on-youtube-and-vimeo"},"nextItem":{"title":"Spu2-X 1.5","permalink":"/pcsx2-net-www/blog/2011/spu2-x-1-5"}},"content":"Not even 2 weeks ago we released SPU2-X 1.5, yet today we feel that the plugin has matured enough for another release.\\nThis time the changes are significant enough to do the version jump to\\n2.0\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nSPU2-X always struggled to get the reverberation effects right.\\nNow after some thorough debugging we\'ve found and fixed the problem we\\nhad all this time!\\nThe resulting reverb is still not exactly like the PS2 does it but it\\ncomes very close in perceived quality.\\nWe\'ll be working on those final bits in the time to come, hopefully\\nachieving a fully correct emulation one day.\\n\\nNote: The custom reverb option has been removed as it no longer serves a\\npurpose.\\n\\nEmulation improvements:\\n\\n-   Next address reporting on voices improved based on tests.\\n-   Pitch modulation possibly fixed.\\n-   Status register updated in a way the spu2 library\'s reset function\\nseems to want.\\n-   Effects area updating changed to allow writing the EEA register\\nwhile effects area writing is enabled.\\n-   Switched two SPDIF modes which were reversed.\\n-   Reverb register bug dating back to the first version of SPU2-X\\nfixed.\\n\\n\\nAmong the fixed games are titles such as:\\n\\n-   God of War\\n-   God of War 2\\n-   Tales of Destiny\\n-   Magic Pengel\\n-   Grand Theft Auto: Vice City\\n-   Devil May Cry (PAL)\\n-   Gradius 3+4\\n-   Everything that uses digital effects"},{"id":"/2011/spu2-x-1-5","metadata":{"permalink":"/pcsx2-net-www/blog/2011/spu2-x-1-5","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/spu2-x-1-5/index.mdx","source":"@site/blog/2011/spu2-x-1-5/index.mdx","title":"Spu2-X 1.5","description":"Hey guys, In light of recent fixes and additions we prepared a new SPU2-X release for you","date":"2011-06-16T00:00:00.000Z","formattedDate":"June 16, 2011","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.955,"hasTruncateMarker":true,"authors":[{"name":"rama","url":"https://github.com/ramapcsx2","imageURL":"https://github.com/ramapcsx2.png","key":"rama"}],"frontMatter":{"authors":["rama"],"date":"2011-06-16T00:00:00.000Z","description":"Hey guys, In light of recent fixes and additions we prepared a new SPU2-X release for you","draft":false,"tags":["devblog"],"title":"Spu2-X 1.5"},"prevItem":{"title":"Spu2-X 2.0","permalink":"/pcsx2-net-www/blog/2011/spu2-x-2-0"},"nextItem":{"title":"Svn Snapshots (Build Bot)","permalink":"/pcsx2-net-www/blog/2011/svn-snapshots"}},"content":"Hey guys, In light of recent fixes and additions we prepared a new SPU2-X release for you\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nThis one focuses on SPU2 emulation accuracy but there\'s also the much\\nrequested volume adjustment feature included.\\nYou can now try a fake SPU2 reverb mode that may sound better than the\\n(still somewhat broken) original reverb.\\n\\nEmulation improvements:\\n- Reverb engine reviewed and mostly rewritten.\\n- Initialization modified to reflect test results, including a critical\\nportion of the BIOS initialization sequence to support fast boot.\\n- Hardware reset feature removed because tests failed to prove its\\nexistence.\\n- Possible null pointer access eliminated.\\n- Added support for reading KON and KOF registers, which is used in the\\nBIOS.\\n- Improved voice loop logic based on tests.\\n- Constantly mix the input area and generate IRQs from accessing it.\\n\\nAmong the fixed games are titles such as:\\n- F1 2005\\n- Burnout in-game music\\n- Tomb Raider (the whole series)\\n- Spyro the Dragon\\n- Gauntlet Dark Legacy\\n- Legacy of Kain Soul Reaver 2\\n- etc\\n\\nHope you enjoy, and please report all (new) bugs if you find them!"},{"id":"/2011/svn-snapshots","metadata":{"permalink":"/pcsx2-net-www/blog/2011/svn-snapshots","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/svn-snapshots/index.mdx","source":"@site/blog/2011/svn-snapshots/index.mdx","title":"Svn Snapshots (Build Bot)","description":"Orphis was so kind to set up and operate a build bot for PCSX2 SVN snapshots","date":"2011-06-03T00:00:00.000Z","formattedDate":"June 3, 2011","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.5,"hasTruncateMarker":true,"authors":[{"name":"rama","url":"https://github.com/ramapcsx2","imageURL":"https://github.com/ramapcsx2.png","key":"rama"}],"frontMatter":{"authors":["rama"],"date":"2011-06-03T00:00:00.000Z","description":"Orphis was so kind to set up and operate a build bot for PCSX2 SVN snapshots","draft":false,"tags":["devblog"],"title":"Svn Snapshots (Build Bot)"},"prevItem":{"title":"Spu2-X 1.5","permalink":"/pcsx2-net-www/blog/2011/spu2-x-1-5"},"nextItem":{"title":"PCSX2 0.9.8","permalink":"/pcsx2-net-www/blog/2011/pcsx2-0-9-8"}},"content":"Hey people, I thought this was worth mentioning \ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nOrphis was so kind to set up and operate a build bot for PCSX2 SVN\\nsnapshots.\\n\\nThe bot takes the latest sources as we commit them and builds working\\npackages for you to download.\\nThese packages are /trunk builds and Win32 only (for now).\\n\\nThanks again to Orphis for providing this nice service!\\n\\n**Note:** Discussions of SVN builds on our forums is allowed as long as\\nyou\'re using official SVN builds (not hacked/modified 3rd party\\nbuilds).\\nWe encourage bug reports to be made using the latest SVN build."},{"id":"/2011/pcsx2-0-9-8","metadata":{"permalink":"/pcsx2-net-www/blog/2011/pcsx2-0-9-8","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/pcsx2-0-9-8/index.mdx","source":"@site/blog/2011/pcsx2-0-9-8/index.mdx","title":"PCSX2 0.9.8","description":"It has been 2 years since our last stable release and today we (finally) bring you the newest stable release: 0.9.8!","date":"2011-05-01T00:00:00.000Z","formattedDate":"May 1, 2011","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":3.93,"hasTruncateMarker":true,"authors":[{"name":"rama","url":"https://github.com/ramapcsx2","imageURL":"https://github.com/ramapcsx2.png","key":"rama"}],"frontMatter":{"authors":["rama"],"date":"2011-05-01T00:00:00.000Z","description":"It has been 2 years since our last stable release and today we (finally) bring you the newest stable release: 0.9.8!","draft":false,"tags":["progress-report"],"title":"PCSX2 0.9.8"},"prevItem":{"title":"Svn Snapshots (Build Bot)","permalink":"/pcsx2-net-www/blog/2011/svn-snapshots"},"nextItem":{"title":"Air - The Latest PCSX2 Retiree","permalink":"/pcsx2-net-www/blog/2011/air-the-latest-pcsx2-retiree"}},"content":"It has been 2 years since our last stable release and today we (finally) bring you the newest stable release: 0.9.8!\\n\ud83d\ude0a\\nThere has been a massive amount of extensive changes to the emulator as\\na whole, so let\'s go over some of the biggest ones!\\n\\n\x3c!-- truncate --\x3e\\n\\n**Note: Norton Antivirus is reporting 0.9.8 as a virus! This is a false\\npositive, you are totally safe!**\\n**( [Virustotal report\\nhere](http://www.virustotal.com/file-scan/report.html?id=fe6efa4e21068f4e391184718baf5d88d03995b4fad56b97dab22873dcdd9cd3-1304289866)\\n)**\\n\\nWe have a completely new GUI made with\\n[url=http://www.wxwidgets.org/]wxWidgets[/url] to make the whole\\nuser experience simpler and more user friendly, whilst providing us with\\na platform in which we can easily add new features. For this we have to\\ngive our thanks to Air (Jake Stine) who recently left the team, who\\nworked on this for many months (in what was pretty much a solo effort)\\nto make it the best GUI we have ever had.\\nThe entire team is eternally grateful for all of his efforts and we wish\\nhim best of luck with his new tasks!\\n\\nThis new GUI brings with it a much improved Linux support, as this is a\\ncompletely cross platform user interface. Code changes will effect\\nWindows and Linux in the same way, making maintenance for us much easier\\nand finally giving Linux users a nice and consistent frontend.\\n\\nComplementing the new GUI is a new Memory Card manager, providing the\\nflexibility to use customly named or downloaded cards with sizes of 8 to\\n64 megabytes. Now you can fit even more saves on one card!\\n\\nHost file system and ELF loading support has been improved too.\\nNow you Homebrewers can work with a more feature complete virtual PS2 to\\ntest your tools!\\n\\nPatches and compatibility hacks are now automatically applied by\\ndefault.\\nWith this you don\'t have to sit there for ages playing around to find\\nthat 1 option that fixes your game; If we know about it, we\'ve already\\nset it!\\n\\nAside from the shiny parts of the emulator which you guys see and use,\\nwe have many internal changes to improve our overall compatibility, the\\nmost notable ones being a new VU recompiler called microVU, which is an\\neffort to bring higher compatibility over the older SuperVU recompiler.\\n\\nWe also have a new VIF Unpack recompiler which is more accurate and\\nsafer than the previous asm implementation.\\n\\nThe other big change is within the SPU2-X sound plugin, which has been\\nworked on thoroughly to improve the sound generation, provide different\\naudio output options and filtering, but also internal changes to improve\\nthe compatibility with games such as Burnout 3 which had never booted on\\nany previous version of PCSX2!\\n\\nIn all we now have around 65% of all tested games marked as playable,\\nand at least 85% get \\"ingame\\".\\nThis means that over 1500 of the tested games are fully playable!\\n\\nI could be here rattling off the new changes all day, but i know you\\nguys are waiting to get going!! Here is a summary rundown of the most\\nnotable changes within the emulator, we hope you enjoy using it as much\\nas we did making it!\\n\\nGUI:\\n\\n-   New, threaded GUI using [wxWidgets](http://www.wxwidgets.org/) .\\n-   New menus, for improved usability and faster configuration.\\n-   Convenient Memory Card editor.\\n-   On the fly pause and resume, perfectly stable, safe and fast.\\n-   On the fly setting switching and even plugin switching.\\n-   Powerful new configuration that is more user friendly with its first\\ntime wizard, reset to default buttons and a global presets system.\\n-   A plethora of new options that make playing games more fun!\\n-   All options have tooltips explaining what each of them do.\\n-   Comes translated, with many languages to select from.\\n-   Compatible with Aero Glass and Windows eye candy.\\n-   Looks and works great on Linux, too!\\n\\nCore:\\n\\n-   Entire emulation core has been overhauled. Many components are\\nrewritten.\\n-   Countless code generation and runtime execution bugs fixed.\\n-   Added microVU, an improved VU0/VU1/COP2 recompiler.\\n-   New VIF recompiler\\n-   Multi-threaded GS rewrite: Faster and more stable than in 0.9.6.\\n-   Better BIOS splash screen skip method, better ELF support, host fs\\nsupport.\\n-   New Game database detects the game you run, displays compatibility\\ninfo, and auto applies special game fixes/patches if needed.\\n\\nPlugins:\\n\\n-   GSdx is faster, more stable and has more configuration options than\\never before.\\n-   SPU2-X is the preferred SPU2 plugin now.\\n\\nIt has matured into almost completely emulating all the SPU2 quirks,\\nmaking many more games work!\\n(And it sounds nice, too\\n\ud83d\ude0a )\\n\\nDon\'t forget to spread the news! This will be our biggest release\\nEVER!\\n\\n[Official Facebook\\nGroup](http://www.facebook.com/group.php?gid=98483509559)\\n\\n[Facebook Like\\nPage](http://www.facebook.com/#!/pages/Pcsx2-098/145051045565631) (For\\nmass viralnesses)\\n\\n[Reddit](http://www.reddit.com/r/gaming/comments/h1eh6/ps2_emulator_pcsx2_updated_to_098_improvements/)\\n(Thanks HCRikki)\\n\\n[Discuss on the\\nforums](http://forums.pcsx2.net/Thread-PCSX2-0-9-8--21539)"},{"id":"/2011/air-the-latest-pcsx2-retiree","metadata":{"permalink":"/pcsx2-net-www/blog/2011/air-the-latest-pcsx2-retiree","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/air-the-latest-pcsx2-retiree/index.mdx","source":"@site/blog/2011/air-the-latest-pcsx2-retiree/index.mdx","title":"Air - The Latest PCSX2 Retiree","description":"Jake Stine (Air) has retired from PCSX2, after more than two years of vigorous work on the emulator.","date":"2011-02-20T00:00:00.000Z","formattedDate":"February 20, 2011","tags":[],"readingTime":1.055,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2011-02-20T00:00:00.000Z","description":"Jake Stine (Air) has retired from PCSX2, after more than two years of vigorous work on the emulator.","draft":false,"title":"Air - The Latest PCSX2 Retiree"},"prevItem":{"title":"PCSX2 0.9.8","permalink":"/pcsx2-net-www/blog/2011/pcsx2-0-9-8"},"nextItem":{"title":"PCSX2-Mac - 0.9.6 Snow Leopard","permalink":"/pcsx2-net-www/blog/2011/pcsx2-mac-0-9-6-snow-leopard"}},"content":"Jake Stine (Air) has retired from PCSX2, after more than two years of vigorous work on the emulator.\\n\\n\x3c!-- truncate --\x3e\\n\\nMy reason for leaving is simple: I am now married and am taking a job\\nthat promises to be interesting and challenging, and will be paying me\\nquite well -- and I fully intend to apply myself there as I have here:\\nwith unwavering dedication and focus.\\n\\nI have really enjoyed working with PCSX2 these past 2+ years. I have\\nlearned a lot about a wide variety of things including (and not limited\\nto) becoming intimately familiar with console hardware design, and\\ndeveloping more advanced high and low level software development skills\\n-- such as binary translation and better understanding of operating\\nsystems and application binary interfaces (ABIs).\\n\\nI will be leaving a few unfinished projects in my wake, such as the\\nR3000A rewrite (recompiler and interpreter), and new dmac work. These\\nside-projects were educational in their own ways for myself and other\\nPCSX2 contributors, however; even if they never quite survived into\\n\\"profoundly operational\\" status.\\n\\n\\nI wish good luck to users and current and future PCSX2 developers and\\nbid everyone a proper farewell -- perhaps unusual in emulation, a scene\\nwhere the programmers often silently vanish.\\n\\nJake Stine (Air)"},{"id":"/2011/pcsx2-mac-0-9-6-snow-leopard","metadata":{"permalink":"/pcsx2-net-www/blog/2011/pcsx2-mac-0-9-6-snow-leopard","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2011/pcsx2-mac-0-9-6-snow-leopard/index.mdx","source":"@site/blog/2011/pcsx2-mac-0-9-6-snow-leopard/index.mdx","title":"PCSX2-Mac - 0.9.6 Snow Leopard","description":"Work on 0.9.7 is in progress and with very promising results some of the changes are making it into the 0.9.6 build which is probably going to be the last for this version.","date":"2011-01-28T00:00:00.000Z","formattedDate":"January 28, 2011","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.39,"hasTruncateMarker":true,"authors":[{"name":"zedr0n","key":"zedr0n"}],"frontMatter":{"authors":["zedr0n"],"date":"2011-01-28T00:00:00.000Z","description":"Work on 0.9.7 is in progress and with very promising results some of the changes are making it into the 0.9.6 build which is probably going to be the last for this version.","draft":false,"tags":["devblog"],"title":"PCSX2-Mac - 0.9.6 Snow Leopard"},"prevItem":{"title":"Air - The Latest PCSX2 Retiree","permalink":"/pcsx2-net-www/blog/2011/air-the-latest-pcsx2-retiree"},"nextItem":{"title":"Happy New Year","permalink":"/pcsx2-net-www/blog/2010/happy-new-year"}},"content":"Work on 0.9.7 is in progress and with very promising results some of the changes are making it into the 0.9.6 build which is probably going to be the last for this version.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe main improvement is proper implementation of memory protection\\nhandling for pcsx2, which should give 25-50% performance boost depending\\non the game.\\n\\nThis build is only for Snow Leopard 10.6.3 or newer and includes updated\\nZZOgl 0.21.213 and zerospu2 installed by default."},{"id":"/2010/happy-new-year","metadata":{"permalink":"/pcsx2-net-www/blog/2010/happy-new-year","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/happy-new-year/index.mdx","source":"@site/blog/2010/happy-new-year/index.mdx","title":"Happy New Year","description":"The coding team and staff of PCSX2 wish you a Happy New Year, filled with happiness, health and new hardware!","date":"2010-12-31T00:00:00.000Z","formattedDate":"December 31, 2010","tags":[],"readingTime":0.555,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2010-12-31T00:00:00.000Z","description":"The coding team and staff of PCSX2 wish you a Happy New Year, filled with happiness, health and new hardware!","draft":false,"title":"Happy New Year"},"prevItem":{"title":"PCSX2-Mac - 0.9.6 Snow Leopard","permalink":"/pcsx2-net-www/blog/2011/pcsx2-mac-0-9-6-snow-leopard"},"nextItem":{"title":"The History Of PCSX2","permalink":"/pcsx2-net-www/blog/2010/the-history-of-pcsx2"}},"content":"The coding team and staff of PCSX2 wish you a Happy New Year, filled with happiness, health and new hardware!\ud83d\ude1b\\n\\n\x3c!-- truncate --\x3e\\n\\nDue to the holidays and some team members having a life development has\\nslowed down a bit but work towards the next release is already being\\ndone\\n\ud83d\ude0a We can\'t promise any dates but let\'s just say\\nthat the team will do their best to bring you the next 0.9.8 release as\\nfast as possible (which means the todo list is done, whenever that\\nis!).\\n\\nFinally, a big thank you to the people who have donated for the project,\\nwe don\'t say this often and we should\\n\ud83d\ude0a"},{"id":"/2010/the-history-of-pcsx2","metadata":{"permalink":"/pcsx2-net-www/blog/2010/the-history-of-pcsx2","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/the-history-of-pcsx2/index.mdx","source":"@site/blog/2010/the-history-of-pcsx2/index.mdx","title":"The History Of PCSX2","description":"Some forum members had shown quite an interest in the history of the emulator, so i thought, why not?","date":"2010-11-25T00:00:00.000Z","formattedDate":"November 25, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":6.115,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2010-11-25T00:00:00.000Z","description":"Some forum members had shown quite an interest in the history of the emulator, so i thought, why not?","draft":false,"tags":["devblog"],"title":"The History Of PCSX2"},"prevItem":{"title":"Happy New Year","permalink":"/pcsx2-net-www/blog/2010/happy-new-year"},"nextItem":{"title":"Configuration Guide For V0.9.7 And New Videos","permalink":"/pcsx2-net-www/blog/2010/configuration-guide-for-v0-9-7-and-new-videos"}},"content":"Some forum members had shown quite an interest in the history of the\\nemulator, so i thought, why not? I\'ll write a history of the emulator to\\nthe best of my knowledge for everybody to look at! Hopefully those who\\nhave been here longer (like bositman) can fill you in a bit more on what\\nhappened. My apologies for any inaccuracies, I didn\'t join the team\\nuntil version 0.8.0 (January 2005)! So, here goes.....\\n\\n\x3c!-- truncate --\x3e\\n\\n\\nAround the middle of 2001 (Roughly) the PCSX2 project started with just\\n2 people, Linuzappz and Shadow, who formally coded the PS1 emulator\\nnamed PCSX.\ufffd Having finished that project to a point they deemed\\nsuccessful, they decided to embark on a new project which at the time,\\nwas completely unheard of, a Playstation 2 emulator, so PCSX2 was\\nborn.\\n\\nThey were later followed by other coders such as auMatt, Loser, florin\\nand Saqib, who at the time was known as asadr. This small band of coders\\nwith a big dream, little documentation and lackluster hardware (at the\\ntime, it was good gear!) managed to forge something together which\\nvaguely simulated a playstation 2, but only to the lengths of running\\nsimple homebrew software, which had its doors opened by this small\\nachievement.\ufffd Not content with the fact they had developed a homebrew\\nemulator, the guys wanted some genuine PS2 software to run, so they\\npicked a few simple games (such as Bust-a-move) and got to work.\\n\\nMany revisions later and lots of plugin development, they managed to get\\nsome games to show loading screens and some even ingame footage, this\\nwas a massive achievement for the group, proving to the world that this\\nproof of concept emulator was a reality, showing the world that it was\\npossible.\\n\\nTo show a true emulation image of a system such as the PS2, there is one\\nbehemoth which must be conquered to give it that feel which the\\nplaystation 2 has, the PS2\'s own BIOS file.\ufffd This was an extremely\\ncomplex, tricky bit of software to emulate.\ufffd From what i\'ve been told,\\nthis took days of solid coding, hacking and debugging and reading of\\nAssembly language to achieve, however when they did eventually get it to\\nrun it was extremely distorted, graphically incorrect and extremely\\nslow. Being a feat such as this, it didn\'t matter how it looked, they\'d\\ndone it! With the BIOS in place, it allowed the developers to open the\\ndoors on PS2 gaming, providing correct BIOS functionality, system\\nconfiguration and setup provided by the BIOS, some of which is\\nimperative for PS2 games to run.\\n\\nFrom this point on, the team spent a lot of time implementing missing\\nparts of the emulator and replacing hacks with correct emulation once\\nthose areas were understood, slowly improving the compatibility and\\nspeed of the emulator, including the implementation of the first\\nRecompiler into PCSX2 (may have been earlier, but it was before me!)\\nwhich was coded and developed by Goldfinger, this provided a huge leap\\nin speed from the age old Interpreter which is slow by design.\\n\\nThrough time several developers have come and gone. I (Refraction)\\njoined the team around version 0.8.0 (January 2005) after submitting\\nsome MFIFO fixes which helped improve the emulation of Final Fantasy X.\ufffd\\nLater we had Zerofrog join the team, who is responsible for ZeroGS,\\nZeroSPU2 and the rewrite of the last incarnation of the VU and EE\\nRecompilers which gave us the huge speed boost many will remember in\\nv0.9.1 (June 2006).\\n\\nDuring the summer of 2007, GiGaHeRz finally managed to crack one area of\\nthe emulator nobody had dare attempt before, he managed to get Netplay\\nto happen! Myself, GiGaHeRz, CKemu, Saqib and Falcon4ever found\\nourselves logging in to Monster Hunter for a general meet up and\\ndrinking session in the virtual world. This was an amazing event for\\nus,\ufffd it was also very fun talking to other players with the conversation\\ngenerally going like \\"Hey, I\'m playing this on my PS3\\n\\nThat\'s cool, we are playing this on our PC\'s using PCSX2\\" \\"oooh! that\'s\\nawesome! can we tag along with you guys?\\", it was very pant wetting for\\nus and other players alike. Unfortunately, almost by sheer coincidence,\\nmany online servers shut down merely weeks after we announced we had\\nnetplay, I see no conspiracies, really\\n\\nBy 2008, Zerofrog had left the team to further his real life career at\\nbigger companies and didn\'t have any more time for the team, myself and\\nasadr (Saqib) were the only remaining developers and with such big\\npressures upon the two remaining developers, moral and willingness to\\ncode the emulator dropped off significantly, leaving myself and saqib\\njust committing small changes to the emulator to keep things afloat, we\\nwe\'re not going to let it die on us now!\\n\\nAfter the release of 0.9.4, GSDX went under major improvements from our\\nvery own Gabest to improve the overall speed of the popular GS plugin\\nGSDX. He added support for DirectX 10, which solved the issue of\\nclipping surfaces (Due to limitations with DirectX 9) and improved the\\ncaching methods of the plugin itself to bring the performance up.\ufffd\\nAdditionally, he rewrote the entire software renderer to be faster\\noverall, but also to allow extra threads, so running the graphics plugin\\nin software mode on an i7, across several threads, showed little\\ndifference in performance to hardware mode! The graphics plugin\\ncontinues to grow in strength with a lot of support from the other team\\nmembers and the community providing information on current issues to be\\nresolved.\\n\\nIn February 2009, we enlisted the help of a group of enthusiastic coders\\nwho had been hosting the project PCSX2 Playground, we recognized the big\\npotential for these guys to be on the team in recognition of the amazing\\nwork they were doing. This expanded the team greatly, bringing in\\ndevelopers such as Jake.Stine (Air), arcum, cottonvibes and rama, ever\\nsince the emulator has been booming with improvements and advanced the\\nstate of the emulator immensely! Since then we have had developers such\\nas pseudonym and gregory.hainaut join the team, both of whom have\\nprovided an excellent amount of work in their fields of expertise.\\n\\nHere we are today, potentially months away from the release of PCSX2\\n0.9.8, which is showing the highest compatibility the emulator has ever\\nshown, with nearly 59% of games being playable on the emulator\\n(regardless of speed) and a further 22% of games getting to the ingame\\ncontent, this is a whopping 81% compatibility! which is a huge feat when\\nyou look back to how the emulator was in the early days. We are ever\\ncloser to releasing what can be consider the near-on perfect Playstation\\n2 emulator, but before we can get there, many big challenges await us.\ufffd\\nOnly time will tell.......\\n\\nOf course a mention is needed for the many beta testers and plugin\\ndevelopers who have done their part to improve device emulation and root\\nout the errors and problems for the devs to look into: Bositman,\\nPrafull, CKemu, Falcon4ever, ChaosCode, Nachbrenner (Patch hacker\\nextraordinaire), Crushtest, Neeve (VU/EE floating point accuracy\\nimprovements), RPGWizard, Chickenliver (Lilypad), Rebel\\\\_X (Twinpad),\\nLuigi\\\\_\\\\_(Megapad) and many many more, we appreciate everything you have\\ndone for the emulator, if i forgot your name, it\'s due to memory laps!\\nwe appreciate what you have done too!"},{"id":"/2010/configuration-guide-for-v0-9-7-and-new-videos","metadata":{"permalink":"/pcsx2-net-www/blog/2010/configuration-guide-for-v0-9-7-and-new-videos","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/configuration-guide-for-v0-9-7-and-new-videos/index.mdx","source":"@site/blog/2010/configuration-guide-for-v0-9-7-and-new-videos/index.mdx","title":"Configuration Guide For V0.9.7 And New Videos","description":"I finally got around updating the now (huge) configuration guide for the new beta version of PCSX2 v0.9.7!","date":"2010-10-30T00:00:00.000Z","formattedDate":"October 30, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.37,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2010-10-30T00:00:00.000Z","description":"I finally got around updating the now (huge) configuration guide for the new beta version of PCSX2 v0.9.7!","draft":false,"tags":["devblog"],"title":"Configuration Guide For V0.9.7 And New Videos"},"prevItem":{"title":"The History Of PCSX2","permalink":"/pcsx2-net-www/blog/2010/the-history-of-pcsx2"},"nextItem":{"title":"Benchmarking Multithreaded PCSX2","permalink":"/pcsx2-net-www/blog/2010/benchmarking-multithreaded-pcsx2"}},"content":"I finally got around updating the now (huge) configuration guide for the\\nnew beta version of PCSX2 v0.9.7!\\nYou can read it\\n[here.](http://forums.pcsx2.net/Thread-Official-English-PCSX2-configuration-guide-v0-9-7)\\n\\n\x3c!-- truncate --\x3e\\n\\nAs usual, we would love to have as many translations as possible, so if\\nyou are up to it, please apply\\n[here](http://forums.pcsx2.net/Thread-Guide-translation-applications).\\n\\nWe also revamped our video section with 11 new gameplay videos using\\n0.9.7 courtesy of yours truly, Shadow Lady, Rudy_X and rama.\\n\\nThat\'s all for now!"},{"id":"/2010/benchmarking-multithreaded-pcsx2","metadata":{"permalink":"/pcsx2-net-www/blog/2010/benchmarking-multithreaded-pcsx2","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/benchmarking-multithreaded-pcsx2/index.mdx","source":"@site/blog/2010/benchmarking-multithreaded-pcsx2/index.mdx","title":"Benchmarking Multithreaded PCSX2","description":"As most people probably know, PCSX2 is primarily a dual-thread application","date":"2010-10-07T00:00:00.000Z","formattedDate":"October 7, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.345,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2010-10-07T00:00:00.000Z","description":"As most people probably know, PCSX2 is primarily a dual-thread application","draft":false,"tags":["devblog"],"title":"Benchmarking Multithreaded PCSX2"},"prevItem":{"title":"Configuration Guide For V0.9.7 And New Videos","permalink":"/pcsx2-net-www/blog/2010/configuration-guide-for-v0-9-7-and-new-videos"},"nextItem":{"title":"New PCSX2 0.9.7 Beta (R3878)!","permalink":"/pcsx2-net-www/blog/2010/new-pcsx2-0-9-7-beta"}},"content":"As most people probably know, PCSX2 is primarily a dual-thread\\napplication. The two main threads are described as such:\\n\\n\x3c!-- truncate --\x3e\\n\\n-   EE/Core thread emulates the PS2\'s EmotionEngine (including VIF, SIF,\\nGIF, and VUs) and the IOP (including SPU2, CDVD, and PAD)\\n-   GS thread emulates the PS2\'s Graphic Synthesizer (includes texture\\nswizzling, texture filtering, upscaling, and frame rendering)\\n\\nEach thread relies on the other thread in some way -- the GS thread\\ncannot swizzle texture data until the EE thread has uploaded said data,\\nfor example. Meanwhile, the EE thread cannot upload texture data to the\\nGS thread if the GS thread is currently bogged down rendering last\\nweek\'s frame to video. During these periods, either thread will *sleep*\\n, only to be woken up once the other thread has caught up in its\\nworkload.\\n\\n\\nIn theory the act of sleeping the EE/GS threads should make benchmarking\\nthe CPU load registered by each thread pretty easy: all modern operating\\nsystems have built-in APIs for reading the busy/idle time of any thread\\non the system -- this is the same API used by your tried and true\\ntask/process manager, for example:\\n\\n![](./img/sysinternal.webp)\\n\\n*(Air shows off his personal favorite,\\n[ProcessExplorer](http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx)\\n, part of the [SysInternals\\nSuite](http://technet.microsoft.com/en-us/sysinternals/default.aspx)\\n)*\\n\\nThis readout is simple, efficient, and seemingly reliable. It also\\navoids a lot of the annoying pitfalls one runs into trying to use common\\nalternatives such as\\n[rdtsc](http://en.wikipedia.org/wiki/Time_Stamp_Counter) and\\n[QueryPerformanceCounter](http://msdn.microsoft.com/en-us/library/ms644904.aspx)\\n.\\n\\n... and this is precisely the method I decided to use for PCSX2\\n0.9.7.r3113 (and still in use as of r3878). Simple theory really: if the\\nGS thread is sleeping a lot (low load) then the game is bottlenecked by\\nEE/Core thread activity. If the EE thread is sleeping a lot and the GS\\nthread reports 90+%, then the GS thread is the bottleneck (a problem\\noften correctable through using lower internal resolutions, for\\nexample).\\n\\nBut as I\'ve recently found out, it doesn\'t work as expected. -\\\\_-\\n\\n**It\'s filled with... threads!**\\n\\nThe immediate problem faced by this simple method of load detection is\\nthat the latest wave of Windows Vista/7 GPU drivers themselves ***are\\nmultithreaded*** . It should have come as little surprise that one of\\nthe primary goals of the new DWM/Aero/DX11 systems implemented into\\nVista/7 is scalable parallel processing that takes better advantage of\\nmodern multi-core CPUs. Why this causes the OS built-in thread load\\ndetection to fail might be less obvious; I\'ll explain with an example:\\n\\nWhen the GPU driver receives a directive to render the current scene\\n(aka \'Present\' in DirectX lingo), it sends the job to a thread dedicated\\nto the task. That thread has a *Present Queue* , typically 1 or 2 frames\\ndeep, that automatically handles triple buffered vsync\'d page updates.\\nIf the queue is full when the PCSX2 GS thread issues its next Present\\nrequest, the **GPU driver will put the GS thread to sleep** until a slot\\nin the Present Queue becomes available. End result: The GS thread\\nreports idle time to the operating system (and to PCSX2\'s GS window),\\nbut the GPU is still quite overloaded and bottlenecked via work supplied\\nto it by a different thread altogether.\\n\\nIn essence, it is nearly the same sort of inter-thread dependence that\\nthe EE/Core and GS threads have between each other, only now the EE/Core\\nthread\'s dependency chain extends to include GS *and* GPU driver threads\\n(of which there could be one or many).\\n\\nThe solution to this problem is to use a more traditional method of\\nmanual load checking: timing various sections of code executed in-thread\\nvia either the aforementioned rdtsc (timestamp) or\\nQueryPerformanceCounter, read at key points in the GS thread\'s\\nexecution/program flow. This wasn\'t such a great idea a few years ago,\\ndue to K8/Athlon and P4 generation CPUs lacking a stable internal clock\\ncounter. Fortunately, all modern CPUs have a consistent counter suitable\\nfor benchmarking, so the pitfalls that have been long associated with\\nusing Intel/AMD timestamps are finally obsolete enough to not be a\\nconcern for us here."},{"id":"/2010/new-pcsx2-0-9-7-beta","metadata":{"permalink":"/pcsx2-net-www/blog/2010/new-pcsx2-0-9-7-beta","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/new-pcsx2-0-9-7-beta/index.mdx","source":"@site/blog/2010/new-pcsx2-0-9-7-beta/index.mdx","title":"New PCSX2 0.9.7 Beta (R3878)!","description":"Hey people, today we make the second 0.9.7 beta release available: PCSX2 0.9.7 (r3878)!","date":"2010-10-05T00:00:00.000Z","formattedDate":"October 5, 2010","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":1.245,"hasTruncateMarker":true,"authors":[{"name":"rama","url":"https://github.com/ramapcsx2","imageURL":"https://github.com/ramapcsx2.png","key":"rama"}],"frontMatter":{"authors":["rama"],"date":"2010-10-05T00:00:00.000Z","description":"Hey people, today we make the second 0.9.7 beta release available: PCSX2 0.9.7 (r3878)!","draft":false,"tags":["progress-report"],"title":"New PCSX2 0.9.7 Beta (R3878)!"},"prevItem":{"title":"Benchmarking Multithreaded PCSX2","permalink":"/pcsx2-net-www/blog/2010/benchmarking-multithreaded-pcsx2"},"nextItem":{"title":"MSVC 2008 Optimizer Fail","permalink":"/pcsx2-net-www/blog/2010/msvc-2008-optimizer-fail"}},"content":"Hey people, today we make the second 0.9.7 beta release available: PCSX2 0.9.7 (r3878)!\\n\\n\x3c!-- truncate --\x3e\\n\\nThe 0.9.7 series is marked as unstable/beta, meaning it still has some\\nknown bugs\\nand unimplemented features but it is fully supported by the PCSX2 team.\\nWe\'ve spent the last months on various aspects of the emulator, adding\\nto the awesome progress seen in beta 1.\\nThis release has been compiled with extensive optimizations, so you can\\nexpect a small speedup over r3113\\n\ud83d\ude0a\\n\\nHere\'s some of the changes:\\n\\n-   Gui work: threading, layout and stability have been improved.\\n-   Some of the reported .ini writing issues should be fixed now.\\n-   Game database: bug fixes, more entries, compatibility hints for\\npcsx2.\\n-   Automated patching enabled now: known fixes/settings for some games\\ncan be enabled automatically.\\n-   Emulation fixes to microVU.\\n-   VIF/GIF work: Slightly faster and more compatible.\\n-   Much work on GIFPath ordering issues. many games with previously\\nflickering textures should work better.\\n-   IPU retooled and optimized: A bit faster, a bit more compatible and\\nmuch more sane (no more coroutines).\\n-   Removed hazardous MMX/XMMregister freeze/restore. Speedup and\\nstability is improved.\\n-   Savestates are now free of memory leaks.\\n-   Disk swapping works on a few games now (not all yet though).\\n-   New \\"fast CDVD\\" speedhack. Load levels as fast as possible!\\n-   Console logging is now configurable to be as verbose as in developer\\nbuilds.\\n-   Commandline support.\\n-   A lot of other small tweaks and additions."},{"id":"/2010/msvc-2008-optimizer-fail","metadata":{"permalink":"/pcsx2-net-www/blog/2010/msvc-2008-optimizer-fail","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/msvc-2008-optimizer-fail/index.mdx","source":"@site/blog/2010/msvc-2008-optimizer-fail/index.mdx","title":"MSVC 2008 Optimizer Fail","description":"Over the past two years I have become dearly intimate with Microsoft\'s Visual C++ 2008 compiler, and the methods it uses for optimizing code","date":"2010-09-14T00:00:00.000Z","formattedDate":"September 14, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":5.21,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2010-09-14T00:00:00.000Z","description":"Over the past two years I have become dearly intimate with Microsoft\'s Visual C++ 2008 compiler, and the methods it uses for optimizing code","draft":false,"tags":["devblog"],"title":"MSVC 2008 Optimizer Fail"},"prevItem":{"title":"New PCSX2 0.9.7 Beta (R3878)!","permalink":"/pcsx2-net-www/blog/2010/new-pcsx2-0-9-7-beta"},"nextItem":{"title":"PS2\'s Programmable DMA","permalink":"/pcsx2-net-www/blog/2010/ps2s-programmable-dma"}},"content":"Over the past two years I have become dearly intimate with Microsoft\'s\\nVisual C++ 2008 compiler, and the methods it uses for optimizing code.\\nNow generally speaking MSVC 2008 does well -- very well -- especially\\nfor everyday \\"not-so-clever\\" code. Its global optimization feature (aka\\nLinktime Code Generation, or LTCG) is also a tremendous advantage over\\nGCC -- though GCC is in the process of (finally!) adding LTCG to their\\nown C/C++ compiler. MSVC does have a few very annoying failings as an\\noptimizer, though. **The most glaring of which has to do with**\\n***templated code*** and ***inlined functions*** .\\n\\n\x3c!-- truncate --\x3e\\n\\n**Disclaimer:** This analysis is\\nfor Visual C++ 2008 only. I have not yet analyzed MSVC 2010\'s code\\ngeneration. Some of these glitches may be improved or different (or\\nworse even) in 2010. I\'ll post an update if/when I compile information\\nit in the future.\\n\\n*Edit/Update: This bug only appears to manifest itself when the input\\nparameters are 1st or 2nd generation propagated constants (which is hard\\nto explain if you don\'t know what that means). So chances of hitting\\nthis bug are not actually all that common, but still plausible in many\\ncoding scenarios.*\\n\\n\\n# Inline Functions\\n\\nInline functions are the simpler sort, so I\'ll cover those first. Here\'s\\na simple example of some code that will be optimized away in certain\\nsituations.\\n\\n```cpp\\nstatic bool g_global = false;\\n__forceinline void DoSomething( void* dest, size_t size )\\n{\\nif (dest &amp;&amp; size)  memset(dest,0,size);\\n}\\n\\nvoid main()\\n{\\n[... code ...]\\n\\n// dest and size are known constants, so the compiler will inline the above\\n// function and eliminate all its code -- ie, this line will be effectively ignored.\\nDoSomething( NULL, 0 );\\n\\n[... code ...]\\n}\\n```\\n\\n\\nThe problem is that even though the DoSomething() call is effectively\\n*ignored* , Visual C++ will still generate code that assumes the\\nfunction is modifying global memory. Why? Because the compiler\'s initial\\nanalysis of the function doesn\'t take into consideration the fact that\\nit is being called/inlined with constants as parameters. That means the\\ncalling function ( *void main()* in this case)will have to flush/reload\\nany global variables that may have otherwise been able to remain in\\nregisters.\\n\\nThis problem becomes worse the longer a function grows, because every\\nnew piece of code int he function can introduce additional optimization\\ndependencies. For example, if a function contains SSE instructions and\\n128-bit stack operations, it may require mandatory stack-frame\\nalignment, *even if the actual SSE code portions are optimized away* .\\n\\n# Templates\\n\\nFor those who do not know, C++ (and C99) has a feature called\\ntemplating; which is at its core a type-safe and debug-friendly\\nreplacement for macros. PCSX2 uses templates extensively to generate\\nfunction call dispatches for various customizable features of the PS2. A\\ncommon technique in templates is to use switch statements to simplify\\ncode:\\n\\n```cpp\\ntemplate&lt; uint value > void Dispatch()\\n{\\n[.. setup code ..]\\n\\nswitch(value)\\n{\\ncase 1: [.. do stuff ..] break;\\ncase 2: [.. do stuff ..] break;\\ncase 3: [.. do stuff ..] break;\\n}\\n\\n[.. cleanup code..]\\n}\\n```\\n\\n\\nIn the above example, we\'ve created a function that executes one of four\\npossible actions. The only thing that changes between each action is the\\ninterior -- all actions share the same basic setup/cleanup code. Instead\\nof using separate functions and/or macros to do four separate instances\\nof the setup and cleanup code, we\'re able to merge everything into a\\nsingle template function. The compiler will automatically optimize the\\nfunction to use *only* the selected path. If *\'value\'* is 1, it runs\\nswitch case 1. If it is 0, the entire switch is disregarded, etc.\\n\\nThe problem is the same as with the inlined function above: Visual C++\'s\\noptimizer bases a lot of its optimization on the **whole function\\nanyway** , so dead code that isn\'t even part of a particular template\\ncan adversely impact MSVC\'s code generation strategy. If only one of the\\nswitch cases modifies global memory, any call to any other case will\\nstill result in the compiler flushing global registers. Fortunately this\\nparticular optimization is minor, and losing it has barely any\\nnoticeable impact on performance on modern CPUs.\\n\\n# Sparse Switches and Binary Irony\\n\\nA second and more serious optimization failure occurs in\\ntemplated/inlined functions, however; if the function happens to use\\n*sparse* switches. A sparse switch is one where the values are not\\ncontigious. Example:\\n\\n```cpp\\nswitch(value)\\n{\\ncase 0x0: if(toggle) { code; } break;\\ncase 0x100: if(toggle) { code; } break;\\ncase 0x101: if(toggle) { code; } break;\\ncase 0x102: if(toggle) { code; } break;\\ncase 0x520: if(toggle) { code; } break;\\ncase 0x521: if(toggle) { code; } break;\\ncase 0x522: if(toggle) { code; } break;\\ncase 0x733: if(toggle) { code; } break;\\n}\\n```\\n\\n\\nIn this example, MSVC\'s optimizer will employ the use of a *binary\\nsearch* to dispatch the switch. Rather than compare each value\\nindividually (8 compares), it will divide the switch into halves or\\nquarters. The resulting optimized code typically finds the right case in\\ntwo compares, with a worst case of 3-5 compares typically (a vast\\nimprovement over an individual linear search, which has a median of 4\\ncompares and worst case of 8 compares). This a great and wonderful\\noptimization and is often times *faster* than using function lookup\\ntables.\\n\\n... but it actually *backfires* if the **toggle** value is a known\\nconstant (such as a template parameter). The optimization method of the\\nswitch statement is made by MSVC 2008 *before* it eliminates unused\\ncode. So even if you explicitly assign a **value** of 0x101, MSVC 2008\\nwill include its clever binary partition logic! The resulting\\npseudo-code generated by the MSVC optimizer ends up looking something\\nlike this:\\n\\n```cpp\\nif(value >= 0x520) return;\\nif(value &lt; 0x100) return;\\n\\nreturn; // which is the result of case 0x101 with toggle==false;\\n```\\n\\n\\nThe explicit checks for equality are optimized out, as are all unused\\ncases -- just the umbrella binary search logic remains, and all it does\\nis return from the function without doing anything. So what should be a\\nnull function ends up having 2 pointless compares; ironically caused by\\na clever and highly effective optimization strategy in any other normal\\nsituation."},{"id":"/2010/ps2s-programmable-dma","metadata":{"permalink":"/pcsx2-net-www/blog/2010/ps2s-programmable-dma","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/ps2s-programmable-dma/index.mdx","source":"@site/blog/2010/ps2s-programmable-dma/index.mdx","title":"PS2\'s Programmable DMA","description":"For those who don\'t know, DMA stands for Direct Memory Access, and it refers to logic circuits in a computer that allow for the automated transfer of system memory to and from peripherals","date":"2010-08-31T00:00:00.000Z","formattedDate":"August 31, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":5.18,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2010-08-31T00:00:00.000Z","description":"For those who don\'t know, DMA stands for Direct Memory Access, and it refers to logic circuits in a computer that allow for the automated transfer of system memory to and from peripherals","draft":false,"tags":["devblog"],"title":"PS2\'s Programmable DMA"},"prevItem":{"title":"MSVC 2008 Optimizer Fail","permalink":"/pcsx2-net-www/blog/2010/msvc-2008-optimizer-fail"},"nextItem":{"title":"Advanced Memory Management","permalink":"/pcsx2-net-www/blog/2010/advanced-memory-management"}},"content":"For those who don\'t know, DMA stands for ***Direct Memory Access*** ,\\nand it refers to logic circuits in a computer that allow for the\\nautomated transfer of system memory to and from *peripherals* . DMAs are\\nbeneficial because they are simple circuits that do work in parallel to\\nthe CPU -- while a DMA transfers data, the CPU is free to do other\\nwork.that requires more complex computations and logic. The end result\\nis better utilization of the computer\'s maximum memory transfer\\nbandwidth and computational/logical ability.\\n\\n\x3c!-- truncate --\x3e\\n\\n\\nTraditionally DMAs are pretty simple. The Playstation 2\'s EmotionEngine,\\nhowever, has an \'intelligent\' programmable DMA controller (DMAC). Neatly\\ntranslated, it means that the DMAC can do a lot more than just move raw\\ndata from place to place. It supports several modes of operation and has\\na number of special features to take advantage of the unique multi-core\\ndesign of the EE. Furthermore, the EE\'s DMAC is much more tightly\\nintegrated with its memory bus than traditional DMAs, allowing it to\\ntransfer data with exceptional efficiency. These two features combined\\nmake the EE\'s DMAC a *key component* to PS2 games developers -- in quite\\na few games, the DMAC actually does *more raw work* than the EE Core CPU\\n(R5900).\\n\\n**How The Real Thing Works**\\n\\nWhile emulating the actual hardware of the DMAC isn\'t usually needed, it\\ncan still be helpful to understand exactly how the PS2\'s real DMAC works\\nat a hardware level. The EE DMAC operates at 147mhz (1/2th the EE\'s core\\nclock speed), and transfers 128 bits (16 bytes) of memory per cycle;\\nmeaning that the theoretical maximum transfer rate of the DMAC is 2.4\\nGB/s (147mhz \\\\* 16 bytes). It\'s a nice number, but is technically\\nunattainable even in ideal conditions. Further explanation will make it\\nclear why.\\n\\nThe DMAC connects the PS2\'s 32 MB of Main Memory (RAM) to various\\nperipheral interfaces, such as VIF (VPU), SIF (IOP), GIF (GS), and IPU\\n(mpeg decoder). VIF, GIF, and IPU are all part of the Emotion Engine and\\noperate at 147mhz, same as the DMAC itself. Thus each of those\\ninterfaces can send/receive data at roughly 2.4GB/s. SIF is limited by\\nthe IOP\'s own DMA controller and memry bus, which operates at 1/8th the\\nspeed of the EE\'s DMAC, or about 154MB/s.\\n\\n**Peripheral FIFOs**\\n\\nEach peripheral (VIF, GIF, SIF, IPU, etc) has a 128 or 256 byte FIFO.\\nThe FIFO helps mitigate occasional latency differences between Main\\nMemory/SPRAM and the peripheral (some peripherals, in particular the\\nGIF, can incur cycle stalls depending on data sent to them). Thanks to\\nthe FIFOs, data can be *burst* to/from memory in 128-byte blocks, which\\nhelps maximize data transfer rates since the EE\'s memory bus was built\\nto operate most efficiently in those conditions. However, the maximum\\nbandwidth of Main Memory (32MB) in ideal conditions is only \\\\~1.2GB/s\\n(half of the DMAC), and has additional memory bank related latencies,\\nreducing its effective transfer rates even further. If DMA transfers are\\nonly done to/from Main Memory, the DMAC will only be able to come within\\nabout 40% of its theoretical maximum throughput.\\n\\n**Enter the Scratchpad!**\\n\\nThe Scratchpad (SPRAM) is 16KB of memory integrated directly into the\\nEmotionEngine. Because it is directly integrated on-die, it has no\\nread/write latencies and can *always* be accessed at the maximum\\ntransfer rate of 2.4gb/s. The integrated nature of the SPRAM means it\\nhas to be small in order to fit -- and its lack of size is what limits\\nits usefulness.\\n\\nSo in order to utilize the bandwidth potential of the EE DMAC, a PS2\\nprogrammer must find ways to use a combination of Main Memory and\\nScratchpad transfers in parallel: When main memory stalls due to\\ninherent latencies, the DMAC will automatically busy itself with a\\npending SPRAM transfer. Likewise, while the DMAC is transferring to/from\\nSPRAM, the EE\'s Main Memory becomes available to the CPU, which further\\nimproves the system\'s CPU throughput.\\n\\n**The Scratchpad\'s MemoryFIFO (MFIFO)**\\n\\nThe MemoryFIFO function of the EE DMAC performs and managed two\\nsimultaneous DMA transfers, as follows:\\n\\n-   Scratchpad -&gt; Main Memory (RAM)\\n-   Main Memory (RAM) -&gt; Peripheral (VIF1 or GIF)\\n\\n\\nAs the buffer in memory is filled by Scratchpad, it is simultaneously\\ndrained by the attached peripheral, either VIF1 or GIF. On the surface,\\nthe MFIFO can appear to be somewhat silly, since the DMAC already has\\nthe ability to transfer direcly from SPRAM -&gt; Peripheral. Adding a\\nstop in Main Memory might seem like a waste of the DMAC\'s bandwidth\\ncapacity, but in some situations the \'extra work\' can result in a\\ngeneral improvement in overall transfer speeds.\\n\\nThe PS2 engineers introduced the MFIFO for two reasons:\\n\\n1. The scratchpad is too small. MFIFO can be used by the EE core as a\\nplace to \\"empty\\" the scratchpad after its completed a set of data\\nprocessing. While the data in the MFIFO awaits the DMAC to transfer it,\\nthe EE is free to load new raw data into Scratchpad for processing.\\n\\n2. The GIF has additional bandwidth constraints since it has direct\\nconnections to three **PATHs** : the the VU1 co-processor (GIF PATH1),\\nVIF1 FIFO (GIF PATH2), and the DMAC\'s GIF channel (GIF PATH3). When\\ntransfers are active on any one of the paths, the other two paths must\\nidle/stall until the current path\'s transfer completes; meaning that\\nDMAC transfers to both GIF and VIF1 channels can have unexpectedly long\\nstalls.\\n\\nSo by using MFIFO, the EE core can mitigate the unpredictable GIF/VIF1\\nstalls while it works on entirely new sets of data in parallel. If a GIF\\ntransfer via DMA is stalled because of other PATH1 or PATH2 transfers,\\nthe DMAC can busy itself with other transfers in meantime, such as\\nSPRAM-&gt;memory or memory-&gt;SPRAM. These transfers are nearly \'free\'\\nin a sense, since the DMAC would have been idle regardless -- but thanks\\nto the MFIFO concept, the SPRAM itself will be free for use by the EE\\nCore to continue processing data. Thus while the DMAC\'s overall\\nproductivity isn\'t affected, the EE\'s overall computational ability\\nimproves.\\n\\nI\'ll talk a bit more on actual emulation details of the PS2\'s\\nprogrammable DMA controller in future blogs, so this is *To Be\\nContinued...*"},{"id":"/2010/advanced-memory-management","metadata":{"permalink":"/pcsx2-net-www/blog/2010/advanced-memory-management","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/advanced-memory-management/index.mdx","source":"@site/blog/2010/advanced-memory-management/index.mdx","title":"Advanced Memory Management","description":"Being an emulator of a fairly robust system (the PS2), PCSX2 typically consumes a lot of system RAM","date":"2010-08-19T00:00:00.000Z","formattedDate":"August 19, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":6.275,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2010-08-19T00:00:00.000Z","description":"Being an emulator of a fairly robust system (the PS2), PCSX2 typically consumes a lot of system RAM","draft":false,"tags":["devblog"],"title":"Advanced Memory Management"},"prevItem":{"title":"PS2\'s Programmable DMA","permalink":"/pcsx2-net-www/blog/2010/ps2s-programmable-dma"},"nextItem":{"title":"Virtualalloc On Linux","permalink":"/pcsx2-net-www/blog/2010/virtualalloc-on-linux"}},"content":"Being an emulator of a fairly robust system (the PS2), PCSX2 typically\\nconsumes a *lot* of system RAM. It needs multitudes of caches and\\nbuffers for various things. Just to give an idea, I\'ll list some of the\\nlarger stuff and their current defaults:\\n\\n\x3c!-- truncate --\x3e\\n\\n-   PS2 main memory \\\\[32mb\\\\]\\n-   IOP memory \\\\[2mb\\\\]\\n-   EE/IOP BIOS roms \\\\[6mb\\\\]\\n-   Scratchpad, Hardware registers, VU memory, DMA buffers, etc \\\\[4mb\\\\]\\n-   VTLB indexes, lookups, and protection tables \\\\[8mb\\\\]\\n-   EE/R5900 recompiler cache \\\\[16mb\\\\]\\n-   EE/R5900 recompiler block/pc translation table \\\\[48mb\\\\]\\n-   R5900 memory protection mirror \\\\[32mb\\\\]\\n-   IOP/R3000A recompiler cache and translation table \\\\[10mb\\\\]\\n-   microVU recompiler code caches \\\\[16mb \\\\* 2\\\\]\\n-   superVU recompiler code caches \\\\[8mb\\\\]\\n\\n\\nIf all of these things are reserved when PCSX2 starts, we have a base\\nmemory footprint of over 200 megs before even a single instruction of\\nPS2 code is executed! The worst part is that we could really stand to\\nallocate *even more* ram: some games need over 120 mb of recompiler\\ncaches to run properly. Currently those games are dealt with by issuing\\nperiodic recompiler resets (sluggish).\\n\\nFortunately modern operating systems have a lot of built-in features\\nthat help us out. Both Windows and Linux OSes use *virtual memory\\nmapping* features of our Intel/AMD cpus to perform \\"virtual\\" allocations\\nof large memory reserves. What this means is that initially the\\nallocated memory has no actual *physical* equivalent. It is only given a\\nphysical presence once the memory is accessed (read or written).\\nExplained as a process:\\n\\n1. App requests 1gb of RAM via malloc.\\n2. Operating system \\"reserves\\" the 1gb of RAM, which marks the virtual\\naddresses for use by this memory only. In this case the memory might be\\nreserved from 0x10000000 (0.4gb) -&gt; 0x50000000 (1.4gb).\\n3. Operating system \\"commits\\" the 1gb of RAM, ensuring there is enough\\nphysical and swapfile RAM to accommodate it. No actual memory or\\nswapfile changes are made; only the tracked amount of ram/swap in\\nreserve is altered.\\n3. App receives a pointer to the reserved ram.\\n4. App reads or writes data -- 128mb worth, let\'s say.\\n5. OS receives a *page fault* exception for that memory, and allocates a\\nchunk of *physical* RAM for it. Other processes may be swapped out to\\ndisk at this time to make room for the memory in-use.\\n\\nOnly at Point 5 does any actual physical ram get used by the program.\\nPrior to Point 5, the app has used exactly 0 byte of RAM, in spite of\\nallocating 1gb via **malloc** . This feature is implicit to both Windows\\nand Linux and already helps work wonders on PCSX2\'s overall memory\\nfootprint. This is also why you might get \\"Low on virtual memory!\\"\\nerrors even though it appears as though you have lots of free ram in the\\nSystem Monitor / Process Explorer, because some apps commit lots of\\nmemory but only actually access a small fraction of it.\\n\\nThere are ways, however, to fine tune memory access and get even better\\nmemory management than the implicit Windows / Linux provisions via\\nmalloc. The first rule is a simple one, but one many programmers\\nprobably have no idea about it:\\n\\n**Do not use calloc, and do not clear allocated memory by default unless you absolutely have to!**\\n\\nCalling **calloc** instead of **malloc** causes the entire allocation\\n(1gb in our above example) to be committed to physical memory because of\\nits being cleared to zero. Likewise, manually clearing buffers to zero\\n(or some other value) has the same effect. Even if only a small portion\\nof the array ends up being used later on, its too late: the whole thing\\nis sucking up resources for no good reason except to express a patterned\\nfill value. Sometimes clearing buffers cannot be avoided, but most of\\nthe time buffers need not be cleared at all, and programmers simply use\\ncalloc or manual clears out of habit.\\n\\n**Using Reserve and Commit to manage recompiled code buffers.**\\n\\nThere are two phases to allocating memory on a virtual memory system, as\\nnoted in the small ordered list above. By default, **malloc** will\\n*reserve* and *commit* ram together. This is done so that the system can\\nensure that there is enough ram and swap to free to give the program the\\nentire allocation -- *if* it happens to ever need it. If the *commit*\\nphase fails due to there not being enough physical ram, **malloc**\\nreturns NULL. If you manage the reserve and commit phases separately,\\nthen you can reserve extra large swatches of memory addresses without\\naffecting the rest of the operating system in any way; and then later on\\ncommit portions of the reserve only as needed. There aren\'t a whole lot\\nof reasons why you\'d need to micro-manage the virtual memory system in\\nthis way, and for most purposes simply using malloc and letting the OS\\ndo its own internal management suffices nicely. Lucky for us, PCSX2 has\\none!\\n\\nOne of the troubles with recompiled code is that it can\'t be allowed to\\n*move* . Typically use of **malloc** and **realloc** results in\\nallocated memory moving around as it grows or shrinks. This is fine for\\nmost purposes, but is disastrous to executable code since it invalidates\\nall block pointers and long jumps (which use absolute addressing). In\\norder to grow a recompiled code cache using traditional malloc, you have\\nto clear the cache and start over -- a recompiler reset. This usually\\ncauses a lengthy hiccup in emulation speed when it happens.\\n\\nVirtual memory techniques can be used to get around that. When we\\nreserve the recompiled code cache, we reserve the upper limit of what we\\ndeem a sane cache size. In this case, the R5900 cache should be a\\nmaximum of 48mb. The 48mb is reserved from 0x30000000-&gt;0x33000000\\nwhen PCSX2 starts, the first 4mb are *committed* when PCSX2 starts\\nexecuting R5900 code. When the cache fills, PCSX2 automatically commits\\nmore memory in 128k increments, up to 48mb -- at which point the\\nemulator will reset the cache and start over. Thanks to the virtual\\nmemory strategy described above, only a fraction of the 48meg allocation\\nactually *exists* in physical ram unless more of the allocation is\\nactually needed. Furthermore, computers with limited RAM resources or\\ndisabled swapfiles will still be able to run PCSX2 nicely.\\n\\nCommitting blocks of memory from the 48meg reserve never alters the base\\naddress of the memory, so no pointers become invalid, and no memory\\nneeds to be copied or shuffled in order to make room for the larger\\ncaches. The end result is near instantaneous increases in cache size,\\non-the-fly! ... and all-the-while maintaining compact and efficient\\nmemory footprint for games that don\'t need more than the basic caches.\\n\\nOn Windows this technique is implemented using\\n[VirtualAlloc](http://msdn.microsoft.com/en-us/library/aa366887.aspx) ,\\nwhich is fairly well documented via the linked MSDN page. On Linux,\\nhowever, things get a bit strange. The technique can be implemented\\nusing a combination of\\n[mmap](http://www.kernel.org/doc/man-pages/online/pages/man2/mmap.2.html)\\nand\\n[mprotect](http://www.kernel.org/doc/man-pages/online/pages/man2/mprotect.2.html)\\n, but unfortunately the Linux man pages lack any actual explanation of\\nhow to perform independent reserve and commit actions (but rest assured,\\nit can be done). Furthermore, Linux has an implicit system enabled by\\ndefault called **Over-committing** , which basically skips phase (3)\\ndescribed above -- and always returns a valid pointer on calls to\\nmalloc, even if the system hasn\'t enough ram to accommodate the\\nrequest.\\n\\nOver-committing is so surpassingly hacky and evil that it deserves a\\nblog post all to itself, so stay tuned.\\n\\n***To be continued...***"},{"id":"/2010/virtualalloc-on-linux","metadata":{"permalink":"/pcsx2-net-www/blog/2010/virtualalloc-on-linux","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/virtualalloc-on-linux/index.mdx","source":"@site/blog/2010/virtualalloc-on-linux/index.mdx","title":"Virtualalloc On Linux","description":"Yes, there is a way to simulate Microsoft\'s VirtualAlloc behavior on Linux","date":"2010-08-19T00:00:00.000Z","formattedDate":"August 19, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.13,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2010-08-19T00:00:00.000Z","description":"Yes, there is a way to simulate Microsoft\'s VirtualAlloc behavior on Linux","draft":false,"tags":["devblog"],"title":"Virtualalloc On Linux"},"prevItem":{"title":"Advanced Memory Management","permalink":"/pcsx2-net-www/blog/2010/advanced-memory-management"},"nextItem":{"title":"PCSX2 Plugins Update For Windows!","permalink":"/pcsx2-net-www/blog/2010/pcsx2-plugins-update-for-windows"}},"content":"Yes, there is a way to simulate Microsoft\'s\\n[VirtualAlloc](http://msdn.microsoft.com/en-us/library/aa366887.aspx)\\nbehavior on Linux. Much searching of the internet did not reveal a\\nsatisfactory answer; only hints that when combined with some applied\\ntests of my own yielded the following result:\\n\\n\x3c!-- truncate --\x3e\\n\\n```cpp\\n// to RESERVE memory in Linux, use mmap with a private, anonymous, non-accessible mapping.\\n// The following line reserves 1gb of ram starting at 0x10000000.\\n\\nvoid* result = mmap((void*)0x10000000, 0x40000000, PROT_NONE, MAP_PRIVATE | MAP_ANON, -1, 0);\\n\\n// to COMMIT memory in Linux, use mprotect on the range of memory you\'d like to commit, and\\n// grant the memory READ and/or WRITE access.\\n// The following line commits 1mb of the buffer.  It will return -1 on out of memory errors.\\n\\nint result3 = mprotect((void*)0x10000000, 0x100000, PROT_READ | PROT_WRITE);\\n```\\n\\nWhen using **mmap** , you can create a simple uncommitted reservation of\\nmemory simply by specifying PROT\\\\_NONE on any anonymous mapping (in the\\nworld of mmap, anonymous means it has no associated file/pipe -- it\'s\\njust a memory block). This is sufficient for reserving a large\\ncontiguous address range from being fragmented up by the likes of\\nmalloc. Granting the memory read and/or write privileges tells Linux to\\n*commit* the memory (equivalent to VirtualAlloc with MEM\\\\_COMMIT). If\\nthere is not enough system memory to complete the call, it returns -1.\\n\\nOddly enough, though, Linux makes it so that it isn\'t even necessary to\\nbother with the above solution, via a strange little hacky technique\\ncalled...\\n\\n# Over-committing Memory\\n\\nThis \'feature\' is enabled by default in most modern Linux kernels\\n(anything 2.6 or newer). Basically all this means is that Linux will let\\nprograms *commit* a lot more RAM than is actually available to the\\noperating system! Instead of performing a \\"strict contract\\" on commit\\nthat says \\"oh yes we absolutely have this much ram available\\", Linux\\nlooks at the ram and looks at the request, and makes some arbitrary\\njudgement call on if the program will actually use that much ram or not.\\nIn other words, just because your call to malloc returned a valid\\nnon-NULL pointer doesn\'t mean there\'s actually anywhere near that much\\nmemory available to your app. It just means that Linux doesn\'t think\\nyou\'re going to use that much.\\n\\nInstead, as a program references its allocated memory, Linux commits the\\nmemory on-demand. Most of the time, programs that malloc huge amounts of\\nram only use a wee bit of it, so that\'s fine. By using *overcommitted*\\nmemory management, Linux avoids the dreaded \\"Low on virtual memory!\\"\\nerror that can sometimes plague Windows. This is actually highly ideal\\nfor apps like PCSX2 and the Java virtual machine, for example. Kudos!\\n\\n.. oh but things do get fun if apps over-step their bounds!\\n\\nThanks to over-committing, Linux programs that run out of memory do not\\nget error codes or NULL pointers. Instead they will typically be KILLED\\nINSTANTLY by the kernel. They do not get out of memory errors, and they\\ndon\'t even get SIGSEGV or anything else that can be handled or logged.\\nThey just DIE -- because doing anything else would risk system\\nstability. So in the long run, its still a good idea to use the\\nReserve/Commit management strategy even on Linux (mmap / mprotect as\\ndescribed above); because your app will be more likely to get proper\\nout-of-memory errors instead of just causing itself (and possibly other\\nprocesses on the system) to die suddenly and without warning or error.\\n\\nAnother positive for the the above mmap / mprotect example is that it\\nwill also work *well* on Linux systems that have over-commit disabled,\\nsince it basically does what over-commit does but without the hacky\\n\\"programs die instantly without error\\" part if the system runs out of\\nphysical memory."},{"id":"/2010/pcsx2-plugins-update-for-windows","metadata":{"permalink":"/pcsx2-net-www/blog/2010/pcsx2-plugins-update-for-windows","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/pcsx2-plugins-update-for-windows/index.mdx","source":"@site/blog/2010/pcsx2-plugins-update-for-windows/index.mdx","title":"PCSX2 Plugins Update For Windows!","description":"We\'ve made some important changes to GSdx and SPU2-X concerning bugfixes, stability, and emulation correctness. It\'s best to use these with the PCSX2 0.9.7.r3113 beta release.","date":"2010-08-09T00:00:00.000Z","formattedDate":"August 9, 2010","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":0.8,"hasTruncateMarker":true,"authors":[{"name":"rama","url":"https://github.com/ramapcsx2","imageURL":"https://github.com/ramapcsx2.png","key":"rama"}],"frontMatter":{"authors":["rama"],"date":"2010-08-09T00:00:00.000Z","description":"We\'ve made some important changes to GSdx and SPU2-X concerning bugfixes, stability, and emulation correctness. It\'s best to use these with the PCSX2 0.9.7.r3113 beta release.","draft":false,"tags":["progress-report"],"title":"PCSX2 Plugins Update For Windows!"},"prevItem":{"title":"Virtualalloc On Linux","permalink":"/pcsx2-net-www/blog/2010/virtualalloc-on-linux"},"nextItem":{"title":"The Return Of The Commandline","permalink":"/pcsx2-net-www/blog/2010/the-return-of-the-commandline"}},"content":"Hey guys!\\nWe\'ve made some important changes to GSdx and SPU2-X concerning bugfixes, stability, and emulation correctness. It\'s best to use these with the PCSX2 0.9.7.r3113 beta release.\\n\\n\x3c!-- truncate --\x3e\\n\\nGSdx changes:\\n\\n-   Better DirectX 11 detection.\\n-   Wrong colors in the movie record feature fixed.\\n-   More CRCs for automatic post process removal.\\n-   Stability fixes and preparation work for future PCSX2 revisions.\\n-   Finally fixed the remaining DirectX 11 memory leaks on emulator\\nsuspends!\\n\\nSPU2-X changes:\\n\\n-   Major bugfix that prevented SPU2-X from initializing on many users\\nsystems.\\n-   More accurate emulation regarding double interrupts.\\n-   Fixed minor volume issues and doubled output volume.\\n-   Fixed a write-back issue that had caused memory corruption before.\\nNow the Tales of Destiny 2 sound test has a working visual\\nequalizer.\\n-   Mostly fixed voice modulation (used in Romancing Saga and FFX\\nbattles).\\n-   Clamp illegal pitch settings, fixing another bunch of games.\\n-   Hopefully fixed bad reverb area problems."},{"id":"/2010/the-return-of-the-commandline","metadata":{"permalink":"/pcsx2-net-www/blog/2010/the-return-of-the-commandline","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/the-return-of-the-commandline/index.mdx","source":"@site/blog/2010/the-return-of-the-commandline/index.mdx","title":"The Return Of The Commandline","description":"After its absence for many moons, the Commandline functionality will finally be restored to PCSX2","date":"2010-06-11T00:00:00.000Z","formattedDate":"June 11, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.57,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2010-06-11T00:00:00.000Z","description":"After its absence for many moons, the Commandline functionality will finally be restored to PCSX2","draft":false,"tags":["devblog"],"title":"The Return Of The Commandline"},"prevItem":{"title":"PCSX2 Plugins Update For Windows!","permalink":"/pcsx2-net-www/blog/2010/pcsx2-plugins-update-for-windows"},"nextItem":{"title":"Facebook, Twitter And Exposure!","permalink":"/pcsx2-net-www/blog/2010/facebook-twitter-and-exposure"}},"content":"After its absence for many moons, the Commandline functionality will\\nfinally be restored to PCSX2. Third-party frontend and config-manager\\nauthors rejoice! ... and hopefully stop hating my guts, too.\\n\\n\x3c!-- truncate --\x3e\\n\\nTo paraphrase Darth Vader: **\\"Witness the power of this fully armed and\\noperational Command line-driven battlestation.\\"**\\n\\n*(we all know a command line-driven death star would have been way\\ncooler than some click-and-drag crap.)*\\n\\nThe new PCSX2 command line should be functional in our next beta\\nrelease, which should be out pretty soon, and it will work as follows:\\n\\nSyntax: **pcsx2 \\\\[IsoFile\\\\] --toggle --option=value ... etc**\\n\\n-   IsoFile - optional ISO image to load and run on startup; uses the\\nPCSX2 internal ISO loader.\\n\\nGeneral Options :\\n\\n-   --cfg=\\\\[file\\\\] {specify a custom configuration file to use instead\\nof PCSX2.ini (does not affect plugins)}\\n-   --cfgpath=\\\\[dir\\\\] {specifies the config folder; applies to pcsx2 +\\nplugins}\\n-   --help {display this help text}\\n-   --forcewiz {forces running of the First-time Wizard (selection of\\ndocs folders and what-not)}\\n\\n\\nAuto-Run Options :\\n\\n-   --elf=\\\\[file\\\\] {executes an ELF image}\\n-   --nogui {disables display of the gui on exit (program auto-exits)}\\n-   --nodisc {boots with an empty dvd tray; use this to boot into the\\nPS2 system menu}\\n-   --usecd {uses the configured CDVD plugin instead of IsoFile}\\n\\n\\nCompatibility Options:\\n\\n-   --nohacks {disables all speedhacks}\\n-   --gamefixes=\\\\[fix,fix\\\\] {Enable specific gamefixes for this session.\\nValid fixes in 0.9.7 are: VuAddSub, VuClipFlag, FpuCompare,\\nFpuNegDiv, XGKick, IpuWait, EETiming, SkipMpeg }\\n-   --fullboot {disables the quick boot feature, forcing you to sit\\nthrough the PS2 startup splash screens}\\n\\n\\nPlugin Overrides (specified dlls will be used in place of configured\\ndlls):\\n\\n-   --cdvd=\\\\[dllpath\\\\] {override for the CDVD plugin}\\n-   --gs=\\\\[dllpath\\\\] {override for the GS plugin}\\n-   --spu=\\\\[dllpath\\\\] {override for the SPU2 plugin}\\n-   --pad=\\\\[dllpath\\\\] {override for the PAD plugin only}\\n-   --dev9=\\\\[dllpath\\\\] {override for the DEV9 plugin}\\n-   --usb=\\\\[dllpath\\\\] {override for the USB plugin only}"},{"id":"/2010/facebook-twitter-and-exposure","metadata":{"permalink":"/pcsx2-net-www/blog/2010/facebook-twitter-and-exposure","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/facebook-twitter-and-exposure/index.mdx","source":"@site/blog/2010/facebook-twitter-and-exposure/index.mdx","title":"Facebook, Twitter And Exposure!","description":"Just a quick one for a couple of things that have been floating about i wanted to bring to your attention.","date":"2010-06-02T00:00:00.000Z","formattedDate":"June 2, 2010","tags":[],"readingTime":0.88,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2010-06-02T00:00:00.000Z","description":"Just a quick one for a couple of things that have been floating about i wanted to bring to your attention.","draft":false,"title":"Facebook, Twitter And Exposure!"},"prevItem":{"title":"The Return Of The Commandline","permalink":"/pcsx2-net-www/blog/2010/the-return-of-the-commandline"},"nextItem":{"title":"PCSX2 0.9.7 Beta Released!","permalink":"/pcsx2-net-www/blog/2010/pcsx2-0-9-7-beta-released"}},"content":"Just a quick one for a couple of things that have been floating about i wanted to bring to your attention.\\n\\n\x3c!-- truncate --\x3e\\n\\n**PCSX2 Used in Test:**\\n\\nThe first is a mention from our friends at Eurogamer and Kotaku! PCSX2\\nwas used in an experiment to see what ICO and Shadow of the Colossus\\nwould be like if they were re-released on the PS3 in HD (Note, they did\\nNOT use the PS3\'s upscaling ability\\n\ud83d\ude1b ), Check out these articles below.\\n\\n(Thanks for Parotaku for finding these)\\nKotaku:\\n[http://kotaku.com/5553017/ico-shadow-of-...reat-in-hd](http://kotaku.com/5553017/ico-shadow-of-the-colossus-look-this-great-in-hd)\\nEurogamer:\\n[http://www.eurogamer.net/articles/ico-an...ated-in-hd](http://www.eurogamer.net/articles/ico-and-shadow-of-the-colossus-emulated-in-hd)\\n\\nBig thank you to Eurogamer and Kotaku, i hope you guys enjoyed the\\nemulator\\n\ud83d\ude0a\\n\\n**We\'re On Facebook and Twitter!:**\\n\\nMany people have asked for it, so I\'ve branched out into the popular\\nsocial networking site [Facebook](http://www.facebook.com) as well as\\nmicroblogging site [Twitter](http://www.twitter.com) in order to provide\\nmore avenues for our users to interact and keep informed on PCSX2.\\n\\nYou can find us as [@PCSX2](http://twitter.com/PCSX2) on\\n[Twitter](http://www.twitter.com) and join [The Official PCSX2 Facebook\\nGroup](http://www.facebook.com/groups/98483509559/) Hope to see all of\\nyou there!\\n\\nGreets\\nRefraction"},{"id":"/2010/pcsx2-0-9-7-beta-released","metadata":{"permalink":"/pcsx2-net-www/blog/2010/pcsx2-0-9-7-beta-released","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/pcsx2-0-9-7-beta-released/index.mdx","source":"@site/blog/2010/pcsx2-0-9-7-beta-released/index.mdx","title":"PCSX2 0.9.7 Beta Released!","description":"After more than a year since the last stable 0.9.6 release and 8 months since the last beta release of PCSX2, the new beta version is finally ready!","date":"2010-05-29T00:00:00.000Z","formattedDate":"May 29, 2010","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":1.74,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2010-05-29T00:00:00.000Z","description":"After more than a year since the last stable 0.9.6 release and 8 months since the last beta release of PCSX2, the new beta version is finally ready!","draft":false,"tags":["progress-report"],"title":"PCSX2 0.9.7 Beta Released!"},"prevItem":{"title":"Facebook, Twitter And Exposure!","permalink":"/pcsx2-net-www/blog/2010/facebook-twitter-and-exposure"},"nextItem":{"title":"SPU2 Is More Than Just Sound","permalink":"/pcsx2-net-www/blog/2010/spu2-is-more-than-just-sound"}},"content":"After more than a year since the last stable 0.9.6 release and 8 months since the last beta release of PCSX2, the new beta version is finally ready!\\nThe most notable change is the all new GUI powered by wxWidgets, but the\\namount of improvements in this release is really amazing\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nThis 0.9.7 release is marked as unstable/beta, meaning it still has some\\nknown bugs and unimplemented features but it is fully supported by the\\nPCSX2 team. For more info, check the included readme file.\\n\\nWithout further delay, here\'s the extensive changelog:\\n\\n-   New GUI based on wxWidgets working on a separate thread\\n-   microVU, an all new VU0/VU1/COP2 recompiler\\n-   VIF rewritten and a new Vif Unpack recompiler\\n-   IPU improvements, many more videos now play perfectly\\n-   Stable full screen operation with GSdx\\n-   Alt+Enter Hotkey for real-time fullscreen/window mode switching\\n-   Many new emulation options, complete with tooltips\\n-   New MTGS, much more efficient and compatible\\n-   New BIOS skipping method, more compatible and correct\\n-   New Host File System Support\\n-   Turbo/Slow motion settings for the frame limiter\\n-   On the fly changing of settings and plugins\\n-   Threaded Saving/Loading states, so it does not pause gameplay\\n-   Built in ISO reader with a recently used ISO list\\n-   Suspend / Resume emulation safely and fast\\n-   Simplified plugin configuration dialog, with more options\\n-   Full DVD9 game support (for example God of War, Xenosaga, Gran\\nTurismo 4 etc)\\n-   First time configuration wizard\\n-   Settings stored in your User documents folder by default to prevent\\nVista / Windows 7 permission issues\\n-   New Game database detects the game you run, displays compatibility\\ninfo, and auto applies special game fixes/patches if needed\\n-   Cheats are now separate from patches, cheats can be placed in the\\n\\"cheats\\" folder and enabled/disabled from pcsx2\'s file-menu\\n-   Many important plugin updates, GSdx has many bugs and memory leaks\\nfixed, SPU2-X makes dozens of games boot which never did before\\n-   And a huge amount of improvements and bug fixes which we don\'t\\nremember anymore"},{"id":"/2010/spu2-is-more-than-just-sound","metadata":{"permalink":"/pcsx2-net-www/blog/2010/spu2-is-more-than-just-sound","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/spu2-is-more-than-just-sound/index.mdx","source":"@site/blog/2010/spu2-is-more-than-just-sound/index.mdx","title":"SPU2 Is More Than Just Sound","description":"The SPU2 is the Sound Processing Unit for the Playstation 2, and works a lot like the sound card in your own PC","date":"2010-03-22T00:00:00.000Z","formattedDate":"March 22, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.95,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2010-03-22T00:00:00.000Z","description":"The SPU2 is the Sound Processing Unit for the Playstation 2, and works a lot like the sound card in your own PC","draft":false,"tags":["devblog"],"title":"SPU2 Is More Than Just Sound"},"prevItem":{"title":"PCSX2 0.9.7 Beta Released!","permalink":"/pcsx2-net-www/blog/2010/pcsx2-0-9-7-beta-released"},"nextItem":{"title":"Updated Plugins On The Beta Downloads Page","permalink":"/pcsx2-net-www/blog/2010/updated-plugins-on-the-beta-downloads-page"}},"content":"The SPU2 is the *Sound Processing Unit* for the Playstation 2, and works\\na lot like the sound card in your own PC; albeit still quite unique in\\nits approach to mixing sounds/voices and the programmable interface it\\nprovides for that. But the SPU2 is more than just sound. It\'s one of the\\nmore reliable timing mechanisms on the PS2 and games tend to use it as\\nsuch. Without at least basic SPU2 emulation, no games will boot at all.\\nThis isn\'t too surprising if you understand how console hardware\\ntypically works, but what might be surprising is realizing how many\\ngames won\'t boot even with what *appears* to be fairly competent SPU2\\nemulation.\\n\\n\x3c!-- truncate --\x3e\\n\\nUntil SPU2-X 1.4, no SPU2 plugin had gone the distance on implementing\\n**IRQs** ( *Interrupt Requests* ). IRQs are scheduled via specific SPU2\\nmemory addresses. When a marked memory address is accessed *anywhere* in\\nSPU2 memory (either read or write), the IRQ is signaled to the IOP. The\\nmost important IRQs on DMAs and audible voice playback have been\\nsupported for eons; without these no games would boot, period!\\nMeanwhile, many of the lacking IRQ checks were known, but glossed over\\nbecause of overhead required for the checks (a couple other checks were\\nsimply overlooked). The three main culprits for causing emulation errors\\nwere as follows:\\n\\n1) the \\"free run\\" feature of SPU2 voices.\\n2) the write-back areas for each core\'s mixed output.\\n3) Reverb Processing, which uses a series of overlapping buffers to\\ngenerate feedback.\\n\\n**Free Running Voices**\\n\\nThe SPU2 has 48 total voices (24 voices for each core), plus two\\ndedicated streaming audio input sources. Each voice can play a sound\\neffect or stream audio, and can either be stopped, looping, or \'free\\nrunning.\' Free running voices typically zero out their volume rather\\nthan stopping or looping, and continue to \'play\' forever (albeit\\nsilently). These free running voices access inaudible areas of SPU2\\nmemory and thus trigger IRQs unexpectedly -- except, of course, some\\ngames are cleverly designed to expect these unexpected IRQs!\\n\\nBecause of the overhead required to free-run otherwise silent voices,\\nall other SPU2 plugins (until now!) have opted to ignore processing\\nthem. This is the feature that fixes Fatal Frame 2 (Project Zero 2) and\\na dozen more games.\\n\\n**Output Write-back Areas**\\n\\nThe SPU2 defines a handful of special areas of memory where it writes\\nback sound data at various stages of the mixing process. It\'s perfectly\\nlegal for a game to set an IRQ address within these buffers, and then\\nexpect it to trigger when the SPU2 does its write-back to that address.\\nThe write-back areas are mapped as follows:\\n\\n```cpp\\n0x0400 - 0x05FF  :  Core 0, Voice 1\\n0x0600 - 0x07FF  :  Core 0, Voice 3\\n0x0800 - 0x09FF  :  Core 0 Output (Left) [includes Wet/Dry/ADMA sources]\\n0x0A00 - 0x0BFF  :  Core 0 Output (Right) [includes Wet/Dry/ADMA sources]\\n0x0C00 - 0x0DFF  :  Core 1, Voice 1\\n0x0E00 - 0x0FFF  :  Core 1, Voice 3\\n\\n// Following are results of mixing all 24 voices for the given Core.\\n\\n0x1000 - 0x11FF  :  Core 0, Dry Mix (Left)\\n0x1200 - 0x13FF  :  Core 0, Dry Mix (Right)\\n0x1400 - 0x15FF  :  Core 0, Wet Mix (Left)\\n0x1600 - 0x17FF  :  Core 0, Wet Mix (Right)\\n0x1800 - 0x19FF  :  Core 1, Dry Mix (Left)\\n0x1A00 - 0x1BFF  :  Core 1, Dry Mix (Right)\\n0x1C00 - 0x1DFF  :  Core 1, Wet Mix (Left)\\n0x1E00 - 0x1FFF  :  Core 1, Wet Mix (Right)\\n```\\n\\n\\nIn specific, some games set an IRQA for Core0\'s write-back area. The IRQ\\ncan either be used as a timing mechanism, or as a synchronization point\\nfor post-processing audio effects. Most SPU2 plugins properly handled\\nthe write-backs, but overlooked the necessity of doing IRQ checks for\\nthem.\\n\\n**Reverb Processing**\\n\\nThe SPU2 employs a clever reverberation algorithm that utilizes multiple\\noverlapping read and writeback buffers within SPU2 memory to generate\\nfeedback. Each step of the reverb process accesses memory and must test\\nagainst the IRQ address; for a grand total of 24 IRQ tests per Core.\\nFortunately, all reverb activity occurs within a specified area of SPU2\\nmemory, so for most games a single simple test can be used to exclude\\nthe IRQ test.\\n\\n\\n**And It All Applies to SPU2null!**\\n\\nThis is the boring part that I\'m going to look to implementing soon: In\\norder for SPU2null to be fully emulation-compliant, it must properly\\nsimulate *all* of these things, which basically means it needs to have a\\ncomplete sound mixer implemented; including reverb buffering/addressing\\nlogic. It probably seems silly, but SPU2null would still be without any\\nplatform dependent code or sound drivers, making it an ideal base for\\nemulation analysis and as a base for future plugins."},{"id":"/2010/updated-plugins-on-the-beta-downloads-page","metadata":{"permalink":"/pcsx2-net-www/blog/2010/updated-plugins-on-the-beta-downloads-page","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/updated-plugins-on-the-beta-downloads-page/index.mdx","source":"@site/blog/2010/updated-plugins-on-the-beta-downloads-page/index.mdx","title":"Updated Plugins On The Beta Downloads Page","description":"While we\'re still working on the new PCSX2 version, we\'ve also been constantly adding to the all important plugins.","date":"2010-03-15T00:00:00.000Z","formattedDate":"March 15, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.88,"hasTruncateMarker":true,"authors":[{"name":"rama","url":"https://github.com/ramapcsx2","imageURL":"https://github.com/ramapcsx2.png","key":"rama"}],"frontMatter":{"authors":["rama"],"date":"2010-03-15T00:00:00.000Z","description":"While we\'re still working on the new PCSX2 version, we\'ve also been constantly adding to the all important plugins.","draft":false,"tags":["devblog"],"title":"Updated Plugins On The Beta Downloads Page"},"prevItem":{"title":"SPU2 Is More Than Just Sound","permalink":"/pcsx2-net-www/blog/2010/spu2-is-more-than-just-sound"},"nextItem":{"title":"Introduction To Dynamic Recompilation","permalink":"/pcsx2-net-www/blog/2010/introduction-to-dynamic-recompilation"}},"content":"Hey people.\\nWhile we\'re still working on the new PCSX2 version, we\'ve also been constantly adding to the all important plugins.\\nEvery now and then we release a beta plugin pack, so you can test them\\nout and benefit from the new features a bit earlier\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nSPU2-X 1.4:\\n\\n-   Yet again improved sound quality by fixing a sample overflow in the\\nADPCM decoder.\\n-   Adjustable reverb volume, for deeper reverb effects.\\n-   Fixes to interrupts and status registers that allow many more games\\nto boot.\\n**Games fixed by this update include titles like Fatal Frame 2 and\\n3, Black, the Burnout series, Max Payne 2, Silent Hill 0rigins,\\nSilent Hill Shattered Memories and, of course, \\"Disney Princess:\\nEnchanted Journey\\"**\\n\ud83d\ude1b\\n\\n\\nGSdx 0.1.16:\\n\\n-   Stability fixes (less exception crashes).\\n-   More games have post processing removed, making them playable.\\n-   Fixed a blending effect used in Final Fantasy 10, 10-2 and Grandia3.\\n-   Many more tweaks and additions.\\n\\n\\nLilyPad:\\n\\n-   Several bug fixes that make it work better with the new PCSX2\\nversion."},{"id":"/2010/introduction-to-dynamic-recompilation","metadata":{"permalink":"/pcsx2-net-www/blog/2010/introduction-to-dynamic-recompilation","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/introduction-to-dynamic-recompilation/index.mdx","source":"@site/blog/2010/introduction-to-dynamic-recompilation/index.mdx","title":"Introduction To Dynamic Recompilation","description":"his blog post is an introduction to dynamic recompilers (dynarecs), and hopes to provide some insight on how they work and why pcsx2 uses them to speed up emulation","date":"2010-03-13T00:00:00.000Z","formattedDate":"March 13, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":9.24,"hasTruncateMarker":true,"authors":[{"name":"cottonvibes","key":"cottonvibes"}],"frontMatter":{"authors":["cottonvibes"],"date":"2010-03-13T00:00:00.000Z","description":"his blog post is an introduction to dynamic recompilers (dynarecs), and hopes to provide some insight on how they work and why pcsx2 uses them to speed up emulation","draft":false,"tags":["devblog"],"title":"Introduction To Dynamic Recompilation"},"prevItem":{"title":"Updated Plugins On The Beta Downloads Page","permalink":"/pcsx2-net-www/blog/2010/updated-plugins-on-the-beta-downloads-page"},"nextItem":{"title":"PCSX2 0.9.7 Sneak Peek!","permalink":"/pcsx2-net-www/blog/2010/pcsx2-0-9-7-sneak-peek"}},"content":"This blog post is an introduction to dynamic recompilers (dynarecs), and\\nhopes to provide some insight on how they work and why pcsx2 uses them\\nto speed up emulation.\\nIt is probably easier to read on our forums, because some of the code\\ndidn\'t wrap nicely on our main blog page....\\n( [Click here to view blog post in\\nforum](http://forums.pcsx2.net/thread-13453-post-101560.html) )\\n\\n\x3c!-- truncate --\x3e\\n\\nTo first understand why dynarecs are useful, you must first be familiar\\nwith a basic interpreter emulator.\\n\\nAssume we are emulating a very simple processor. Processors have\\ninstruction sets which are a set of different instructions they can\\ncompute.\\nLets assume the processor we are emulating is a made-up chip I\'ll call\\nSL3 (super lame 3), and has only these 3 instructions (and each\\ninstruction has fixed width of 4 bytes):\\n\\nMOV dest\\\\_reg, src1\\\\_reg // Move source register to destination\\nregister\\nADD dest\\\\_reg, src1\\\\_reg, src2\\\\_reg // Add source1 and source2\\nregisters, and store the result in destination register\\nBR relative\\\\_address // Branch (jump) to relative address (PC +=\\nrelative\\\\_address \\\\* 4)\\n\\nProcessors generally have what we call registers which can hold data,\\nand the processor\'s instructions perform the operations on these\\nregisters.\\nFor our example, we will assume that our SL3 processor has 8 registers,\\nand the size of these registers is 32 bits (so each register holds 32\\nbits of data).\\n\\nNow to program for this processor, we can have the following code:\\n\\n```cpp\\nMOV reg1, reg0\\nADD reg4, reg2, reg3\\nBR 5\\n```\\n\\n\\nWhat this code does is:\\n1) It moves register 0 to register 1 (so now register 1 holds a copy of\\nregister 0\'s data).\\n2) It adds register 2 and register 3 together, and stores the result in\\nregister 4.\\n3) It branches 5 instructions further away (so now it jumps to some code\\nthat is further down (not shown in above example))\\n\\nSo that is how we can program for the SL3 processor in assembly code.\\nBut how do we emulate it?\\n\\nTo actually emulate this processor we can use an ***interpreter*** . An\\ninterpreter simply fetches each *instruction opcode* and executes them\\naccordingly (e.g. by calling emulated methods for each different\\ninstruction). The rest of the emulator (emulating other\\nprocessors/peripherals of our system) can then get updated sometime in\\nbetween instructions or after a group of cpu instructions are run.\\nInterpreters are a simple and complete way to emulate a system.\\n\\n( [Click here to see a C++ code example of a simple\\ninterpreter](http://forums.pcsx2.net/thread-13453-post-102002.html#pid102002)\\n)\\n\\nUsing interpreters we constantly have to be fetching and executing\\ninstructions one-by-one. There is a lot of overhead in this, and minimal\\nroom for optimization since most special case optimizations will have\\nthe overhead of checking for them (so it will for example add extra\\nif-statements and conditionals... reducing the gain from the\\noptimization). But there\'s a faster way to do processor emulation which\\ndoesn\'t have these draw-backs... using dynamic recompilation!\\n\\nThe basic idea of dynamic recompilation is to translate emulated\\ninstructions once, cache the emitted translated instructions, and then\\nrun the emitted native instructions as much times as needed.\\n\\nSince the instructions you read are not changing (lets leave out\\nself-modifying code for this example), you can translate the emulated\\ninstructions into native cpu instructions (in our case x86-32 asm\\ninstructions) and then cache the translated instructions into \'blocks\'\\nof code, then just execute these blocks of native code instead of having\\nto do the translation over and over again whenever the code needs to be\\nread again.\\n\\nSo for instance remember our above SL3 program:\\n\\n```cpp\\nMOV reg1, reg0\\nADD reg4, reg2, reg3\\nBR 5\\n```\\n\\n\\nLets assume this code is part of some function and gets called 100\'s of\\ntimes a second (this could sound crazy, but games/applications commonly\\ncall the same code hundreds or thousands of times a second).\\n\\nNow our runCPU() interpreter function above will have to translate every\\ninstruction before it can actually compute the result.\\n\\nThat is, it needs to fetch the opcode of every instruction, call the\\nemulated function based on the opcode number, then actually compute the\\ninstruction result.\\nBut dynarecs allow us to skip the \\"fetch opcode\\" and the \\"call the\\nemulated function\\" part, by only doing this once, and then caching the\\ntranslated code into native asm blocks.\\n\\nTo make a good dynarec, we first need a code emitter.\\nAn emitter is a series of functions we call that write native asm to\\nsome memory block we give it.\\nSo we use an x86-32 emitter to write native x86-32 asm code to blocks of\\nmemory, and then later we can execute these blocks as if they were\\nnormal c++ generated functions!\\n\\nPCSX2 has a very cool emitter that looks very similar to x86-32\\nassembly, except the instructions have an \'x\' before them.\\nSo for example:\\nmov eax, ecx;\\nis\\nxMOV(eax, ecx);\\nwith the pcsx2 emitter.\\n\\nNow the idea behind the dynarec we are going to write now, is that we\\nwill end blocks whenever a branch instruction is detected (which will\\njump to other blocks).\\n\\nThe code for actually recompiling these blocks looks something like\\nthis:\\n\\n```cpp\\n// This is our emulated MOV instruction\\nvoid MOV() {\\nu8 dest = fetch(); // Get destination register number\\nu8 reg1 = fetch(); // Get source 1 register number\\n\\nxMOV(eax, ptr[&amp;cpuRegs[reg1]]); // Move reg1\'s data to eax\\nxMOV(ptr[&amp;cpuRegs[dest]], eax); // Move eax to dest register\\n\\nfetch(); // This fetch is needed because every instruction in our SL3 processor is 4 bytes\\n}\\n\\n// This is our emulated ADD instruction\\nvoid ADD() {\\nu8 dest = fetch(); // Get destination register number\\nu8 reg1 = fetch(); // Get source 1 register number\\nu8 reg2 = fetch(); // Get source 2 register number\\n\\nxMOV(eax, ptr[&amp;cpuRegs[reg1]]); // Move reg1\'s data to eax\\nxADD(eax, ptr[&amp;cpuRegs[reg2]]); // Add eax with reg2\'s data\\nxMOV(ptr[&amp;cpuRegs[dest]], eax); // Move eax to dest register\\n}\\n\\n// This is our emulated BR (jump) instruction\\nvoid BR() {\\ns8 addr = fetch(); // Gets a number by which we will increment (or decrement if negative) PC by\\nPC = (PC - 2) + (addr * 4);\\n\\n// Get a pointer to a block of x86-32 compiled code\\n// that was recompiled by the recompileSL3() function\\nu8* block_pointer = getBlock(PC);\\n\\nxJMP(block_pointer); // Jump to the pointer returned by getBlock()\\n}\\n\\n// This goes through instructions and recompiles them\\n// It recompiles instructions until it reaches a BR() instruction.\\nu8* recompileSL3(u32 startPC) {\\nu8* startPtr = xGetPtr(); // Gets pointer to where the emitter is currently pointing to (the start pointer of the block)\\nPC = startPC; // Set PC to the start PC of this block\\nbool do_recompile = true;\\nwhile (do_recompile) {\\nu8 opcode = fetch();\\nswitch (opcode) {\\ncase 0: MOV(); break;\\ncase 1: ADD(); break;\\ncase 2: // We stop recompiling on branches\\nBR();\\ndo_recompile = false;\\nbreak;\\n}\\n}\\nreturn startPtr; // Returns the pointer to where our block of x86 generated code starts at\\n}\\n\\n// This holds all the pointers to our blocks that were recompiled based on\\n// starting PC address. We will assume that the instruction memory for\\n// this processor is 16kb, which means that it can hold at-most 1024*16 bytes\\n// worth of instructions. And therefor we we have at-most 1024*16 block pointers.\\nstatic u8* blockArray[1024*16];\\n\\n// This returns a pointer to our recompiled block\\n// If it hasn\'t been compiled, it\'ll recompile the block and then return that pointer.\\n// We use __fastcall because it lets us pass the startPC parameter in the ecx register\\n// instead of having to use the x86 stack...\\nu8* __fastcall getBlock(u32 startPC) {\\nif (blockArray[startPC] == null) {\\nblockArray[startPC] = recompileSL3(startPC);\\n}\\nreturn blockArray[startPC];\\n}\\n\\n// Basic cpu emulator using dynamic recompilation\\nvoid runCPU() {\\n// This sets our emitter to start emitting instructions to rec_cache\\n// which is a large block of memory where we can write lots of\\n// x86 asm instructions to...\\nx86setPtr(rec_cache);\\n\\n__asm {\\npushad; // Save all our registers\\nmov ecx, PC; // Move PC parameter into ecx register (for __fastcall)\\ncall getBlock; // Call the getBlock function\\njmp eax; // The block to jump to is returned in eax\\n}\\n}\\n```\\n\\n\\nNote the above code doesn\'t have any logic to successfully exit once it\\nstarts executing recompiled blocks... I left this stuff out in order to\\nnot complicate things... so assume that somehow execution ends and we\\ncan get back to running the other parts of the emulator...\\nAlso note we need to restore registers when we exit execution, and we\\nalso need to set rec\\\\_cache to the new x86 emitter address (so it can\\ncontinue where it left off instead of writing over already recompiled\\nmemory blocks).\\n( [Click here for a more complete sl3 recompiler code with cycle\\ncounting and exit\\nlogic](http://forums.pcsx2.net/Thread-blog-Introduction-to-Dynamic-Recompilation?pid=102471#pid102471)\\n)\\n\\nNow how does this work?\\nWell we basically call runCPU() which calls the getBlock() function with\\nthe original PC value.\\ngetBlock() then checks if we have already recompiled a block with that\\nstart PC value, which we havn\'t yet, so it will go on to call\\nrecompileSL3() and give it the startPC value.\\nrecompileSL3() will loop through the opcodes, fetching them and then\\ncalling the appropriate emulated functions which will write to memory\\nx86-32 asm instructions computing the correct results.\\nrecompileSL3() will continue looping until it reaches a BR() instruction\\n(which will recursively call getBlock() until all the addresses have\\nbeen recompiled and no more recompilation needs to happen).\\n\\nOnce everything has been recompiled we jump to the starting block\'s\\nexecution address, and that\'s how we actually run the execution.\\nThe code that ends up being executed after we recompiled is only the\\nemitted code, which were the functions prefixed with \'x\' (xMOV, xADD,\\netc...).\\nNotice that that\'s a lot of code omitted as we don\'t have to fetch\\nanything anymore, but instead just run a series of fast generated asm\\nfunctions...\\nThis means that although we have a lot of extra overhead on the actual\\nrecompilation, we end up generating some really fast code, that could be\\ncalled 1000\'s of times a second, therefor making the initial overhead\\nwell worth it!\\n\\nWe can also perform many optimizations while recompiling such as\\nregalloc, constant propagation, optimized asm generation for special\\nopcode cases, etc... (we didn\'t do this stuff in our example to avoid\\ncomplexities).\\n\\n\\nHopefully this article has helped you gain a bit of understanding on how\\ndynamic recompilation works, and why we use it in pcsx2 to gain a lot\\nmore speed over interpreters!\\nAlso note that dynarecs can be used for more than processor emulation,\\nwe also used dynamic recompilation in pcsx2 to cache asm optimized\\nunpack routines that the ps2\'s vif does.\\n\\nI should also add that currently pcsx2 has the following dynarecs:\\nEE recompiler (for MIPS R5900 ee-core processor)\\nIOP recompiler (for MIPS R3000A i/o processor)\\nmicroVU recompiler (for VU0/VU1, and COP2 instructions)\\nSuper VU recompiler (can be used instead of microVU for VU0/VU1)\\nnewVIF unpack recompiler (recompiles vif unpack routines)\\nr3000air (not yet finished, but should one day supersede the IOP\\nrecompiler)"},{"id":"/2010/pcsx2-0-9-7-sneak-peek","metadata":{"permalink":"/pcsx2-net-www/blog/2010/pcsx2-0-9-7-sneak-peek","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/pcsx2-0-9-7-sneak-peek/index.mdx","source":"@site/blog/2010/pcsx2-0-9-7-sneak-peek/index.mdx","title":"PCSX2 0.9.7 Sneak Peek!","description":"Development of the new 0.9.7 version of the emulator with the all new GUI is going strong and soon all the old GUI functionality will be implemented. After that it\'s bug hunting time and then a beta release!","date":"2010-02-10T00:00:00.000Z","formattedDate":"February 10, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.78,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2010-02-10T00:00:00.000Z","description":"Development of the new 0.9.7 version of the emulator with the all new GUI is going strong and soon all the old GUI functionality will be implemented. After that it\'s bug hunting time and then a beta release!","draft":false,"tags":["devblog"],"title":"PCSX2 0.9.7 Sneak Peek!"},"prevItem":{"title":"Introduction To Dynamic Recompilation","permalink":"/pcsx2-net-www/blog/2010/introduction-to-dynamic-recompilation"},"nextItem":{"title":"A New Kind Of Fullscreen","permalink":"/pcsx2-net-www/blog/2010/a-new-kind-of-fullscreen"}},"content":"It has been a long time since the last news concerning PCSX2, so I\\nthought I\'d bring you up to date\\n\ud83d\ude0a\\nDevelopment of the new 0.9.7 version of the emulator with the all new GUI is going strong and soon all the old GUI functionality will be implemented. After that it\'s bug hunting time and then a beta release!\\n\\n\x3c!-- truncate --\x3e\\n\\nIn this news post I\'ll present some of the exciting new features of the\\nnew GUI builds, for those of you who haven\'t checked it out yet!\\nClick the images to view them in normal size\\n\\n-   All new menus, for improved usability and faster configuration\\n-   On the fly suspend and resume, perfectly stable, safe and fast\\n-   On the fly setting switching or even plugin switching\\n-   Compatible with Aero Glass and Windows eye goodies\\n\\n![](./img/0.9.7_7_thumb.jpg)\\n![](./img/0.9.7_6_thumb.jpg)\\n\\n-   Threaded GUI, for better responsiveness, usability and error\\nhandling\\n-   Simplified plugin configuration dialog, with more options\\n-   Console output will no longer slow down the emulator when flooded\\nthanks to threading\\n-   Saving states done in the new thread, so gameplay doesn\'t even\\nflinch when you save\\n\\n![](./img/0.9.7_6_thumb.jpg)\\n![](./img/0.9.7_5_thumb.jpg)\\n\\n-   New CPU configuration, more user friendly and noob proof with a\\nrestore defaults button\\n-   New GS configuration, with more options like Turbo and Slow motion\\nFPS adjustments\\n\\n![](./img/0.9.7_2_thumb.jpg)\\n![](./img/0.9.7_2_thumb.jpg)\\n\\n-   New Speed hacks configuration, with more warnings ( like anyone\\nreads them!) and a restore defaults button\\n-   All options have tooltips (text that appears after you leave the\\ncursor on a control for some secs) explaining what each of them do\\n-   Screen shot button in every dialog (lower left corner) to easily\\ntake shots of your configurations\\n\\n![](./img/0.9.7_4_thumb.jpg)\\n![](./img/0.9.7_8_thumb.jpg)\\n\\n\\nThat\'s it! Hope you like the new look and functionality, we are doing\\nour best to make PCSX2 as user friendly as possible. Of course there are\\nstill some features not shown here, we have to keep something to\\nsurprise you!\\n\\nThere is no set date for the beta release, since there are still a bunch\\nof bugs lying around but it\'s safe to say we are getting close\\n\ud83d\ude0a"},{"id":"/2010/a-new-kind-of-fullscreen","metadata":{"permalink":"/pcsx2-net-www/blog/2010/a-new-kind-of-fullscreen","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/a-new-kind-of-fullscreen/index.mdx","source":"@site/blog/2010/a-new-kind-of-fullscreen/index.mdx","title":"A New Kind Of Fullscreen","description":"One problem that has plagued PCSX2 since as long as most anyone can remember is it\'s general inflexibility and instability when flipping between windowed and fullscreen modes","date":"2010-01-31T00:00:00.000Z","formattedDate":"January 31, 2010","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.95,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2010-01-31T00:00:00.000Z","description":"One problem that has plagued PCSX2 since as long as most anyone can remember is it\'s general inflexibility and instability when flipping between windowed and fullscreen modes","draft":false,"tags":["devblog"],"title":"A New Kind Of Fullscreen"},"prevItem":{"title":"PCSX2 0.9.7 Sneak Peek!","permalink":"/pcsx2-net-www/blog/2010/pcsx2-0-9-7-sneak-peek"},"nextItem":{"title":"PCSX2/Mac - Release Update!","permalink":"/pcsx2-net-www/blog/2009/pcsx2-mac-release-update"}},"content":"One problem that has plagued PCSX2 since as long as most anyone can\\nremember is it\'s general inflexibility and instability when flipping\\nbetween windowed and fullscreen modes. This was something we really\\nsought to address as we re-write the user interface in 0.9.7.\\n\\n\x3c!-- truncate --\x3e\\n\\nIn 0.9.6 the situation was grim: The flip never really worked right in\\nDX9 -- there\'s an \\"escape hack\\" that completely shuts down the emulator\\njust to flip out of fullscreen mode. Hitting alt-enter is usually less\\nforgiving (the plugin handles it, and doesn\'t allow PCSX2 to completely\\nshut everything down and restart). In DX10 things were better: alt-enter\\ntypically works a couple times, but do it too often, or get an unlucky\\nflip, and it\'ll still result in lost or corrupted video and possibly a\\ncrash depending on video drivers and (lack of) luck.\\n\\nIn 0.9.7 we\'ve completely re-done our approach to fullscreen. Instead of\\nusing what Microsoft DirectX calls **Exclusive Mode** (you can read\\nabout the programmer-centric details of it\\n[here](http://msdn.microsoft.com/en-us/library/ee417025.aspx) ), we\'re\\ntaking a more modern approach and using a special type of maximized\\ndesktop window instead. Like anything there\'s some advantages and\\ndisadvantages to this new approach:\\n\\n**Advantages of the new fullscreen method:**\\n\\n-   Works perfectly in DX9 and DX10 alike.\\n-   No more risk of visual corruption or crashes, and no need to\\nshutdown the emulator to avoid them.\\n-   Much faster and seamless flips.\\n-   Works with any GS plugin, regardless of how the GS plugin is\\nimplemented.\\n-   Always uses your LCD display\'s optimal resolution (assuming you have\\nit set in the desktop as such, and you should).\\n-   Integrates better with your desktop -- Alt-Tab, TaskBar, popup\\nerrors, etc. are much less prone to being... annoying. (pulling up a\\nstrategy guide in a browser window, for example!)\\n-   Super-easy to implement, from a programming perspective!\\n\\n\\n**Disadvantages:**\\n\\n-   A slight bit of extra window management overhead.\\n-   Always uses your desktop resolution on CRT displays (this is an\\nadvantage for anyone with an LCD display, but can be a disadvantage\\nfor people with CRT displays, depending on your setup .. however few\\nof you are left)\\n\\n\\nThe performance benefit of exclusive fullscreen is mostly related to\\nAero under Vista/Windows7. in which case the performance is sometimes\\n*better* in a window over exclusive mode (this depending on video\\ncard/drivers/etc).\\n\\nThe thing that really sold us on it though is the fact that overhead of\\nthe non-exclusive fullscreen mode is minimal on modern GPUs. The only\\nreal advantage of using exclusive fullscreen is that it bypasses Aero\\nand increases the \\"multimedia priority\\" of the app. If you already have\\nAero disabled, then neither of those apply anyway. And looking toward\\nthe future: the next generation of GPUs will reduce that overhead of\\nAero even further to the point where even that will likely not make a\\nsignificant impact on performance. So the idea of a seamlessly working\\nfullscreen flip for all DirectX incarnations on all incarnations of\\nWindows over a rather iffy, unstable, and fragile fullscreen flip that\\n*might* be 2-3% faster on legacy hardware ended up being a no-brainer.\\n\\nWe\'re still leaving the door open for adding optional support for\\nexclusive mode fullscreen, since there could still be some use to it for\\nspecial scenarios like CRT displays and TV projection; though there\'s no\\ntimetable for the implementation of the option -- and it would depend on\\nthe GS plugin to support it properly otherwise it\'ll still be the\\ncorruption/crash bomb that it\'s always been up to now."},{"id":"/2009/pcsx2-mac-release-update","metadata":{"permalink":"/pcsx2-net-www/blog/2009/pcsx2-mac-release-update","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/pcsx2-mac-release-update/index.mdx","source":"@site/blog/2009/pcsx2-mac-release-update/index.mdx","title":"PCSX2/Mac - Release Update!","description":"It\'s that time of the year again, so i had some time to work on pcsx2/mac, now with nice sound as well.","date":"2009-12-30T00:00:00.000Z","formattedDate":"December 30, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.53,"hasTruncateMarker":true,"authors":[{"name":"zedr0n","key":"zedr0n"}],"frontMatter":{"authors":["zedr0n"],"date":"2009-12-30T00:00:00.000Z","description":"It\'s that time of the year again, so i had some time to work on pcsx2/mac, now with nice sound as well.","draft":false,"tags":["devblog"],"title":"PCSX2/Mac - Release Update!"},"prevItem":{"title":"A New Kind Of Fullscreen","permalink":"/pcsx2-net-www/blog/2010/a-new-kind-of-fullscreen"},"nextItem":{"title":"Global Visitor Stats","permalink":"/pcsx2-net-www/blog/2009/global-visitor-stats"}},"content":"It\'s that time of the year again, so i had some time to work on pcsx2/mac, now with nice sound as well.\\n\ud83d\ude09 This update is about solving the missing\\ntextures problem that has been plaguing pcsx2/mac for ages.\\n\\n\x3c!-- truncate --\x3e\\n\\nZerospu2 0.4.6 has been ported to mac using cross-platform Portaudio\\nlibrary, i recommend all users to use it\\n\ud83d\ude0a\\n\\nZeydlitz has recently worked on z-buffer swizzling for the ZZOgl plugin\\nand this has fixed a lot of missing textures problems for us. I also\\nfixed some code in pcsx2 for ffx missing textures. Some shots:\\n\\n**FFX**\\n![](./img/x11screensnapz018.th.jpg)\\nVS\\n![](./img/x11screensnapz024.th.jpg)\\n\\n**Kingdom Hearts**\\n![](./img/x11screensnapz025.th.jpg)\\nVS\\n![](./img/x11screensnapz027.th.jpg)"},{"id":"/2009/global-visitor-stats","metadata":{"permalink":"/pcsx2-net-www/blog/2009/global-visitor-stats","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/global-visitor-stats/index.mdx","source":"@site/blog/2009/global-visitor-stats/index.mdx","title":"Global Visitor Stats","description":"Wondering about who\'s watching as we make and break bleeding edge alpha/beta versions of PCSX2","date":"2009-11-03T00:00:00.000Z","formattedDate":"November 3, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.445,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-11-03T00:00:00.000Z","description":"Wondering about who\'s watching as we make and break bleeding edge alpha/beta versions of PCSX2","draft":false,"tags":["devblog"],"title":"Global Visitor Stats"},"prevItem":{"title":"PCSX2/Mac - Release Update!","permalink":"/pcsx2-net-www/blog/2009/pcsx2-mac-release-update"},"nextItem":{"title":"Thread Counting","permalink":"/pcsx2-net-www/blog/2009/thread-counting"}},"content":"Wondering about who\'s watching as we make and break bleeding edge\\nalpha/beta versions of PCSX2? I do! Here\'s a map representing the visits\\nto our SVN repository at Googlecode,\\nfor the past 2 weeks.\\n\\n\x3c!-- truncate --\x3e\\n\\n\x3c!-- TODO - legacy low res pic? --\x3e\\n\\n![](./img/googlecode_stats_256_thumb.webp)\\n\\nOn average, our SVN totals per day:\\n\\n-   900 unique viewers\\n-   3,200 visits (3.5 visits per viewer)\\n-   9,500 page views in total.\\n\\nTop visitors by city:\\n\\n1. Sapporo 171\\n2. London 165\\n3. Tokyo 151\\n4. Shanghai 147\\n5. Moscow 142"},{"id":"/2009/thread-counting","metadata":{"permalink":"/pcsx2-net-www/blog/2009/thread-counting","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/thread-counting/index.mdx","source":"@site/blog/2009/thread-counting/index.mdx","title":"Thread Counting","description":"One thing is for sure: The new 0.9.7 betas will use a lot more threads than the current 0.9.6 releases","date":"2009-10-13T00:00:00.000Z","formattedDate":"October 13, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.665,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-10-13T00:00:00.000Z","description":"One thing is for sure: The new 0.9.7 betas will use a lot more threads than the current 0.9.6 releases","draft":false,"tags":["devblog"],"title":"Thread Counting"},"prevItem":{"title":"Global Visitor Stats","permalink":"/pcsx2-net-www/blog/2009/global-visitor-stats"},"nextItem":{"title":"Thread Synchronization","permalink":"/pcsx2-net-www/blog/2009/thread-synchronization"}},"content":"One thing is for sure: The new 0.9.7 betas will use a *lot* more threads\\nthan the current 0.9.6 releases. Now this doesn\'t necessarily mean the\\nemulator will take advantage of quad core CPUs better than 0.9.6, least\\nnot in a gameplay sense. As I explained in my previous blog, threading\\nis as much a function of improving responsiveness and recoverability as\\nit is about sharing a workload across multi-core cpus, and so far most\\nof the threading implemented into 0.9.7 is the scalable/responsive\\nsort.\\n\\n\x3c!-- truncate --\x3e\\n\\nOne of the major changes in 0.9.7 will be the removal of what I call an\\n**\\"aggressive spinwait\\"** in the *EmotionEngine (EEcore)* emulation\\nunit. A spinwait is a simple loop that waits on a variable to change,\\nlike so:\\n\\n```cpp\\nvolatile bool IsRunning = true;\\nStartThreadedAction();\\nwhile( IsRunning );\\n// When the above while() exits, the ThreadedAction is done.\\n```\\n\\n\\nThis is a very simple threading design, but it\'s mostly drawbacks and\\nnot many advantages. We\'ve continued to use it up to now in PCSX2\'s\\nEEcore because there wasn\'t much reason to do away with it; and with the\\nEEcore being the main orchestrator of everything in PCSX2 (gui\\nincluded!), having the high-resolution responsiveness of a spinwait made\\nsome sense.\\n\\nOn the current design in 0.9.6, the EEcore and the GUI share time on the\\nsame thread, and when the GS thread is busy, the EEcore will split time\\nbetween waiting on the GS (via the spinwait) and processing GUI\\nmessages. This transition from EEcore emulation to GUI message\\nprocessing was typically costly, but was necessary to handle input from\\nthe user. In the new 0.9.7 design, the EEcore has its own thread\\nseparate from the GUI. This allows us to remove the overhead of having\\nto switch to/from GUI processing code, but it came with a somewhat\\nunexpected drawback: the EEcore\'s aggressive spinwait is now suddenly\\n*very* aggressive when a game becomes GS-limited. In 0.9.6 the spinwait\\nbreaks from time to time to splice in some gui messages and make time\\nfor the GS to do its thing too. This kept everything pretty happy. But\\nwith the splicing gone, the EEcore is allowed to run free, soaking up\\ntons of resources simply re-testing the same variable over and over.\\n\\nThe full impact became obvious when we realized that setting 2 software\\nthreads in GSdx caused PCSX2 to slow to a crawl (sub 1fps!) on dual core\\nsystems. That\'s what happens when you have three threads using spinwaits\\non a dual core system -- they completely starved out everything else,\\nand to some extent each other as well. (yes, GSdx software uses\\nspinwaits also!)\\n\\nThe primary solution is to get rid of the spinwait in the EEcore. In its\\nwake we\'ll put the EEcore to sleep and have it wake up only once the\\nMTGS ringbuffer has emptied to a satisfactory percentage. With the\\nEEcore asleep, the GSdx thread(s) will have full reign over all the\\nresources of the cpu; which will allow it to play \\"catch up\\" more\\nefficiently than it can even in 0.9.6. This model will be an obvious win\\nfor both software rendering, and possibly DX11\'s multithreaded pipeline\\nin the future."},{"id":"/2009/thread-synchronization","metadata":{"permalink":"/pcsx2-net-www/blog/2009/thread-synchronization","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/thread-synchronization/index.mdx","source":"@site/blog/2009/thread-synchronization/index.mdx","title":"Thread Synchronization","description":"It\'s the year 2009, and it\'s almost over at that; and as anyone reading this blog well knows, multithreaded applications are the here-and-now and future of desktop computing","date":"2009-10-07T00:00:00.000Z","formattedDate":"October 7, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.27,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-10-07T00:00:00.000Z","description":"It\'s the year 2009, and it\'s almost over at that; and as anyone reading this blog well knows, multithreaded applications are the here-and-now and future of desktop computing","draft":false,"tags":["devblog"],"title":"Thread Synchronization"},"prevItem":{"title":"Thread Counting","permalink":"/pcsx2-net-www/blog/2009/thread-counting"},"nextItem":{"title":"Svn Comments Are Re Enabled","permalink":"/pcsx2-net-www/blog/2009/svn-comments-are-re-enabled"}},"content":"It\'s the year 2009, and it\'s almost over at that; and as anyone reading\\nthis blog well knows, multithreaded applications are the here-and-now\\nand future of desktop computing. It\'s the only way we can take advantage\\nof multicore CPUs. But multithreaded programming offers more than just\\nimproved multicore performance. Using threaded programming is actually\\nvery important to developing software that **behaves nicely** . By that\\nI mean software that refreshes its window contents quickly, responds to\\nyour mouse clicks, and lets you cancel stuff.\\n\\n\x3c!-- truncate --\x3e\\n\\nFor that the best approach is usually threading, with the alternative\\nbeing something called \\"Cooperative multitasking\\" where by a program is\\nwritten such that it splits all tasks into neat little chunks. For\\nexample, the two possible ways to implement loading an image (let\'s say\\na png image):\\n\\n\\\\* Load the image one scanline at a time, and then after each scanline\\nmanually check for keyboard, mouse, or other input, and refresh the\\nscreen.\\n\\n\\\\* Load the image using a thread, and let the usual \\"global\\" windows\\nmessage handler dispatch keyboard, mouse, and refresh messages as\\nusual.\\n\\nThe second approach has several advantages. For one, it needs fewer\\ntemporary heap allocations (which are typically slow and fragment\\nmemory). It is more responsive: windows messages will be handled in\\nparallel to the image loading, so you don\'t even need to \\"wait\\" until\\nthe end of a scanline for user input to have its effect. It\'s also more\\nscalable: while the first system is able to load one image at a time\\nonly in co-operative fashion (extending it to support multiple is\\npossible, but very difficult), the threaded approach can be scaled to\\nload dozens of images at once with no additional complications.\\n\\nThe drawback is that thread synchronization and *especially* structured\\nerror handling across threads tends to be much more complicated than\\nthat of the linear cooperative model. If you don\'t have errors to\\nhandle, or don\'t really *care* about handling errors, then threaded\\ntasking isn\'t so bad.\\n\\nEnter PCSX2, where everything ends up being damn complicated. Being a\\nperfectionist, I figured I\'d design the new GUI completely on the\\nthreaded model, doing away with cooperative design almost completely.\\nSuch a design should help avoid any deadlocking scenarios and allow the\\nemu to recover from almost any error gracefully. Problem: The emulator\\nhas a lot of inter-dependent parts and pieces that need to be\\ninterlocked and synchronized, and all of them can throw out a variety of\\nerrors -- which too I\'d like to handle smartly; requesting extra user\\ninput when appropriate (and not just throwing out annoying or vague\\nmessage boxes).\\n\\nInterlocking dependencies can be a nightmare. For example, if you start\\na thread that loads an image, and then *block* on that thread until it\\ncompletes, you\'re worse off than if you wrote yourself a cooperative\\nimage loader because now the whole program stalls waiting for the thread\\nto complete anyway. And like everything else, there are two ways to\\nhandle this:\\n\\n(1) Use a \\"friendly\\" blocking mechanism that periodically polls the user\\ninput and updates display. This is no better than cooperative\\nsingle-thread designs though, as it has slow response times and doesn\'t\\nscale well to multiple threads.\\n\\n(2) Build your entire GUI around \\"messages\\" and \\"callbacks\\" (sometimes\\nalso called \\"signals\\"). This is the most flexible and user-friendly\\noption but can add a lot of \\"framework\\" to any codebase.\\n\\nI tried to use the first approach initially, because I was in a hurry to\\nget things working. But it\'s been problematic since day 1, so now I\'m\\nredoing most things to use the second method instead.\\n\\nThe second one is in fact the recommended design by Microsoft, and one\\nthey\'ve been using for almost everything in Windows ever since Win95.\\nIt\'s one of the reasons the Win32 API feels \\"heavy\\" to a lot of\\nprogrammers, but as it turns out, it\'s not without good reason."},{"id":"/2009/svn-comments-are-re-enabled","metadata":{"permalink":"/pcsx2-net-www/blog/2009/svn-comments-are-re-enabled","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/svn-comments-are-re-enabled/index.mdx","source":"@site/blog/2009/svn-comments-are-re-enabled/index.mdx","title":"Svn Comments Are Re Enabled","description":"As of Sept 30th, we\'ve re-enabled user comments at our SVN repository","date":"2009-10-03T00:00:00.000Z","formattedDate":"October 3, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.565,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-10-03T00:00:00.000Z","description":"As of Sept 30th, we\'ve re-enabled user comments at our SVN repository","draft":false,"tags":["devblog"],"title":"Svn Comments Are Re Enabled"},"prevItem":{"title":"Thread Synchronization","permalink":"/pcsx2-net-www/blog/2009/thread-synchronization"},"nextItem":{"title":"New Versioning Release Pattern","permalink":"/pcsx2-net-www/blog/2009/new-versioning-release-pattern"}},"content":"As of **Sept 30th** , we\'ve re-enabled\\nuser comments at our SVN repository PCSX2 @ Googlecode.\\n\\n\x3c!-- truncate --\x3e\\n\\nComments have been re-enabled primarily so that we can get user feedback\\nagain on plugins and the current ***legacy gui*** updates. The trunk of\\nsvn (the new wx gui) is still too volatile for user comments to be of\\nmuch use, so don\'t be surprised if we pretty well blow off \\"bug reports\\"\\nrelating to it.\\n\\n*(and yes, top priorities for implementation in the new gui are\\nframelimiter, savestates, and the advanced cpu options -- along with bug\\nfixes and memory leak fixes. No timeframe estimates: They\'ll all get\\ndone when they get done!)*"},{"id":"/2009/new-versioning-release-pattern","metadata":{"permalink":"/pcsx2-net-www/blog/2009/new-versioning-release-pattern","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/new-versioning-release-pattern/index.mdx","source":"@site/blog/2009/new-versioning-release-pattern/index.mdx","title":"New Versioning Release Pattern","description":"So starting with our next release of PCSX2 we\'ll be using an established versioning pattern","date":"2009-09-11T00:00:00.000Z","formattedDate":"September 11, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.72,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-09-11T00:00:00.000Z","description":"So starting with our next release of PCSX2 we\'ll be using an established versioning pattern","draft":false,"tags":["devblog"],"title":"New Versioning Release Pattern"},"prevItem":{"title":"Svn Comments Are Re Enabled","permalink":"/pcsx2-net-www/blog/2009/svn-comments-are-re-enabled"},"nextItem":{"title":"Progress flood","permalink":"/pcsx2-net-www/blog/2009/progress-flood"}},"content":"From 0.9.5 onward PCSX2 has been a mostly open SVN revisioning process,\\nwhere beta builds are SVN-marked and are widely built and distributed to\\nusers. 0.9.5 itself was never released as an official \'stable\' build,\\nand after the release of 0.9.6 we just called all subsequent SVN builds\\nof PCSX2 \\"betas.\\" (mostly because we were too lazy and/or busy to bother\\nworrying of version numbers). This lackadaisical version pattern was a\\nsource of confusion for users and developers alike.\\n\\n\x3c!-- truncate --\x3e\\n\\nSo starting with our next release of PCSX2 we\'ll be using an established\\nversioning pattern (which likely won\'t be for some time -- implementing\\na new GUI is a complicated ordeal). The new patter will be based on some\\nstandard Open Source convention, where odd-numbered versions denote\\nSVN/devel builds (and will have SVN numbers affixed to the version) and\\neven numbered versions denote stable releases. By chance this is already\\nhow things have been playing out since 0.9.5, so mostly it just means\\nwe\'re making a conscious effort to continue to apply the pattern in the\\nfuture. Thus, the past-present-future will look something like this:\\n\\nPast:\\n**0.9.4** - Official stable release\\n**0.9.5** - Development build (SVN)\\n\\nPresent:\\n**0.9.6** - Official stable release\\n**0.9.7** - Development build (SVN) *\\\\[wx-enhanced!\\\\]*\\n\\nFuture:\\n**0.9.8** - Official stable release\\n**0.9.9** - Development build (SVN)\\n**1.0.0** - Official stable release\\n**1.1.0** - Development build (SVN)\\n\\nThis way when people file bug reports we can know from the main version\\nnumber alone if the report is regarding a stable release or an SVN\\nbuild, and furthermore users can have a clearer guide to the status of\\nversions being released and such. Furthermore, odd versions will have\\nthe SVN revision appended to them by default, like **0.9.7.r1880** .\\n\\n... and yes the *hope* is that we\'re going to go to 1.0.0 after 0.9.9,\\nand use a 1.0, 1.1, 1.2, 1.3, etc version pattern, shortening the\\nprimary version numbers from three digits to two. But that\'s a long way\\ndown the road yet, and anything could happen between now and then."},{"id":"/2009/progress-flood","metadata":{"permalink":"/pcsx2-net-www/blog/2009/progress-flood","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/progress-flood/index.mdx","source":"@site/blog/2009/progress-flood/index.mdx","title":"Progress flood","description":"A lot is going on behind the scenes these days so without further ado here\'s our news","date":"2009-09-07T00:00:00.000Z","formattedDate":"September 7, 2009","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":1.32,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2009-09-07T00:00:00.000Z","description":"A lot is going on behind the scenes these days so without further ado here\'s our news","draft":false,"hide_table_of_contents":true,"image":"./feature-anime-waterfall.webp","tags":["progress-report"],"title":"Progress flood"},"prevItem":{"title":"New Versioning Release Pattern","permalink":"/pcsx2-net-www/blog/2009/new-versioning-release-pattern"},"nextItem":{"title":"Ps2 VU Vector Unit Documentation Part 1","permalink":"/pcsx2-net-www/blog/2009/ps2-vu-vector-unit-documentation-part-1"}},"content":"A lot is going on behind the scenes these days so without further ado\\nhere\'s our news:\\n\\n\x3c!-- truncate --\x3e\\n\\n-   PCSX2 has a brand new GUI *in development!* We will be using\\n**[wxWidgets](https://www.wxwidgets.org/)** for cross-platform\\ncompatibility and speedier dev cycles. However it won\'t be ready for\\nbeta for some time. For further info read the blog titled\\n**[Measuring the Benefits of wxWidgets](/blog/2009/measuring-the-benefits-of-wxwidgets)**\\n-   A Final beta has been released using the current PCSX2 GUI. It has\\ntons of improvements over the old one, mainly on microVU which is\\nnow almost complete. Get it from our downloads section.\\n-   First time we release a Linux beta, courtesy of\\n**[Arcum42](https://forums.pcsx2.net/User-arcum42)** , found in the\\nabove link as well.\\n-   Blog posts now allow user comments in our forum! Discussions\\nsurrounding the development part of PCSX2 are going strong in **[the\\nnew forum](https://forums.pcsx2.net/Forum-Developer-Discussion)**\\n-   **Major** work on the site even if you can\'t see it. New Guide\\npage, updated **About**, updated Contact, **all** pages XHTML\\nvalid, Compatibility list filter/go button fixed and cross-browser compatibility.\\n-   New, extremely detailed Compile\\nWiki, courtesy of **[n1ckn4m3](https://forums.pcsx2.net/User-n1ckn4m3)**.\\n-   New forum plugins, added recaptcha 2 for spam protection, auto image\\nresizing,users browsing thread and favorite icon. Fixes for the Dark\\ntheme, which should now look perfect in all browsers\\n\\n\\nAs development of the new GUI is currently under way, the trunk of our\\nSVN will have a very alpha PCSX2 which you should only use for testing or just out of curiosity. For a\\nbleeding edge usable PCSX2 for the time being use the last released beta.\\n\\nThat\'s all for now!"},{"id":"/2009/ps2-vu-vector-unit-documentation-part-1","metadata":{"permalink":"/pcsx2-net-www/blog/2009/ps2-vu-vector-unit-documentation-part-1","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/ps2-vu-vector-unit-documentation-part-1/index.mdx","source":"@site/blog/2009/ps2-vu-vector-unit-documentation-part-1/index.mdx","title":"Ps2 VU Vector Unit Documentation Part 1","description":"This begins a series of blog posts intended for ps2 developers and ps2 emu authors","date":"2009-09-02T00:00:00.000Z","formattedDate":"September 2, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":4.68,"hasTruncateMarker":true,"authors":[{"name":"cottonvibes","key":"cottonvibes"}],"frontMatter":{"authors":["cottonvibes"],"date":"2009-09-02T00:00:00.000Z","description":"This begins a series of blog posts intended for ps2 developers and ps2 emu authors","draft":false,"tags":["devblog"],"title":"Ps2 VU Vector Unit Documentation Part 1"},"prevItem":{"title":"Progress flood","permalink":"/pcsx2-net-www/blog/2009/progress-flood"},"nextItem":{"title":"Whats Clamping Why Do We Need It","permalink":"/pcsx2-net-www/blog/2009/whats-clamping-why-do-we-need-it"}},"content":"This begins a series of blog posts intended for ps2 developers and ps2\\nemu authors.\\nIts purpose is to give some light to some of the secrets I\'ve learned\\nabout the VUs while developing my mVU recompilers, and to describe what\\nhappens in situations that are a bit questionable.\\n\\n\x3c!-- truncate --\x3e\\n\\nAll information has been at least somewhat tested, but of course there\\nmay be some errors.\\nI should also mention that everything described here mVU implements in\\nsome way (unless specifically noted otherwise).\\nI may even describe some tricks and clever optimizations I used in my\\nrecompilers in future articles.\\n\\nSince these articles are intended to describe advance secrets, I will\\n**not** bother to explain common concepts about the VUs, and reading\\nthis implies you have at least an intermediate level of how the VUs work\\nor how to program for them.\\n\\n\\n**Note 1: VI lower instructions**\\n\\nFor lower opcode operations dealing with VI regs, there is a 5 bit range\\nfor VI operands. But only VI regs 0 to 15 are accessible, for values\\ngreater than 15, the value is ANDed with 0xf. So effectively there is\\nonly a 4 bit range.\\nExample\\n\\n```cpp\\nIAND: 1000000 | 0000 | it x 5 | is x 5 | id x 5 | 110100\\n```\\n\\n\\nIf for \'id\' we have \'18\', then the destination would be\\n\\n```cpp\\n18 &= 0xf;\\n```\\n\\nResulting in the destination reg being vi02.\\n\\n**Note 2: VI Reg Delays on Conditional Branches**\\n\\nIf a VI integer reg is modified before a conditional branch, the\\nprevious value of the integer is used for the calculation.\\nThis only applies to conditional branches, and not to jumps (JR/JALR).\\n\\nExample:\\n\\n```cpp\\nIADDIU vi05, vi00, 100\\nIBNE vi05, vi00 &lt; // ---- vi05\'s value is before the 100 was added\\n```\\n\\n\\nThe only exception to this are Flag reading lower instructions\\n(FSxxx/FMxxx/FCxxx). In those cases the current value is read.\\n\\n```cpp\\nFSAND vi05, 0xfff\\nIBNE vi05, vi00 &lt; // ---- vi05\'s value is the Status Reg\\n```\\n\\nThe situation becomes complex however when a VI reg is read AND written\\nto in a sequence of instructions.\\n\\n```cpp\\nIADDIU vi05, vi00, 100\\nIADDIU vi05, vi05, 100\\nIADDIU vi05, vi05, 100\\nIADDIU vi05, vi05, 100\\nIBNE vi05, vi00 &lt; // ---- vi05\'s value is before any 100 value was added. (the value before the first IADDIU)\\n```\\n\\nWhen a VI reg is first written to, a \'chain\' starts, and then if the\\nnext instruction reads AND writes to the same VI reg, the chain\\ncontinues. It does this for a maximum of 4 instructions (the example\\nabove is the maximum). Then when the branch comes, the value that should\\nbe read is the value before the chain!\\n\\nIn a few games this commonly happens with a sequence of SQI\\ninstructions, and improperly emulating this causes problems.\\n\\nIt should also be noted that this behavior also occurs through branches.\\nFor example, Champions Return to Arms does something especially evil to\\nemulate correctly (mVU does however emulate it correctly).\\n\\nIt does:\\n\\n```cpp\\n[08b0] (000002ff) NOP\\n[08b0] (100310fb) IADDIU vi03, vi02, 251\\n[08b8] (000002ff) NOP\\n[08b8] (81e2a37d) SQI.xyzw vf20, vi02++\\n[08c0] (000002ff) NOP\\n[08c0] (81e2ab7d) SQI.xyzw vf21, vi02++\\n[08c8] (000002ff) NOP\\n[08c8] (81e2b37d) SQI.xyzw vf22, vi02++\\n[08d0] (000002ff) NOP\\n[08d0] (520317fc) IBNE vi03, vi02 [08b8]\\n[08d8] (000002ff) NOP\\n[08d8] (81e2bb7d) SQI.xyzw vf23, vi02++\\n```\\n\\n\\nThe first time the above block of code is run, the IBNE value for vi02\\nis the same value as it\'s value at \\\\[08b0\\\\] (before the chain starts).\\nNext (assuming the branch is taken), the delay slot is ran and a NEW vi2\\nchain begins. When the vi2 is read on the second loop, it should be the\\nvalue vi2 had BEFORE \\\\[08d8\\\\]. So it reads the result of \\\\[08c8\\\\] from\\nthe first loop! (Remember these chains last for 4 instructions maximum,\\nso it makes sense when you think about it).\\n\\nCurrently I\'m not 100% sure what happens if a stall occurs in one of\\nthese VI chains, but I\'m 95% sure it breaks the chain, making it start\\non the instruction where the stall occurred (wouldn\'t make sense\\notherwise).\\n\\n**Note 3: ADD/SUB Precision and Normalization**\\n\\nWhen performing ADD/SUB operations, the ps2 VU\'s and the FPU act closely\\nto SSE\'s \\"Round to Zero\\" mode (but of course they don\'t support\\nINF/NaNs).\\nTriace games however rely on bit-accurate ADD opcodes (ADDI\\nspecifically) to boot (presumably due to some decompression algorithm or\\nan encryption key).\\n\\nNneeve found out the VU\'s act as if they have only 1 guard bit during\\nmantissa normlization (as opposed to SSE which uses 3 guard bits that\\nSTILL appear during normalization when using Round to Zero in add/sub\\nSSE instructions).\\n\\nBy using a custom ADD routine Nneeve wrote that simulates only 1 guard\\nbit during single-precision float mantissa normalization, pcsx2 is able\\nto boot and run Triace games with a playable status. (Refer to pcsx2\'s\\nsource for the custom routines)\\n\\n**Note 4: MAX/MINI with Denormals**\\n\\nThe ps2\'s Max and Min logic compares and transfers denormals to the\\nresult, as opposed to SSE with DaZ On which will treat any Denormal as\\nZero and just transfer Zero as the result.\\nExample:\\n\\n```cpp\\nMAX vf02.x, vf00.x, vf01.x\\n```\\n\\n\\nAssuming vf01.x holds a positive denormal, the result in vf02.x will be\\nthat same denormal.\\nUsing SSE with DaZ however will just make the result \'0\' in that case\\n(which is incorrect).\\n\\nSome games rely on this correct behavior for MAX/MINI or else have\\ngraphical problems\\n\\n**Big Special thanks to:**\\nNneeve, Tmkk, Rama, and ZeroFrog who all helped in finding some of the\\nsecrets described in this documentation."},{"id":"/2009/whats-clamping-why-do-we-need-it","metadata":{"permalink":"/pcsx2-net-www/blog/2009/whats-clamping-why-do-we-need-it","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/whats-clamping-why-do-we-need-it/index.mdx","source":"@site/blog/2009/whats-clamping-why-do-we-need-it/index.mdx","title":"Whats Clamping Why Do We Need It","description":"In pcsx2\'s advanced options dialog (if you\'ve dared to look), you\'ve might have noticed there\'s \\"FPU Clamp Mode\\" and \\"VU Clamp Mode\\" settings","date":"2009-08-31T00:00:00.000Z","formattedDate":"August 31, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":5.2,"hasTruncateMarker":true,"authors":[{"name":"cottonvibes","key":"cottonvibes"}],"frontMatter":{"authors":["cottonvibes"],"date":"2009-08-31T00:00:00.000Z","description":"In pcsx2\'s advanced options dialog (if you\'ve dared to look), you\'ve might have noticed there\'s \\"FPU Clamp Mode\\" and \\"VU Clamp Mode\\" settings","draft":false,"tags":["devblog"],"title":"Whats Clamping Why Do We Need It"},"prevItem":{"title":"Ps2 VU Vector Unit Documentation Part 1","permalink":"/pcsx2-net-www/blog/2009/ps2-vu-vector-unit-documentation-part-1"},"nextItem":{"title":"C Exceptions Can Be An Optimization","permalink":"/pcsx2-net-www/blog/2009/c-exceptions-can-be-an-optimization"}},"content":"In pcsx2\'s advanced options dialog (if you\'ve dared to look), you\'ve\\nmight have noticed there\'s \\"FPU Clamp Mode\\" and \\"VU Clamp Mode\\"\\nsettings. You may even have experimented with some of these modes and\\nfound out they fix or break games.\\nBut what are they doing? And why so many options?\\n\\n\x3c!-- truncate --\x3e\\n\\nWell first you have to know what a floating point number is. A float is\\nsimply a representation of a rational number from a string of bits,\\nwhose decimal point can change or \'float\'. (This isn\'t the exact\\ndefinition, but good enough for this conversation).\\n\\nBasically there\'s something called the \\"The IEEE Standard for\\nFloating-Point Arithmetic\\" (or IEEE 754), which defines floating point\\nrepresentation; and most systems abide by those rules (of course not our\\nwonderful PS2).\\n\\n\\nThere\'s 32-bit \\"Single Precision Floats\\" (commonly referred to as\\n\'float\'), 64-bit \\"Double Precision Floats\\" (commonly referred to as\\n\'double\'), and there\'s even 128-bit floats called Quads (most processors\\ndon\'t support these natively).\\n\\nThe one we\'re concerned about is the Single Precision Float, which is\\n32bits and has a format like this\\n\\nS x 1bit \\\\| E x 8bits \\\\| M x 23bits\\n\\nS = Sign Bit (0 = Positive Number; 1 = Negative Number)\\nE = Exponent (Biased according to some formula)\\nM = Mantissa (Normalized with a hidden bit)\\nI\'m not going to go into detail on how this stuff works, but [wikipedia\\nis quite\\nhelpful](http://en.wikipedia.org/wiki/IEEE_754-1985#Single-precision_32-bit)\\n\\nAnyways what we need to know is that the IEEE 754 standard defines\\nvalues with the Exponent bits \\"11111111\\", as \\"NaN\\" values (short for\\n\\"Not a Number\\").\\n\\nTo be more precise, there\'s also INF (infinity) values, qNaN (quiet\\nNaN), and sNaN (signaling NaN).\\nBasically NaNs are given when the result of an operation is undefined.\\n\\nLike if you divide 1 / 0, you get a NaN result, because you can\'t divide\\na number by 0.\\nOr if you take the Square-Root of a negative number, you get a NaN\\nvalue.\\n\\nINF values are basically what it sounds like, its an attempt to\\nrepresent infinity.\\n\\nThe tricky part is that now that you have a NaN or INF value, if you\\never try and do a calculation with them, you\'ll get a NaN or INF value\\nas the result.\\n\\nExample:\\nNaN + 500 = NaN (generally the same NaN, since it propagates)\\nINF - 19999999999 = INF\\n\\nThis is how the IEEE 754 standard defined this stuff (I honestly don\'t\\nlike it, but w/e)\\n\\nThe ps2 however doesn\'t support NaN\'s and Infinities!\\nSo basically, the numbers in the range of INF/NaN on a IEEE 754 pc, are\\njust very-large numbers (or very small numbers if negative (if the sign\\nbit is 1)).\\n\\nFor comparison of what your x86-32 CPU does VS the ps2 we have:\\n\\n**Your PC:**\\n1/0 = NaN\\nsqrt (-4) = NaN\\nINF - 1000 = INF\\n\\n**The PS2:**\\n1/0 = Greatest Positive Float Number (0x7ffffffff)\\nsqrt (-4) = sqrt(abs(-4)) = 2\\nINF - 1000 = Some Large Value - 100\\n\\nAnd there\'s many more combinations, but the point is that the results\\nare not the same between PC and the PS2.\\n\\n\\nSo how do we solve these problems?\\nWell there\'s no \'fast\' way to emulate the ps2 behavior 100% correct\\n(this would require a software FPU, which will be **very-slow** ).\\n\\nWhat we do instead is use a combination of clamping, simulation, and\\ncleverness.\\n\\nThe way clamping works is if a value is INF or NaN, we \'clamp\' it into\\nthe closest value that\'s not a INF or NaN.\\nBasically we force values into \'normal numbers\' so that it doesn\'t mess\\nup operations as much.\\n\\nThis isn\'t 100% exact, but its generally \'good enough\' to fix many\\nproblems with games.\\nLet me give you a quick example of something clamping can solve:\\n\\n```cpp\\nint main() {\\nfloat value = INF;\\ndo {\\nvalue = value / 2;\\nif (value <= 1) {\\nprint(\\"Hello World\\");\\nbreak;\\n}\\n} while (true);\\n}\\n```\\n\\n\\nIf the above code was ran on the ps2, it will eventually print \\"Hello\\nWorld\\", because INF is treated as a regular large number, and will\\ncontinue to be divided by 2 until its less than 1.\\n\\nBut if done on your x86-32 PC, it will never print \\"Hello World\\" but\\ncontinue to loop forever, because Infinity divided by 2 is still\\nInfinity!\\nEver seen games that just hang in pcsx2? Sometimes its caused by\\nsituations like above.\\n\\nClamping can solve this problem like this:\\n\\n```cpp\\nint main() {\\nfloat value = INF;\\ndo {\\nvalue = clamp(value);  // If value is NaN/INF, make value into a big normal number value = value / 2;\\nif (value <= 1) {\\nprint(\\"Hello World\\");\\nbreak;\\n}\\n} while (true);\\n}\\n```\\n\\nThe clamping will convert the INF into a normal (ordered) number. Then\\nthat normal number can be divided by 2 repetitively until its less than\\n1. Then it will eventually satisfy (value less or equal 1), and print\\n\\"Hello World\\".\\n\\n\\nSometimes clamping breaks games (because of a lot of reasons that will\\ntake too long to explain), but the basic problem is:\\nThe ps2\'s floats have a larger range of valid-values than your PC\'s\\nfloats. Therefore we have to make values \'as close as possible\' on the\\nPC to try and make games happy.\\n\\nBecause its impossible to know if clamping will break or help a game in\\nsome situations, we have different clamp modes in pcsx2\'s advanced\\noptions.\\nAlso clamping is SLOW if done a lot, so different clamp modes are faster\\nthan others (\'None\' is the fastest of course)\\n\\n\\nI also should mention that in earlier examples i said:\\nsqrt(-4) = NaN; // on your PC\\nsqrt(-4) = 2; // on the ps2\\n\\nIn this case, we simulate the ps2\'s sqrt instruction by doing this\\n\\n```cpp\\nfloat ps2_sqrt(float value) {\\nvalue = clamp(value);  // Clamp Value if NaN or Inf to an ordered/normal number\\nvalue = abs(value);    // Make Positive\\nvalue = sqrt(value);   // Get sqrt of now-positive value\\nreturn value;\\n}\\n```\\n\\n\\nso:\\nps2\\\\_sqrt(-4) = 2;\\n\\n\\nNow this post is getting really large, and I tried to simplify things a\\nlot (which may have made things more confusing).\\nAnyways I hope some of this info was useful/interesting"},{"id":"/2009/c-exceptions-can-be-an-optimization","metadata":{"permalink":"/pcsx2-net-www/blog/2009/c-exceptions-can-be-an-optimization","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/c-exceptions-can-be-an-optimization/index.mdx","source":"@site/blog/2009/c-exceptions-can-be-an-optimization/index.mdx","title":"C Exceptions Can Be An Optimization","description":"One of the first things I sought to do when I first started contributing to PCSX2 was to improve the emulator\'s overall stability and error handling","date":"2009-08-30T00:00:00.000Z","formattedDate":"August 30, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.9,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-08-30T00:00:00.000Z","description":"One of the first things I sought to do when I first started contributing to PCSX2 was to improve the emulator\'s overall stability and error handling","draft":false,"tags":["devblog"],"title":"C Exceptions Can Be An Optimization"},"prevItem":{"title":"Whats Clamping Why Do We Need It","permalink":"/pcsx2-net-www/blog/2009/whats-clamping-why-do-we-need-it"},"nextItem":{"title":"The Devblogs Now Allow User Comments","permalink":"/pcsx2-net-www/blog/2009/the-devblogs-now-allow-user-comments"}},"content":"One of the first things I sought to do when I first started contributing\\nto PCSX2 was to improve the emulator\'s overall stability and error\\nhandling; and to this day it\'s still one of my top priorities.\\n\\n\x3c!-- truncate --\x3e\\n\\nMy method of doing so was initially seen as controversial: I merged in\\ndrk\\\\|\\\\|Raziel\'s VTLB code (which was C++), converted the rest of the\\nPCSX2 codebase to C++, and started replacing the (lack of?) error code\\nreturn values with modern C++ exception handling. The initial reaction\\nfrom the public (and some PCSX2 team members) was either distrust or\\npanic. Chants of *\\"C++ is slow!\\"* or *\\"Exception handling is slow!\\"*\\nfrequented the PCSX2 revision comments.\\n\\nAnd admittedly, for some tasks and in some specific scenarios, C++ and\\nit\'s exception handling are slow. But, of course, the key is to avoid\\nthose scenarios... which as it turns out is really quite easy. Better\\nyet, clever use of C++ and its exceptions can actually be a *speedup* .\\nHow is that possible? I\'ll explain!\\n\\nTypically in traditional error handling models, you check the return\\ncode of a function for errors, like so:\\n\\n```cpp\\nif( DoSomethingSpecial() == SPECIAL_FAIL ) {\\n// Handle error.\\n}\\n```\\n\\n\\nThis is simple, short, and quite fast compared to the overhead of\\nentering a C++ **try/catch** block. But let\'s consider a more practical\\neveryday example:\\n\\n```cpp\\nint DoSomethingSpecial() {\\nif( DoSomethingElse() == SPECIAL_FAIL )\\nreturn SPECIAL_FAIL;\\n\\n// Do stuff based on DoSomethingElse\'s success\\nConsole::WriteLn( \\"Success!\\" );\\nreturn SPECIAL_WIN;\\n}\\nvoid LoopOfCode() {\\ndo {\\n// code [...]\\n} while( DoSomethingSpecial() != SPECIAL_FAIL )\\n}\\n```\\n\\nThe above code snippet must perform no less than *two conditional checks\\nper loop* just to propagate the error code up the chain of function\\ncalls, and this isn\'t even handling the possibility of a function\\nreturning more than one error code yet! This is a situation where C++\\nException Handling can come to our rescue:\\n\\n```cpp\\nvoid DoSomethingSpecial() {\\nDoSomethingElse();\\n// Do stuff based on DoSomethingElse\'s success\\nConsole::WriteLn( \\"Success!\\" );\\n}\\n\\nvoid LoopOfCode() {\\ntry {\\nwhile( true ) {\\nDoSomethingSpecial();\\n};\\n} catch( Exception:: SpecialFail&& ) {\\n\\n}\\n}\\n```\\n\\n\\nThe above C++ snippet performs the exact same operation, except now *no\\nconditionals are needed* . We\'ve traded off the two conditionals per\\nloop for the entry/exit code for the **try/catch** block. But the block\\nis outside the loop, so it will be run only once. Conditional checks are\\none of the slower operations on almost any CPU design, which means if\\nthe loop is a busy one which spins frequently this C++ code will\\ncertainly be a *significant* speedup over the plain jane C version. And\\nthat\'s just with one return code. Adding multiple exception handlers\\ndoesn\'t impact performance at all, so in a case where there are multiple\\nreturn codes the C++ exception handling approach shines even brighter.\\n\\n... thus dies the age-old rumor that C++ is slower than C. IT\'s all in\\nhow you wield your sword. Or... well... programming language.\\n\\n*Edit:* I should add that the basic theory of optimization I\'m using\\nhere is what I call \\"optimizing for the common case.\\" It\'s a process of\\nspeeding up the code that\'s being run more frequently (which in our\\nexample above is a typically error-free running loop) by offloading the\\nlogic to an area of the code that\'s run much less frequently (the\\nexception handler\'s entry/exit overhead). It\'s one of the most powerful\\noptimization techniques any programmer can employ."},{"id":"/2009/the-devblogs-now-allow-user-comments","metadata":{"permalink":"/pcsx2-net-www/blog/2009/the-devblogs-now-allow-user-comments","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/the-devblogs-now-allow-user-comments/index.mdx","source":"@site/blog/2009/the-devblogs-now-allow-user-comments/index.mdx","title":"The Devblogs Now Allow User Comments","description":"If you\'d like to make comments or ask questions in response to a devblog entry you can now do so from the PCSX2 Public Forums","date":"2009-08-29T00:00:00.000Z","formattedDate":"August 29, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.95,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-08-29T00:00:00.000Z","description":"If you\'d like to make comments or ask questions in response to a devblog entry you can now do so from the PCSX2 Public Forums","draft":false,"tags":["devblog"],"title":"The Devblogs Now Allow User Comments"},"prevItem":{"title":"C Exceptions Can Be An Optimization","permalink":"/pcsx2-net-www/blog/2009/c-exceptions-can-be-an-optimization"},"nextItem":{"title":"Logo Design Winners","permalink":"/pcsx2-net-www/blog/2009/logo-design-winners"}},"content":"If you\'d like to make comments or ask questions in response to a devblog\\nentry you can now do so from the [PCSX2 Public\\nForums](http://forums.pcsx2.net/) . Yes, unlike some frivolous\\nfree-for-all blog with a thousand disgusting comment spams, our DevBlog\\nrequires that you must be a registered user and logged in to post.\\n\\n\x3c!-- truncate --\x3e\\n\\nIt might not be the best system in the world, but it works well enough\\nfor our needs.\\n\\nThis is part of the PCSX2 Team\'s continuing attempt to expand the\\nhorizons of open source PS2 emulation development. There is a new\\ndedicated developers forum on our Forums that centralizes discussions\\nrelating to PCSX2 design and development; **Svn updates and\\nannouncements, Compilation issues, Cross-platform development,\\npatch/bugfix submissions,** and probably more to come.\\n\\nThe new forum is not meant for general bug reports or whimsical\\ncomplaints. So to keep things clean and focused, new topics can only be\\ncreated by forum administrators and PCSX2 developers. We will create\\ntopics relevant to the projects we\'re focusing on and the public can\\noffer your input via replies. And well... we\'ll just see how things pan\\nout from here..."},{"id":"/2009/logo-design-winners","metadata":{"permalink":"/pcsx2-net-www/blog/2009/logo-design-winners","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/logo-design-winners/index.mdx","source":"@site/blog/2009/logo-design-winners/index.mdx","title":"Logo Design Winners","description":"The pcsx2 logo design competition ended a while ago, and we had a lot of great submissions","date":"2009-08-05T00:00:00.000Z","formattedDate":"August 5, 2009","tags":[],"readingTime":0.795,"hasTruncateMarker":true,"authors":[{"name":"cottonvibes","key":"cottonvibes"}],"frontMatter":{"authors":["cottonvibes"],"date":"2009-08-05T00:00:00.000Z","description":"The pcsx2 logo design competition ended a while ago, and we had a lot of great submissions","draft":false,"title":"Logo Design Winners"},"prevItem":{"title":"The Devblogs Now Allow User Comments","permalink":"/pcsx2-net-www/blog/2009/the-devblogs-now-allow-user-comments"},"nextItem":{"title":"The Pros And Cons Of Googlecode","permalink":"/pcsx2-net-www/blog/2009/the-pros-and-cons-of-googlecode"}},"content":"The pcsx2 logo design competition ended a while ago, and we had a lot of great submissions (check them out\\n[here](http://forums.pcsx2.net/Thread-PCSX2-Logo-Design-Entries) ).\\n\\n\x3c!-- truncate --\x3e\\n\\nAfter weeks of voting, we were finally able to narrow down the winners:\\n\\n**New Logo by Nanxo:**\\n![](./img/pcsx2logo_Nanxo.webp)\\n\\n**New About Box Pic submitted by Tayfun and created by\\n[ongakujunkie](http://edwinhuang.com/) :**\\n![](./img/aboutlogo_Tayfun.webp)\\n\\n**New Icon by Jeonkz (modded for transparency by Air):**\\n![](./img/icon_Jeonkz.webp)\\n\\n**New favicon for Portal and Forums by NeoCloudstrife:**\\n![](./img/Icon3-64.webp)\\n\\nWe decided the 2nd place in the icon competition would be used as the\\nsmall favicon sites have when you bookmark them,on the portal and\\nforums, since we did not have one\\n\ud83d\ude0a\\n\\nSo congratulations to [Nanxo](http://forums.pcsx2.net/User-Nanxo) ,\\n[Tayfun](http://forums.pcsx2.net/User-Tayfun) ,\\n[Jeonkz](http://forums.pcsx2.net/User-jeonkz) and\\n[NeoCloudstrife](http://forums.pcsx2.net/User-NeoCloudstrife) for their\\nawesome designs! And many thanks to all who entered, there were many\\ngreat designs and it was hard picking the winners!\\n\\nLook forward to seeing these new designs in our next official release\\nwith our new wxWidgets GUI!\\n\ud83d\ude0a"},{"id":"/2009/the-pros-and-cons-of-googlecode","metadata":{"permalink":"/pcsx2-net-www/blog/2009/the-pros-and-cons-of-googlecode","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/the-pros-and-cons-of-googlecode/index.mdx","source":"@site/blog/2009/the-pros-and-cons-of-googlecode/index.mdx","title":"The Pros And Cons Of Googlecode","description":"As most of you know we use Google Code for our Public SVN repository, and doing so has its pros and cons","date":"2009-07-31T00:00:00.000Z","formattedDate":"July 31, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.825,"hasTruncateMarker":true,"authors":[{"name":"cottonvibes","key":"cottonvibes"}],"frontMatter":{"authors":["cottonvibes"],"date":"2009-07-31T00:00:00.000Z","description":"As most of you know we use Google Code for our Public SVN repository, and doing so has its pros and cons","draft":false,"tags":["devblog"],"title":"The Pros And Cons Of Googlecode"},"prevItem":{"title":"Logo Design Winners","permalink":"/pcsx2-net-www/blog/2009/logo-design-winners"},"nextItem":{"title":"Measuring The Benefits Of Wxwidgets","permalink":"/pcsx2-net-www/blog/2009/measuring-the-benefits-of-wxwidgets"}},"content":"As most of you know we use Google Code for our Public SVN repository,\\nand doing so has its pros and cons.\\n\\n\x3c!-- truncate --\x3e\\n\\nOne of the coolest features of Google Code is that it allows people to\\nrate and comment on revisions. This is great for bug tracking and\\ngetting a quick consensus of what people think about the revision.\\n\\nIn order to get quicker responses and have a wider degree of\\ntesting/comments, we have granted public access for\\ncomments/ratings/issues. This is extremely helpful because as a small\\nteam, we don\'t have the time nor the man-power to constantly test every\\nrevision, therefor we count on the public to test for us, and inform us\\non things we may not know. Furthermore, we have also gained new coders\\nand contributors through their comments/issues on GoogleCode.\\n\\nThere is a huge downside to this open-environment however; the most\\nnotable one being the trolls. Like with most public sites on the\\ninternet, we have our share of trolls. People giving negative ratings to\\na bunch of irrelevant revisions because they\'re mad their game broke. Or\\npeople leaving spam (even threatening) comments. Or best of all, people\\nrepetitively saying that game XYZ doesn\'t work on every revision, and\\ntelling us to fix it.\\n\\nA great example that I have to mention here is someone who has made\\ndozens of comments telling us to fix GT4/3, and always complains when we\\nignore him. At this point he\'s started to just rate revisions negatively\\nwithout even leaving a comment as to why. Sometimes I wonder if these\\npeople just think we\'re purposely not making games work because we\'re\\nevil or something...\\n\\nNow you might just be wondering, \\"So, why don\'t you just ban the guy.\\"\\nWell this is the biggest problem with GoogleCode, currently there\'s no\\nway to just ban users from your SVN. We can either make public access to\\ncomments/ratings/issues, or we can make it only available to project\\nmembers. There\'s no way to have it public while banning the trolls like\\nferrarinews.\\n\\nAnyways, there\'s more to GoogleCode than what I talked about here, but I\\nthink i described the main issue we\'ve been having with it"},{"id":"/2009/measuring-the-benefits-of-wxwidgets","metadata":{"permalink":"/pcsx2-net-www/blog/2009/measuring-the-benefits-of-wxwidgets","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/measuring-the-benefits-of-wxwidgets/index.mdx","source":"@site/blog/2009/measuring-the-benefits-of-wxwidgets/index.mdx","title":"Measuring The Benefits Of Wxwidgets","description":"One of the major changes planned for the next release of PCSX2 is a complete overhaul of the gui/frontend, switching from the current \\"native\\" Windows/Linux interfaces to a single unified interface that\'s (more or less) the same for both platforms","date":"2009-07-22T00:00:00.000Z","formattedDate":"July 22, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.87,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-07-22T00:00:00.000Z","description":"One of the major changes planned for the next release of PCSX2 is a complete overhaul of the gui/frontend, switching from the current \\"native\\" Windows/Linux interfaces to a single unified interface that\'s (more or less) the same for both platforms","draft":false,"tags":["devblog"],"title":"Measuring The Benefits Of Wxwidgets"},"prevItem":{"title":"The Pros And Cons Of Googlecode","permalink":"/pcsx2-net-www/blog/2009/the-pros-and-cons-of-googlecode"},"nextItem":{"title":"A Moment Of Zen","permalink":"/pcsx2-net-www/blog/2009/a-moment-of-zen"}},"content":"One of the major changes planned for the next release of PCSX2 is a\\ncomplete overhaul of the gui/frontend, switching from the current\\n\\"native\\" Windows/Linux interfaces to a single unified interface that\'s\\n(more or less) the same for both platforms. To make such a grand vision\\npossible we needed the help of a third party gui tooolkit, from which\\nthere were several to choose from. After much consideration we settled\\non [wxWidgets](http://www.wxwidgets.org) , which is the same toolkit\\nused by a few other notable emulators, such as\\n[Dolphin](http://www.dolphin-emulator.com/) .\\n\\n\x3c!-- truncate --\x3e\\n\\nSo what *are* the benefits of the new PCSX2 interface in development?\\n\\n**1. A vastly improved Linux interface.**\\n\\n... and not just in terms of what you see, but how the emulator\\ncooperates with the operating system as a whole. wxWidgets provides\\ndozens of very useful cross-platform tools that are much more\\nwell-suited to Linux functionality than the current PCSX2 codebase. The\\nnew interface will have a smarter plugin loader, and multilingual\\nsupport as well. It will also be easier to install and run as a user\\nother than root.\\n\\n**2. Windows XP/Vista Themed appearances will finally work!**\\n\\nUntil now, PCSX2 used the old Win95 ASCII-based Common Controls\\nlibraries, and this forced Windows to disable themes support when\\nrendering the PCSX2 interface. Buttons were plain and unshaded, and\\ndialog boxes such as the File and Folder pickers were small, ugly, and\\nlacking in features. All of this will be fixed in the next release.\\n\\n**3. More complete internationalization support.**\\n\\nTranslations of the PCSX2 interface will be easier to make and maintain,\\nand shouldn\'t become broken or obsolete from program updates, which was\\na persistent problem in the older PCSX2 interface design. In addition,\\nPCSX2 will be fully Unicode compliant on both Windows and Linux\\nplatforms, which should help resolve various oddball problems the\\nemulator may have encountered on non-English operating systems.\\n\\n**4. A more responsive multithreaded interface which will remain fully accessible even while games are running!**\\n\\nThe new interface will run on its own thread separate from the\\nemulator\'s EE/MTGS threads, allowing it to remain open and accessible in\\nthe background, without the need to shut down the GS window. This should\\nimprove the stability of \\"pausing\\" emulation, and also opens the door\\nfor expanding on interface integration; such as binding popup menus,\\ntoolbars, status bars, or other useful things to the GS window.\\n\\nFurthermore, if a game deadlocks the system, the interface will usually\\nremain responsive even as the rest of the emulator freezes up (which\\nmight not be much of a feature for end users, but is quite handy for us\\ndevelopers).\\n\\n**5. The Teaser Image!**\\n\\nAnd here\'s a sneak peek at the current GUI-Work-in-Progress:\\n\\n... yeah it\'s not a whole lot to see yet -- I might post some more as\\ndevelopment progresses.\\n\\n------------------------------------------------------------------------\\n\\n**From a coder\'s perspective:**\\n\\nIn all the wxWidgets experience so far has been a decent one. There are\\na few annoyances, but those tend to be more the fault of cross-platform\\nconsiderations (some things are not supported well under Linux, or vice\\nversa), or more commonly due to limitations and design flaws in the C++\\nlanguage itself rather than of wxWidgets (in particular, C/C++ make it\\nespecially difficult to work with unicode strings in a \'nice\' way). For\\nthe most part wx tries to model itself in the image of the .NET\\nFramework and Java Framework API designs, which are good designs to\\nfollow."},{"id":"/2009/a-moment-of-zen","metadata":{"permalink":"/pcsx2-net-www/blog/2009/a-moment-of-zen","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/a-moment-of-zen/index.mdx","source":"@site/blog/2009/a-moment-of-zen/index.mdx","title":"A Moment Of Zen","description":"While not likely to win the prize of being featured in PCSX2\'s next release (presumably 0.9.7, but you can never be too sure), this logo might deserve honorable mention","date":"2009-07-04T00:00:00.000Z","formattedDate":"July 4, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.25,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-07-04T00:00:00.000Z","description":"While not likely to win the prize of being featured in PCSX2\'s next release (presumably 0.9.7, but you can never be too sure), this logo might deserve honorable mention","draft":false,"tags":["devblog"],"title":"A Moment Of Zen"},"prevItem":{"title":"Measuring The Benefits Of Wxwidgets","permalink":"/pcsx2-net-www/blog/2009/measuring-the-benefits-of-wxwidgets"},"nextItem":{"title":"Logo Design Contest Closed","permalink":"/pcsx2-net-www/blog/2009/logo-design-contest-closed"}},"content":"While not likely to win the prize of being featured in PCSX2\'s next\\nrelease (presumably 0.9.7, but you can never be too sure), this logo\\nmight deserve honorable mention. I present for you a moment of Zen:\\n\\n\x3c!-- truncate --\x3e\\n\\n![](./img/pcsx2_jc_version_small.webp)\\n\\n*... is that an exploding cheeseburger on his robe?*"},{"id":"/2009/logo-design-contest-closed","metadata":{"permalink":"/pcsx2-net-www/blog/2009/logo-design-contest-closed","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/logo-design-contest-closed/index.mdx","source":"@site/blog/2009/logo-design-contest-closed/index.mdx","title":"Logo Design Contest Closed","description":"The Logo Contest has been closed and the final round of voting is in progress. The winner of the contest will be announced here when voting has completed.","date":"2009-07-04T00:00:00.000Z","formattedDate":"July 4, 2009","tags":[],"readingTime":0.375,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-07-04T00:00:00.000Z","description":"The Logo Contest has been closed and the final round of voting is in progress. The winner of the contest will be announced here when voting has completed.","draft":false,"title":"Logo Design Contest Closed"},"prevItem":{"title":"A Moment Of Zen","permalink":"/pcsx2-net-www/blog/2009/a-moment-of-zen"},"nextItem":{"title":"Recompilers All Dems Buzzwords","permalink":"/pcsx2-net-www/blog/2009/recompilers-all-dems-buzzwords"}},"content":"The Logo Contest has been closed and the final round of voting is in progress. The winner of the contest will be announced here when voting has completed.\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nAgain we want to thank everyone who submitted logos for the contest. The\\ncontest turned out to be a huge success. There were a lot of really\\ngreat entries to pick from, and the next release of PCSX2 is sure to\\nlook great."},{"id":"/2009/recompilers-all-dems-buzzwords","metadata":{"permalink":"/pcsx2-net-www/blog/2009/recompilers-all-dems-buzzwords","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/recompilers-all-dems-buzzwords/index.mdx","source":"@site/blog/2009/recompilers-all-dems-buzzwords/index.mdx","title":"Recompilers All Dems Buzzwords","description":"There are a lot of buzzwords in emulator recompilation","date":"2009-06-23T00:00:00.000Z","formattedDate":"June 23, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.855,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-06-23T00:00:00.000Z","description":"There are a lot of buzzwords in emulator recompilation","draft":false,"tags":["devblog"],"title":"Recompilers All Dems Buzzwords"},"prevItem":{"title":"Logo Design Contest Closed","permalink":"/pcsx2-net-www/blog/2009/logo-design-contest-closed"},"nextItem":{"title":"Events Plenty","permalink":"/pcsx2-net-www/blog/2009/events-plenty"}},"content":"There are a lot of buzzwords in emulator recompilation. Popular ones\\ninclude:\\n\\n\x3c!-- truncate --\x3e\\n\\n-   Intermediate Representation\\n-   Intermediate Language\\n-   Register Mapping\\n-   Register Allocation\\n-   Constant Propagation\\n-   Constant Folding\\n-   Register coloring\\n-   SSA (static single assignment optimization)\\n\\n\\nWhat do they mean? And perhaps more importantly, what do they mean to a\\nuser of the emulator? Truth is, not much usually. Most of these things\\nare technologies and strategies borrowed from high level language\\ncompilers like those for C/C++, C\\\\#, Java, etc. Some of them are useful\\nto emulator recompilers, some not so much.\\n\\nThe first thing to consider when working on a recompiler is that we are\\nworking with what is most likely *optimized code* . The machine code\\nthat your favorite games are running on your PS2 is already parsed and\\noptimized by a compiler (or in the case of older consoles,\\nhand-optimized). Secondly, recompilers typically have a single-block\\nscope limitation (which is hard to explain, but basically means that\\ncompilation stops when branch conditionals are encountered). This all\\nbut eliminates the usefulness of **SSA** and **register coloring**\\ntechniques, since their main benefits are in applying optimizations over\\na series of conditional code blocks, and elimination of dead code.\\nFurthermore, even when higher level optimizations can be applied, the\\nemulated CPU/Register states must still be guaranteed at frequent\\nintervals. Unlike high level languages, an emulator must manually track\\nthings like the Program Counter, instruction pipeline stalls, and other\\nhardware complications. So typically the benefits of such cross-block\\noptimizations get watered down anyway.\\n\\n**Constant Folding** and **Constant Propagation** are, for all intents\\nand purposes, the same thing. They always work together, and most people\\nuse the terms interchangeably. You\'ll never really find a practical\\nsituation where one is used without the other. Constant folding refers\\nto the evaluation of constant expressions like **100 \\\\* 5** . Constant\\npropagation refers to the substitution of variables with known\\nconstants, like:\\n\\n`x = 100 * 5;`\\n`y = x \\\\* 10;`\\n\\n... in which case, the value of \'y\' is known at compilation time, and\\ncan be further substituted (propagated) anywhere \'y\' is used (this\\nshould remind you of your 5th grade algebraic homework!). As mentioned\\nbefore, many people use the terms interchangeably, so when you see\\nanother emulator talk of Constant Folding, they mean the same thing I do\\nwhen I talk of Constant Propagation. The term \'propagation\' is\\ntechnically more correct, but folding is easier to type and looks nicer\\nwhen naming functions in your recompiler.\\n\\n**Intermediate Language (IL)** and **Intermediate Representation (IR)**\\nare more or less the same thing as well. IL simply implies an IR that\\nhas a (mostly) human-readable form. That is, an IL is in fact a\\nprogramming language, usually bearing some similarity to assembly code,\\nbut simpler and more sensible. An IR is just a raw collection of data\\nsufficient to represent all information needed to optimize code and\\ngenerate the final recompiled product.\\n\\nIn either case, the dual purposes of an IR/IL are:\\n\\n-   To simplify the instruction set as much as possible so that\\noptimizations can be analyzed without requiring a lot of\\nspecial-case code.\\n-   To provide a platform-independent \\"stage\\" to the compilation\\nprocess, so that ports of the recompiler to new target platforms\\nneed not be rewritten from the ground up.\\n\\n\\nBecause of the complicated nature of an emulator, an IL itself is\\nvirtually useless. There\'s typically too much per-instruction cpu state\\ninformation that has to be tracked for a human-readable language output\\nto be viable. But for the same reason an IR can be remarkably helpful in\\nreducing the overall complexity of a recompiler implementation, and is\\nalmost a foregone necessity when implementing Register Mapping.\\n\\n**Register Mapping** and **Register Allocation** are once again a set of\\nfairly interchangeable terms. I prefer the term mapping, but other folks\\nlike to call it allocation. Register mapping/allocation is typically one\\nof the final stages of recompilation since it\'s dependent on the target\\nplatform (in our case x86), and is also one of the most complex. It\'s\\nalso typically *not* very beneficial for performance when the target\\nplatform is an x86 machine (which in our case it is), unless register\\nmapping algorithms are *very* clever.\\n\\nAs I mentioned in my previous blog entry, the *most significant* factor\\nin a recompiler\'s speed is simply the fact that it\'s acting as a\\ndecoded-instruction cache, and that it executes instructions in bursts\\n(a block at a time instead of one-by-one). All the rest of these\\ntechniques tend to be more for the factors of code maintainability and\\nacademic challenge than for end-user performance gains."},{"id":"/2009/events-plenty","metadata":{"permalink":"/pcsx2-net-www/blog/2009/events-plenty","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/events-plenty/index.mdx","source":"@site/blog/2009/events-plenty/index.mdx","title":"Events Plenty","description":"One of the less obvious things that has plagued PCSX2\'s compatibility over the years is its event handling system","date":"2009-06-02T00:00:00.000Z","formattedDate":"June 2, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.37,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-06-02T00:00:00.000Z","description":"One of the less obvious things that has plagued PCSX2\'s compatibility over the years is its event handling system","draft":false,"tags":["devblog"],"title":"Events Plenty"},"prevItem":{"title":"Recompilers All Dems Buzzwords","permalink":"/pcsx2-net-www/blog/2009/recompilers-all-dems-buzzwords"},"nextItem":{"title":"PCSX2 Logo Design Contest","permalink":"/pcsx2-net-www/blog/2009/pcsx2-logo-design-contest"}},"content":"One of the less obvious things that has plagued Pcsx2\'s compatibility\\nover the years is its event handling system. The system in place as of\\n0.9.6 is adequate for interpreter-based emulation but is not\\nwell-equipped to handle the methods that a recompiler uses to manage cpu\\ncycle updates. This is something we aim to fix in the coming weeks.\\n\\n\x3c!-- truncate --\x3e\\n\\n**Cycle-based Timing Explained**\\n\\nAll cpus have a cycle rate, which is typically the Mhz/Ghz values you\'re\\nmost familiar with when talking about any cpu. An i7 clocked at 2.83ghz\\nhas a 2.83ghz cycle rate. Now, the actual throughput of instructions can\\nvary greatly since each cycle of the cpu consists of several *stages*\\nand multiple piplines, each of which can have dependency stalls and has\\nvarying rules for when such stalls occur. The cycle rate, however, is\\nalways 2.83ghz. Because cycle rates are a known constant, they make a\\ngood barometer for synchronizing the activities of a multi-processor\\ndesign like the Playstation 2.\\n\\n**Why do Recompilers Complicate Event Testing?**\\n\\nRecompilers work as a significant speedup over interpreters by doing two\\nthings:\\n\\n-   Recompile the machine code of a emulated CPU (in our case MIPS\\ninstructions) into code native to the host machine (ix86\\ninstructions).\\n-   Prefetch and pre-decode emulated instructions, and inline them into\\nblocks.\\n\\n\\nThe thing recompilers are most well-known for -- recompiling to native\\nmachine code -- is actually the less effective of the two things\\nrecompilers do for speeding up emulation. The primary speedup typically\\ncomes from the prefetching and inlining of instructions, which in\\naddition to eliminating the instruction fetch/decode stage (by far the\\nslowest part of any interpreter), also allows for cross-instruction\\noptimizations such as constant propagation and register caching/mapping.\\nIn other words, a recompiler is effectively executing emulated\\ninstructions in pre-compiled *bursts* . This is so important to\\nperformance that a recompiler without block-level execution would hardly\\nbe any faster than an interpreter.\\n\\nAs part of the design of block-level execution, the recompiled code only\\nupdates cpu cycle counts and tests for scheduled events at block\\nboundaries. Blocks typically span 5 to 35 cycles, but in some cases can\\nspan a hundred cycles or more. When the subsequent Event Test is\\nperformed, several scheduled events may be pending execution. This is\\nwhere problems can occur: The current event system implemented into\\nPcsx2 executes all pending events in no particular order, leading to\\nevents being executed out-of-order when multiple events time-out during\\na single block. Typically most events don\'t have dependencies on each\\nother, or games don\'t use them in a way that execution order matters.\\nBut sometimes they do, and in those cases behavior can be unpredictable,\\nor can cause the game to fail outright. To make matters worse, the\\npending events typically don\'t know how late they are, and will\\nre-schedule subsequent events in increasingly belated fashion. The\\ncurrent implementation of EE and IOP counters have tons of complicated\\ncode meant to compensate for this limitation (both slow and were nearly\\nimpossible to get right).\\n\\nThe fix for this is to use an event system I\'ll call **decremental delta\\ntime.** It has three advantages:\\n\\n-   Makes it easy to execute events in scheduled order regardless of the\\namount of time which has passed since the last Event Test.\\n-   Maintains relative cycle scheduling at a high level so that none of\\nthe events being re-scheduled \\"lose time\\" due to belated\\nblock-boundary event testing.\\n-   Simplifies event handling on all levels, and provides significant\\nspeedups for event testing and event dispatching.\\n\\n\\nIt\'s hard to know beforehand just how beneficial in-order execution of\\nevents will be. I\'m anticipating that it might actually fix a few\\nemulation problems on the IOP recompiler in particular, since it has a\\nslow cycle rate and also has a handful of events which can have\\npotential inter-dependencies. For that reason I\'ll be implementing the\\nsystem first into the IOP, and then when all the chinks in its armor are\\nworked free we\'ll port the EE side of the emulator over to it."},{"id":"/2009/pcsx2-logo-design-contest","metadata":{"permalink":"/pcsx2-net-www/blog/2009/pcsx2-logo-design-contest","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/pcsx2-logo-design-contest/index.mdx","source":"@site/blog/2009/pcsx2-logo-design-contest/index.mdx","title":"PCSX2 Logo Design Contest","description":"As many people that actively check our SVN know, we are in the process of a completely new cross-platform GUI for PCSX2","date":"2009-04-05T00:00:00.000Z","formattedDate":"April 5, 2009","tags":[],"readingTime":2.11,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2009-04-05T00:00:00.000Z","description":"As many people that actively check our SVN know, we are in the process of a completely new cross-platform GUI for PCSX2","draft":false,"title":"PCSX2 Logo Design Contest"},"prevItem":{"title":"Events Plenty","permalink":"/pcsx2-net-www/blog/2009/events-plenty"},"nextItem":{"title":"PCSX2 0.9.6 Released","permalink":"/pcsx2-net-www/blog/2009/pcsx2-0-9-6-released"}},"content":"As many people that actively check our SVN know, we are in the process of a completely new cross-platform GUI for PCSX2.\\nBut it would be quite dull to have a new GUI without a new logo, so we\\ndecided a fun thing to do would be to have a logo designing contest\\nwhere people can show us their skills, and make the next official logo\\nfor PCSX2!\\n\\n\x3c!-- truncate --\x3e\\n\\nThe contest rules are simple:\\n- Due by June 5th, 2009, but users can submit entries early in the\\n[PCSX2 Logo Design\\nEntries](http://forums.pcsx2.net/Thread-PCSX2-Logo-Design-Entries?pid=37631)\\nthread.\\n- The contest is free for anyone to enter, including people affiliated\\nwith the project.\\n- You may enter as many entries as you like (though only one entry will\\nbe chosen.)\\n- Winner will get their logo in our next release, and will be credited\\nfor their logo in our \\"about dialog.\\"\\n- Winner will be decided by PCSX2 team (in the event that the PCSX2 team\\nlikes our current logo better than the entries, we will have no winner)\\n\\nLogo restrictions:\\n- Logo must contain the word \'PCSX2\' (font/format/color is up to the\\ndesigner)\\n- Logo should be of reasonable size (our current logo is 380x180px, so\\nsize should be roughly similar)\\n- Logo entry can be a modification of our current logo.\\n- Logo should be submitted as a .png file.\\n- You may submit an optional 64x64px Icon with your logo to be used as\\nPCSX2\'s new icon (also should be a .png file).\\n- All entries will be released under a Creative Commons license.\\n- [ No copyrighted images may be used in the entries.\\n]{style=\\"color: #ff0000;\\"}\\n\\nTip for Icons:\\n* Icons should be 64x64, but **must look good at 32x32 and 16x16** .\\nExplained:\\n\\nTypically users will see 32x32 or 16x16 versions of icons (these are\\nshown in start menu, quick launch, etc). So for a 64x64 icon to be\\nusable it *must* scale well to 32x32 or 16x16. Alternatively you can\\nprepare an entire icon package, with special versions of an icon at each\\nsize: 64x64, 48x48, 32x32, and 16x16. This way you can ensure icons look\\nas intended at each size.\\n\\nSo good luck!\\n\ud83d\ude0a You can post your application in this thread\\n[HERE](http://forums.pcsx2.net/Thread-PCSX2-Logo-Design-Entries)\\n\\nOn other news,the PCSX2 guide has been fully updated for 0.9.6. So now\\nit\'s the best time if someone wants to translate it to another\\nlanguage. You can submit your application in this thread\\n[HERE](http://forums.pcsx2.net/Thread-Program-and-Guide-translation-applications)\\nif the spot for that language is still open\\n\ud83d\ude0a"},{"id":"/2009/pcsx2-0-9-6-released","metadata":{"permalink":"/pcsx2-net-www/blog/2009/pcsx2-0-9-6-released","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/pcsx2-0-9-6-released/index.mdx","source":"@site/blog/2009/pcsx2-0-9-6-released/index.mdx","title":"PCSX2 0.9.6 Released","description":"After nearly 16 months, here comes a new Pcsx2 version. Pcsx2 0.9.6","date":"2009-03-01T00:00:00.000Z","formattedDate":"March 1, 2009","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":1.58,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2009-03-01T00:00:00.000Z","description":"After nearly 16 months, here comes a new Pcsx2 version. Pcsx2 0.9.6","draft":false,"tags":["progress-report"],"title":"PCSX2 0.9.6 Released"},"prevItem":{"title":"PCSX2 Logo Design Contest","permalink":"/pcsx2-net-www/blog/2009/pcsx2-logo-design-contest"},"nextItem":{"title":"So Maybe It\'s About Time We Explained Vtlb","permalink":"/pcsx2-net-www/blog/2009/so-maybe-it-s-about-time-we-explained-vtlb"}},"content":"After nearly 16 months, here comes a new Pcsx2 version. Pcsx2 0.9.6\\n\\n\x3c!-- truncate --\x3e\\n\\nThese months were somewhat problematic for pcsx2, due to an initial\\nslowdown of the development process. Then, last fall, the Playground\\nbranch was created, and development picked up again. Finally, with the\\nmerge of Pcsx2 and Pcsx2 playground, the emulator\'s development\\nreturned once again as it was before, and now we can give you a release\\nwhich should (we hope!) leave you happy.\\n\\nWe would like to thank everyone that was still waiting for a release,\\nand coming to our forums. We would also like to thank everyone to\\nencouraged and otherwise supported us. This release is especially for\\nyou.\\n\\nImportant note: you NEED to update DirectX or you won\'t be able to use\\nthe emulator! You can do it with either of the links below:\\n**[THIS](http://www.microsoft.com/en-us/download/details.aspx?id=35)**\\n--- DirectX End-User Runtime Web Installer\\nor\\n**[THIS](http://www.microsoft.com/en-us/download/details.aspx?id=19743)**\\n--- DirectX End-User Runtimes (March 2009)\\n\\nWhat\'s new in 0.9.6?\\n\\n- Huge rewrite, mainly from the new members of the Playground branch!\\nToo many speedups, optimizations and other fixes to write here! Many\\nfamous games will now work.\\n- Dropped VM build replaced by the all new Vtlb, meaning no more\\n\'Cannot allocate memory\' errors at start up, more accurate emulation,\\nslightly lower speeds but with many optimizations to come\\n- Full memcard support, working in all games\\n- Improved Frameskip/VU-skip\\n- Special Game Fixes Section\\n- Advanced Options Section for custom tweaking VU/FPU behavior.\\n- Rewritten Multithreaded GS (MTGS) mode, with as much as 15% speedup\\nfor HT machines (only 3-5% for Dual Core), and fixes many\\ninstabilities.\\n- Improved VU/FPU Flags and Clamping support (helps fix odd behaviors\\nand SPS in some games)\\n- Improved EE/IOP synchronization (fixes many freeze-ups and vmhacks).\\n- Improved CDVD support.\\n\\nThe older versions will **NOT** be supported in our forums,so\\n0.9.4,0.9.5 and playground are not supported anymore\\n\ud83d\ude0a"},{"id":"/2009/so-maybe-it-s-about-time-we-explained-vtlb","metadata":{"permalink":"/pcsx2-net-www/blog/2009/so-maybe-it-s-about-time-we-explained-vtlb","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/so-maybe-it-s-about-time-we-explained-vtlb/index.mdx","source":"@site/blog/2009/so-maybe-it-s-about-time-we-explained-vtlb/index.mdx","title":"So Maybe It\'s About Time We Explained Vtlb","description":"Zerofrog documented the concepts of Virtual Memory a few years back. So now I figure it\'s VTLB\'s turn","date":"2009-02-13T00:00:00.000Z","formattedDate":"February 13, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.34,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-02-13T00:00:00.000Z","description":"Zerofrog documented the concepts of Virtual Memory a few years back. So now I figure it\'s VTLB\'s turn","draft":false,"tags":["devblog"],"title":"So Maybe It\'s About Time We Explained Vtlb"},"prevItem":{"title":"PCSX2 0.9.6 Released","permalink":"/pcsx2-net-www/blog/2009/pcsx2-0-9-6-released"},"nextItem":{"title":"Challenges Of A Public Release","permalink":"/pcsx2-net-www/blog/2009/challenges-of-a-public-release"}},"content":"Zerofrog documented the concepts of Virtual Memory a few years back. So\\nnow I figure it\'s VTLB\'s turn, since it\'s the new exclusive memory model\\nused in current AVNs and any future releases.\\n\\n\x3c!-- truncate --\x3e\\n\\nSo what is VTLB? VTLB stands for Virtual Translation Look-aside Buffer,\\nwhich for most of us is a lot of common everyday words that, when put\\ntogether like that, don\'t mean much at all.\\n\\nFirstly, the memory model names VM and VTLB refer to the systems in\\nplace inside PCSX2 for emulating the Playstation2\'s memory, and don\'t\\nactually refer to what\'s being emulated. In fact, neither VM or VTLB\\nbuilds emulate the PS2\'s own TLB memory model, which can be misleading\\nsince VTLB contains the letters \\"TLB.\\" The VM build was incapable of\\nemulating the PS2\'s TLB without significant speed penalties and\\ncomplications. VTLB on the other hand has the potential to emulate the\\nPS2 TLB, but we haven\'t added functionality for it since it also depends\\non some other not-yet-complete areas of emulation (namely MIPS TLBMiss\\nexceptions). As Zerofrog explained in an earlier blog, very few games\\nutilize the TLB features of the PS2 anyway, so it\'s pretty much at the\\nbottom of our wishlist at this time.\\n\\nConceptually, VTLB is surprisingly simple. It works by building a\\nlook-up of the PS2\'s physical memory on a per-page basis, and then\\ndefining actions or \\"handlers\\" for some pages, and defining other pages\\nas \\"direct access\\" (fast mode). A page of memory is 4096 bytes long, so\\nthe PS2\'s 32Meg physical address space translates into 8192 total pages\\nof memory, which ends up being a pretty small and efficient size as far\\nas lookup tables are concerned. By comparison the current EErec uses a\\nlookup table with *8 million entries* !\\n\\nSo when a PS2 instruction performs a memory operation (usually referred\\nto as a memOp), the VTLB grabs the lookup address. If the address has\\nthe \\"special handler\\" bit set, it routes to that handler. If the handler\\nbit is not set, the address is treated like a normal pointer to physical\\nmemory. As an optimization, VTLB uses the sign bit of the 32 bit address\\nfor the purpose of differentiating handled memory pages from direct\\nmemory pages.\\n\\nThe pseudo-code looks like this, as performed for a write memOp:\\n\\n```cpp\\nuint page = ps2_addr/4096;\\nuptr pc_addr = vtlb_lookup[page];\\nif( pc_addr & 0x80000000 ) // sign bit check\\n*pc_addr = data;\\nelse {\\nhandler[page]( ps2_addr, data );\\n}\\n```\\n\\nBy default, Pcsx2 utilizes the VTLB\'s handlers for several areas of Ps2\\nmemory that hold hardware registers. Hardware registers are memory\\naddresses that control the whats, whens, and hows of the Ps2 -- write to\\na specific memory address and the PS2 starts a DMA transfer, or changes\\nthe video mode, or plays a new audio sample. These writes have to be\\nintercepted and handled by the emulator. The VTLB allows us to do that\\nvery efficiently.\\n\\nThe reason why VTLB is able to emulate the PS2\'s own TLB is thanks to\\nthe handlers, which can remap memory anywhere at any time, with any set\\nof permissions. If a game decided to remap some pages of memory to a\\ndifferent virtual address, those pages would have the \\"handler bit\\" set\\nTRUE, and then the handler for those pages would be instructed to remap\\nthe memOp to the appropriate physical address.\\n\\nThus, the flow would be as such:\\n\\n**Ps2\\\\_Virtual\\\\_Address -&gt; VTLB\\\\_Lookup -&gt; Handler -&gt;\\nPs2\\\\_Physical\\\\_Address**\\n\\nThe benefits of this model are three-fold: efficiency, extensibility,\\nand ease of debugging. If a game doesn\'t use the Ps2\'s TLB, then the\\nVTLB will simply use direct memOps (fast!). If a game does happen to use\\nthe TLB, then VTLB can remap the memory as needed, allowing that game to\\nemulate correctly also without having to needlessly burden other games\\nwith the overhead of virtual memory remapping logic. And to top it all\\noff, handler mappings can be traced and dumped quickly and easily at any\\nstage of emulation."},{"id":"/2009/challenges-of-a-public-release","metadata":{"permalink":"/pcsx2-net-www/blog/2009/challenges-of-a-public-release","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/challenges-of-a-public-release/index.mdx","source":"@site/blog/2009/challenges-of-a-public-release/index.mdx","title":"Challenges Of A Public Release","description":"Without a doubt, creating a public release of PCSX2 is an exhausting affair","date":"2009-02-03T00:00:00.000Z","formattedDate":"February 3, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.18,"hasTruncateMarker":true,"authors":[{"name":"Jake Stine","key":"jake stine"}],"frontMatter":{"authors":["jake stine"],"date":"2009-02-03T00:00:00.000Z","description":"Without a doubt, creating a public release of PCSX2 is an exhausting affair","draft":false,"tags":["devblog"],"title":"Challenges Of A Public Release"},"prevItem":{"title":"So Maybe It\'s About Time We Explained Vtlb","permalink":"/pcsx2-net-www/blog/2009/so-maybe-it-s-about-time-we-explained-vtlb"},"nextItem":{"title":"PCSX2 PG And Official PCSX2 Teams Merge!","permalink":"/pcsx2-net-www/blog/2009/pcsx2-pg-and-official-pcsx2-teams-merge"}},"content":"Without a doubt, creating a public release of Pcsx2 is an exhausting\\naffair. We just got finished posting the latest and greatest in 0.9.6, and while it\'s\\nnice having everything done and over with for now, it sure feels like\\nthere should have been a better way.\\n\\n\x3c!-- truncate --\x3e\\n\\nThis time around we tried to make use of our GoogleCode Svn in \\"smart\\"\\nfashion, and created a branch for the Release Candidate. The jury\'s\\nstill out on if this proved to be successful or not. Several\\nground-breaking fixes were submitted shortly *after* the RC branch was\\nmade, so we had to merge all of that stuff in. Furthermore, I got\\ncarried away and experimented with partial merges, without fully\\nunderstanding the advantages of reverse merges, so I had to undo several\\nof my own merging errors. And just to add salt to the wound, TortoiseSvn\\nhad a bug that would frequently \\"forget\\" line breaks; merging all code\\nchanges into one super-long line. -\\\\_-\\n\\nSo in the end, the merges required a lot of brain power, a lot of time,\\nand may have led to some small mistakes. These were all things we were\\nhoping the RC branch would help reduce, so it was a bit of a fail on\\nthat account.\\n\\nThe other stress tester when doing an official release is the updating\\nof the compatibility list, which is both a lot of work for our dedicated\\ntesters and has the nasty side-effect of making us devs completely and\\ntotally aware of just how many games actually emulate worse now, instead\\nof better. So each day was a mad dash to do regression testing on each\\nnew set of titles that came in as no longer being playable. This was\\nmade even more challenging by the fact that most of the regressions\\nended up being pretty old, dating back to the pre-Playground days\\n(meaning they were attributed to 0.9.5 Svn revisions). We only managed\\nto get a few of the riddles solved.\\n\\nSo yeah, it\'s true -- the overall \\"playable\\" number of games is lower in\\n0.9.6 compared to 0.9.4, due to many semi-obscure titles which are\\nunable make it past the intro in 0.9.6. But on the other hand, games\\nthat are playable tend be much more accurately emulated now, and are\\ncertainly much faster. And 0.9.6 also runs a couple dozen games that\\n0.9.4 could not (most of which are big titles many folks have looked\\nforward to for some time). In the meantime, though, you might want to\\nkeep that old 0.9.4 copy around for some of those titles that need it."},{"id":"/2009/pcsx2-pg-and-official-pcsx2-teams-merge","metadata":{"permalink":"/pcsx2-net-www/blog/2009/pcsx2-pg-and-official-pcsx2-teams-merge","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/pcsx2-pg-and-official-pcsx2-teams-merge/index.mdx","source":"@site/blog/2009/pcsx2-pg-and-official-pcsx2-teams-merge/index.mdx","title":"PCSX2 PG And Official PCSX2 Teams Merge!","description":"This has been considered for a long time and after the two teams met, we have come to a merge","date":"2009-02-03T00:00:00.000Z","formattedDate":"February 3, 2009","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2009-02-03T00:00:00.000Z","description":"This has been considered for a long time and after the two teams met, we have come to a merge","draft":false,"tags":["devblog"],"title":"PCSX2 PG And Official PCSX2 Teams Merge!"},"prevItem":{"title":"Challenges Of A Public Release","permalink":"/pcsx2-net-www/blog/2009/challenges-of-a-public-release"},"nextItem":{"title":"PCSX2 Playground V1.0.0395 And New Forums!","permalink":"/pcsx2-net-www/blog/2008/pcsx2-playground-v1-0-0395-and-new-forums"}},"content":"This has been considered for a long time and after the two teams met,we\\nhave come to a merge\\n\ud83d\ude0a The new talented coders have already done great\\nwork on the emulator and will now be joined by the old PCSX2 team for an\\neven better coding team!\\n\\n\x3c!-- truncate --\x3e\\n\\nThis means that:\\n\\n1. The PCSX2 - Playground project will be renamed and will from now on be\\n**the official PCSX2 project**\\n\\n2. The whole PCSX2 - Playground team will be added to the existing\\nofficial PCSX2 team\\n\\n3. The next PCSX2 release will replace the 0.9.4 version and the 0.9.5\\nbeta which we provide will be replaced by new betas after the new\\nrelease.This means that the current PCSX2-Playground build will not be\\nprovided as a download (since it will actually be an older version of\\nthe released PCSX2)\\n\\n4. Our forum structure will be re-organized to match these changes after\\na new release has been made\\n\ud83d\ude0a\\n\\nOn other news,we now host the PCSX2 Mac port made by Zedr0n in our\\nforums **[here](http://forums.pcsx2.net/forum-61.html)**. Head there\\nfor the latest compiled build and try it on your Mac!\\n\\nMany plugin updates, as usual grab them from our downloads section!"},{"id":"/2008/pcsx2-playground-v1-0-0395-and-new-forums","metadata":{"permalink":"/pcsx2-net-www/blog/2008/pcsx2-playground-v1-0-0395-and-new-forums","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2008/pcsx2-playground-v1-0-0395-and-new-forums/index.mdx","source":"@site/blog/2008/pcsx2-playground-v1-0-0395-and-new-forums/index.mdx","title":"PCSX2 Playground V1.0.0395 And New Forums!","description":"After a really long period of silence, we\'re back with a bang!","date":"2008-12-12T00:00:00.000Z","formattedDate":"December 12, 2008","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":1.64,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2008-12-12T00:00:00.000Z","description":"After a really long period of silence, we\'re back with a bang!","draft":false,"tags":["progress-report"],"title":"PCSX2 Playground V1.0.0395 And New Forums!"},"prevItem":{"title":"PCSX2 PG And Official PCSX2 Teams Merge!","permalink":"/pcsx2-net-www/blog/2009/pcsx2-pg-and-official-pcsx2-teams-merge"},"nextItem":{"title":"Plugin Update Galore","permalink":"/pcsx2-net-www/blog/2008/plugin-update-galore"}},"content":"After a really long period of silence, we\'re back with a bang!\\n\\n\x3c!-- truncate --\x3e\\n\\nToday we are announcing the release of **PCSX2 Playground 1.0.0395**\\n\\nBorn as a \'playground\' test-bed for PCSX2 modifications and code, the\\nPlayground project evolved into much more, over a period of about 4\\nmonths.\\nCreated by Air (aka Jake Stine), arcum42, cottonvibes, drkIIRaziel, rama\\nand tested by Krakatos, the team would like to thank:\\n\\n- Thanks to the original PCSX2 development team, to the betatesters and\\nto everyone that helped them. Without their work, PCSX2 would not exist,\\nand neither would the Playground project!\\n- Thanks to the PCSX2 team once more for graciously hosting our forums.\\n- Thanks to the PCSX2 team once again for providing hosting space\\n\ud83d\ude0a\\n- Thanks to Gigaherz for the render used in the playground logo\\n- Thanks to all the people who tried the various Playground revisions\\nover these months, providing us with helpful feedback\\n- Thanks to everyone else who supported Playground, without you all this\\nwould have not been possible!\\n\\nThe PCSX2 team decided to support this project by having the official\\nbeta testers also test it and hosting their binary and forum, since\\nthey\'ve been doing some great job\\n\ud83d\ude0a\\nYou can grab the new binary which includes a plugin pack (and a heavily\\nmodified SPU2Ghz for your sound pleasure!) in our download section here\\nFor more information,check the dedicated forum\\n**[here](http://forums.pcsx2.net/thread-2341.html)**\\n\\nAlso,today we open our **new official forums** , hosted right here at\\npcsx2.net\\n\ud83d\ude0a We would like to thank Bobbi and the NGemu\\nnetwork for hosting our forums for so long!\\nOur new forum is totally dedicated to PCSX2 and has sections for the\\nofficial release,the public beta, plugins and the playground build\\n\ud83d\ude0a\\nWe hope you enjoy it, you can visit by clicking\\n**[here](http://forums.pcsx2.net/index.php)**\\n\\n**Note:** Your verification mail might end up in junk mail, please check\\nthere!\\n**Note2:** We moved our official SVN repository from sourceforge to\\ngoogle code: <http://code.google.com/p/pcsx2/>"},{"id":"/2008/plugin-update-galore","metadata":{"permalink":"/pcsx2-net-www/blog/2008/plugin-update-galore","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2008/plugin-update-galore/index.mdx","source":"@site/blog/2008/plugin-update-galore/index.mdx","title":"Plugin Update Galore","description":"It\'s summer vacations for most of us and as you\'ve seen PCSX2 development has been pretty slow these days!","date":"2008-08-14T00:00:00.000Z","formattedDate":"August 14, 2008","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":0.87,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2008-08-14T00:00:00.000Z","description":"It\'s summer vacations for most of us and as you\'ve seen PCSX2 development has been pretty slow these days!","draft":false,"tags":["progress-report"],"title":"Plugin Update Galore"},"prevItem":{"title":"PCSX2 Playground V1.0.0395 And New Forums!","permalink":"/pcsx2-net-www/blog/2008/pcsx2-playground-v1-0-0395-and-new-forums"},"nextItem":{"title":"Spu2Ghz Beta 1.9","permalink":"/pcsx2-net-www/blog/2008/spu2ghz-beta-1-9"}},"content":"It\'s summer vacations for most of us and as you\'ve seen PCSX2\\ndevelopment has been pretty slow these days!\\n\\n\x3c!-- truncate --\x3e\\n\\nBut,some great plugins for PCSX2 have recently got updated and are worth\\nmentioning:\\n\\nGsdx 0.1.9: Gabest releases yet another version of his fast DX9 / DX10\\nGS plugin improving speed and compatibility.You can get it from our\\ndownloads page\\n\\nLilypad 0.9.4: Chickenliver keeps updating this pad plugin with constant\\nbug fixes and features,so be sure to check it out.Also in our downloads\\n\\nGigaherz\'s cdvd plugin v0.7 WIP 3: A new CDVD plugin by Gigaherz which\\nis in very early stages but making progress.You can download it and give\\nit a try in this thread\\n[here](http://forums.pcsx2.net/thread-2354.html)\\n\\nEdit: New DEV9 (HDD) plugin by NHerve released! It is also in early\\nstages (first release) but it\'s a big breakthrough since it is the\\nfirst working DEV9 plugin! You can check it out here:\\n[MegaDev9](http://forums.ngemu.com/ps2-plugin-questions-troubleshooting/109713-megadev9-plugin.html)\\n\\nThat\'s it for now,I\'ll try to keep updating the download section with\\nthe new releases.\\nEnjoy your summer vacations people\\n\ud83d\ude0a"},{"id":"/2008/spu2ghz-beta-1-9","metadata":{"permalink":"/pcsx2-net-www/blog/2008/spu2ghz-beta-1-9","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2008/spu2ghz-beta-1-9/index.mdx","source":"@site/blog/2008/spu2ghz-beta-1-9/index.mdx","title":"Spu2Ghz Beta 1.9","description":"It hasn\'t even been 2 weeks yet, and I have managed to get some new stuff together for a new spu2ghz release!","date":"2008-06-06T00:00:00.000Z","formattedDate":"June 6, 2008","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":0.685,"hasTruncateMarker":true,"authors":[{"name":"gigaherz","url":"https://github.com/gigaherz","imageURL":"https://github.com/gigaherz.png","key":"gigaherz"}],"frontMatter":{"authors":["gigaherz"],"date":"2008-06-06T00:00:00.000Z","description":"It hasn\'t even been 2 weeks yet, and I have managed to get some new stuff together for a new spu2ghz release!","draft":false,"tags":["progress-report"],"title":"Spu2Ghz Beta 1.9"},"prevItem":{"title":"Plugin Update Galore","permalink":"/pcsx2-net-www/blog/2008/plugin-update-galore"},"nextItem":{"title":"Spu2Ghz 1.8","permalink":"/pcsx2-net-www/blog/2008/spu2ghz-1-8"}},"content":"It hasn\'t even been 2 weeks yet, and I have managed to get some new\\nstuff together for a new spu2ghz release!\\n\\n\x3c!-- truncate --\x3e\\n\\nThis time the most notable changes are the addition of timestretching\\nand support for winamp DSP plugins.\\n\\nAs a bonus, there\'s also an option to toggle the speed limiter using\\nthe [Numpad -] key (can be changed in the .ini file).\\n\\n[You can download it\\nhere.](http://sourceforge.net/project/showfiles.php?group_id=87426&package_id=93611&release_id=605019)\\n\\nTo use winamp DSP pugins I recommend getting [Multiple-DSP\\nStacker](http://www.winamp.com/plugins/details/128742) , which will\\nallow you to easily change DSP plugins and configure them. To enable it\\nyou will have to edit the .ini file and manually point it to the path of\\nthe DSP dll and the module number (normally it\'s 0, unless it has many\\nchoices in a single dll).\\n\\nHope you all like it!"},{"id":"/2008/spu2ghz-1-8","metadata":{"permalink":"/pcsx2-net-www/blog/2008/spu2ghz-1-8","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2008/spu2ghz-1-8/index.mdx","source":"@site/blog/2008/spu2ghz-1-8/index.mdx","title":"Spu2Ghz 1.8","description":"I\'m (ab)using the pcsx2.net\'s news system to let everyone know I (finally) got my lazy ass to make some improvements in my sound plugin.","date":"2008-05-25T00:00:00.000Z","formattedDate":"May 25, 2008","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":0.44,"hasTruncateMarker":true,"authors":[{"name":"gigaherz","url":"https://github.com/gigaherz","imageURL":"https://github.com/gigaherz.png","key":"gigaherz"}],"frontMatter":{"authors":["gigaherz"],"date":"2008-05-25T00:00:00.000Z","description":"I\'m (ab)using the pcsx2.net\'s news system to let everyone know I (finally) got my lazy ass to make some improvements in my sound plugin.","draft":false,"tags":["progress-report"],"title":"Spu2Ghz 1.8"},"prevItem":{"title":"Spu2Ghz Beta 1.9","permalink":"/pcsx2-net-www/blog/2008/spu2ghz-beta-1-9"},"nextItem":{"title":"IPU Updated!","permalink":"/pcsx2-net-www/blog/2008/ipu-updated"}},"content":"I\'m (ab)using the pcsx2.net\'s news system to let everyone know I\\n(finally) got my lazy ass to make some improvements in my sound plugin.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe result is spu2ghz 1.8, which you can find in [the official thread in\\nour forums](http://forums.pcsx2.net/thread-2352.html) .\\n\\nI will keep working on the SPDIF decoding, and hopefully someday I will\\nmanage to get working AC3/DTS playback.\\n\\nEDIT: I uploaded the file also to [sourceforge.net\'s file release\\nsystem](http://sourceforge.net/project/showfiles.php?group_id=87426) for\\nanyone who can\'t access the forums, or doesn\'t want to register in\\nthem."},{"id":"/2008/ipu-updated","metadata":{"permalink":"/pcsx2-net-www/blog/2008/ipu-updated","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2008/ipu-updated/index.mdx","source":"@site/blog/2008/ipu-updated/index.mdx","title":"IPU Updated!","description":"I tried to think of a flashy title for this, but i couldn\'t, so I thought I\'d just blurt it out!","date":"2008-04-23T00:00:00.000Z","formattedDate":"April 23, 2008","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":1.05,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2008-04-23T00:00:00.000Z","description":"I tried to think of a flashy title for this, but i couldn\'t, so I thought I\'d just blurt it out!","draft":false,"tags":["progress-report"],"title":"IPU Updated!"},"prevItem":{"title":"Spu2Ghz 1.8","permalink":"/pcsx2-net-www/blog/2008/spu2ghz-1-8"},"nextItem":{"title":"The Amusement Continues","permalink":"/pcsx2-net-www/blog/2008/the-amusement-continues"}},"content":"I tried to think of a flashy title for this, but i couldn\'t, so I thought I\'d just blurt it out!\\n\\n\x3c!-- truncate --\x3e\\n\\nYes the IPU (video side of PCSX2) has been updated by none other than\\n**Saqib** ! You might be asking what this will bring to the table? Well\\nim sure as many of you know, videos in PCSX2 suffered from Macroblocking\\n(Corrupt squares appearing all over the place) or videos freezing\\nrandomly. Well thanks to Saqib for his marvelous work, many games no\\nlonger suffer from these symptoms. Here is a quick rundown of some of\\nthe games fixed.\\n\\n- Atelier Iris - Grand Phantasm\\n- Ayumi Hamasaki - A Visual Mix\\n- Bully\\n- Graffiti Kingdom\\n- Many Growlanser games\\n- Monster Hunter\\n- Resident Evil 4\\n- Simple Series Videos\\n- Soul Calibur 3\\n- The Simpsons\\n- Many more!\\n\\nIn light of these changes a lot of games have been improved to a\\nplayable status or had their stability increased!\\n\\nThe code is in SVN, do NOT ask for help on the forums. If you guys are\\nlucky, i might be nice enough to compile a new beta very soon\\n\ud83d\ude09\\n\\nDiscussion of whats fixed can be found on the [Official\\nforums](http://forums.ngemu.com/showthread.php?p=718442#post718442)\\n\\n-Refraction"},{"id":"/2008/the-amusement-continues","metadata":{"permalink":"/pcsx2-net-www/blog/2008/the-amusement-continues","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2008/the-amusement-continues/index.mdx","source":"@site/blog/2008/the-amusement-continues/index.mdx","title":"The Amusement Continues","description":"The new version of PCSX2 is out, development continues, ideas flow through the team and new ideas for fun spring to mind, just to forget about the work at hand for five minutes","date":"2008-02-06T00:00:00.000Z","formattedDate":"February 6, 2008","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.86,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2008-02-06T00:00:00.000Z","description":"The new version of PCSX2 is out, development continues, ideas flow through the team and new ideas for fun spring to mind, just to forget about the work at hand for five minutes","draft":false,"tags":["devblog"],"title":"The Amusement Continues"},"prevItem":{"title":"IPU Updated!","permalink":"/pcsx2-net-www/blog/2008/ipu-updated"},"nextItem":{"title":"Merry Christmas And Spu2Ghz Release","permalink":"/pcsx2-net-www/blog/2007/merry-christmas-and-spu2ghz-release"}},"content":"The new version of PCSX2 is out, development continues, ideas flow\\nthrough the team and new ideas for fun spring to mind, just to forget\\nabout the work at hand for five minutes! This time, in the form of a\\nvideo containing \\"misheard lyrics\\". We all listen to songs and sometimes\\ncompletely miss the correct lyrics in a song, but i decided to go one\\nstep further with this following number and see what i could make in\\nenglish out of a song which is sung in sweedish (afaik). The idea came\\naround after Falcon4ever was thinking of ideas for a 404 page on a\\nsubdomain of ours to wind up one of the other team members, with the use\\nof an annoying song.\\n\\n\x3c!-- truncate --\x3e\\n\\nWell, needless to say, it worked, but the song was so crap i figured I\'d\\nmake it a bit more fun, sat down with Cool Edit open for a while and\\njotted down what i \\"thought\\" i heard!\\n\\n\x3c!-- TODO add the song, lol? --\x3e"},{"id":"/2007/merry-christmas-and-spu2ghz-release","metadata":{"permalink":"/pcsx2-net-www/blog/2007/merry-christmas-and-spu2ghz-release","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/merry-christmas-and-spu2ghz-release/index.mdx","source":"@site/blog/2007/merry-christmas-and-spu2ghz-release/index.mdx","title":"Merry Christmas And Spu2Ghz Release","description":"This is gigaherz here, writing my first ever news post.","date":"2007-12-25T00:00:00.000Z","formattedDate":"December 25, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.835,"hasTruncateMarker":true,"authors":[{"name":"gigaherz","url":"https://github.com/gigaherz","imageURL":"https://github.com/gigaherz.png","key":"gigaherz"}],"frontMatter":{"authors":["gigaherz"],"date":"2007-12-25T00:00:00.000Z","description":"This is gigaherz here, writing my first ever news post.","draft":false,"tags":["devblog"],"title":"Merry Christmas And Spu2Ghz Release"},"prevItem":{"title":"The Amusement Continues","permalink":"/pcsx2-net-www/blog/2008/the-amusement-continues"},"nextItem":{"title":"Gamepad Support For Linux!","permalink":"/pcsx2-net-www/blog/2007/gamepad-support-for-linux"}},"content":"This is gigaherz here, writing my first ever news post.\\n\\n\x3c!-- truncate --\x3e\\n\\nAfter more than 4 years working on it in my spare time, and while it\\nstill doesn\'t work as well as peops spu2 or zerospu2, the plugin has\\nfinally come to be acceptable enough for public testing.\\n\\nI have to note the plugin has many known issues in specific games, like\\nlooping, robotized or jumpy audio, but in others it does its job more\\nthan fine and in a few it even manages to get better results than its\\ncompetitors.\\n\\nFor now, you can get binary builds for win32 in\\n[here](http://forums.pcsx2.net/thread-2352.html) .\\n\\nOn a side note, it\'s Christmas day already, so to everyone who chooses\\nto celebrate it, me and the rest of the PCSX2 team wish you all a Merry\\nChristmas and I hope you all have been given all what you asked for (or\\nwhat you deserve, whichever is better), and for those who don\'t, I\\nstill wish you a good day!"},{"id":"/2007/gamepad-support-for-linux","metadata":{"permalink":"/pcsx2-net-www/blog/2007/gamepad-support-for-linux","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/gamepad-support-for-linux/index.mdx","source":"@site/blog/2007/gamepad-support-for-linux/index.mdx","title":"Gamepad Support For Linux!","description":"It\'s about time Linux users had a proper pad plugin!","date":"2007-12-12T00:00:00.000Z","formattedDate":"December 12, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.4,"hasTruncateMarker":true,"authors":[{"name":"zerofrog","key":"zerofrog"}],"frontMatter":{"authors":["zerofrog"],"date":"2007-12-12T00:00:00.000Z","description":"It\'s about time Linux users had a proper pad plugin!","draft":false,"tags":["devblog"],"title":"Gamepad Support For Linux!"},"prevItem":{"title":"Merry Christmas And Spu2Ghz Release","permalink":"/pcsx2-net-www/blog/2007/merry-christmas-and-spu2ghz-release"},"nextItem":{"title":"Next Destination PCSX2 Net","permalink":"/pcsx2-net-www/blog/2007/next-destination-pcsx2-net"}},"content":"It\'s about time Linux users had a proper pad plugin! ZeroPAD now\\nsupports gamepads including analog axes... which some games are\\nimpossible to play without! So if you are a Linux user and are dying to\\nplay pcsx2 with a gamepad, please update the sourceforge svn or download\\nthe zeropad plugin sources below. If you are downloading, just unzip\\ninto your previous zeropad folder and \'make install\'. For people\\nhaving problems, post your questions in the forums.\\n\\n\x3c!-- truncate --\x3e"},{"id":"/2007/next-destination-pcsx2-net","metadata":{"permalink":"/pcsx2-net-www/blog/2007/next-destination-pcsx2-net","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/next-destination-pcsx2-net/index.mdx","source":"@site/blog/2007/next-destination-pcsx2-net/index.mdx","title":"Next Destination PCSX2 Net","description":"Ever wondered from which country and city we get the most visits?","date":"2007-12-08T00:00:00.000Z","formattedDate":"December 8, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.345,"hasTruncateMarker":true,"authors":[{"name":"falcon4ever","url":"https://github.com/falcon4ever","imageURL":"https://github.com/falcon4ever.png","key":"falcon4ever"}],"frontMatter":{"authors":["falcon4ever"],"date":"2007-12-08T00:00:00.000Z","description":"Ever wondered from which country and city we get the most visits?","draft":false,"tags":["devblog"],"title":"Next Destination PCSX2 Net"},"prevItem":{"title":"Gamepad Support For Linux!","permalink":"/pcsx2-net-www/blog/2007/gamepad-support-for-linux"},"nextItem":{"title":"Live Public Betas!","permalink":"/pcsx2-net-www/blog/2007/live-public-betas"}},"content":"Ever wondered from which country and city we get the most visits?\\n\\n\x3c!-- truncate --\x3e\\n\\n**Country top 5:**\\n\\n1.  United States - - (706,921)\\n2.  Japan -\\n(524,869)\\n3.  Brazil -\\n(504,787)\\n4.  Germany -\\n-\\n(392,980)\\n5.  France  -\\n(331,084)\\n\\n**City top 5:**\\n\\n1.  Madrid, Spain -\\n(104,796)\\n2.  Sao Paulo, Brazil- (79,615)\\n3.  Tokyo, Japan - (78,990)\\n4.  Santiago, Chile  - (75,821)\\n5.  Moscow, Russia  - (75,006)"},{"id":"/2007/live-public-betas","metadata":{"permalink":"/pcsx2-net-www/blog/2007/live-public-betas","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/live-public-betas/index.mdx","source":"@site/blog/2007/live-public-betas/index.mdx","title":"Live Public Betas!","description":"I hope everybody out there is enjoying 0.9.4 and trying our new online functionality, but for those of you who just managed to get some clean underwear on after the excitement, we have some more news for you, so underwear draw on standby.","date":"2007-12-01T00:00:00.000Z","formattedDate":"December 1, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.84,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-12-01T00:00:00.000Z","description":"I hope everybody out there is enjoying 0.9.4 and trying our new online functionality, but for those of you who just managed to get some clean underwear on after the excitement, we have some more news for you, so underwear draw on standby.","draft":false,"tags":["devblog"],"title":"Live Public Betas!"},"prevItem":{"title":"Next Destination PCSX2 Net","permalink":"/pcsx2-net-www/blog/2007/next-destination-pcsx2-net"},"nextItem":{"title":"Release Fixes And Stuff","permalink":"/pcsx2-net-www/blog/2007/release-fixes-and-stuff"}},"content":"I hope everybody out there is enjoying 0.9.4 and trying our new online\\nfunctionality, but for those of you who just managed to get some clean\\nunderwear on after the excitement, we have some more news for you, so\\nunderwear draw on standby.\\n\\n\x3c!-- truncate --\x3e\\n\\nFrom today we will be doing occasional public beta releases! Meaning\\nwhatever is on the SVN, you will not have to wait for a year for us to\\nrelease it. But i will make one note *prepares bold, large text for the\\nfew idiots who manage to miss it*\\n\\n**WE WILL NOT BE SUPPORTING BETA BUILDS ON THE FORUM!**\\n\\nI hope everybody can read that, we will not tollerate it, any threads\\nrelating to it will be closed and unanswered.\\n\\nThat aside i hope you enjoy your new builds, but be sure to check back\\noccasionally as i won\'t be informing you of any updates\\n\ud83d\ude09\\n\\nHead over to the new \\"Public Beta\\" section of the downloads page to\\ngrab it.\\n\\nEnjoy!"},{"id":"/2007/release-fixes-and-stuff","metadata":{"permalink":"/pcsx2-net-www/blog/2007/release-fixes-and-stuff","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/release-fixes-and-stuff/index.mdx","source":"@site/blog/2007/release-fixes-and-stuff/index.mdx","title":"Release Fixes And Stuff","description":"I thought I better just make a note saying to you guys the release builds were updated yesterday","date":"2007-11-13T00:00:00.000Z","formattedDate":"November 13, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-11-13T00:00:00.000Z","description":"I thought I better just make a note saying to you guys the release builds were updated yesterday","draft":false,"tags":["devblog"],"title":"Release Fixes And Stuff"},"prevItem":{"title":"Live Public Betas!","permalink":"/pcsx2-net-www/blog/2007/live-public-betas"},"nextItem":{"title":"PCSX2 0.9.4 Has Arrived","permalink":"/pcsx2-net-www/blog/2007/pcsx2-0-9-4-has-arrived"}},"content":"Just a quick one, now i\'m not suffering so badly from post traumatic\\nrelease disorder, I thought I better just make a note saying to you guys\\nthe release builds were updated yesterday (if you didn\'t realize there\\nwas edit\'s) due to a bug making the TLB release extremely slow. This\\nhas now been fixed.\\n\\n\x3c!-- truncate --\x3e\\n\\nI have just updated the packs again to include Linuz ISO plugin version\\n0.7.0, seems we accidentally packed 0.6.0 with the earlier builds! sorry\\nabout that!\\n\\nIf you already have the slowness bug fixes (or you only use VM), you can\\ndownload the Linuz ISO plugin update from our plugin downloads section,\\nelse feel free to redownload the packs, preferably from the mirror, as\\nsome of you may have noticed due to the volume of downloads we had, the\\nsite was grinding to a halt!\\n\\nThanks and enjoy 0.9.4\\nRefraction\\n\\nPS: Guide to getting online coming soon (a proper one). As linked in the\\nlast post there is a simple guide with the basic steps you need to take\\nin order to get up and running, but i will do a more detailed one later\\nfor those who don\'t quite understand\\n\ud83d\ude0a"},{"id":"/2007/pcsx2-0-9-4-has-arrived","metadata":{"permalink":"/pcsx2-net-www/blog/2007/pcsx2-0-9-4-has-arrived","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/pcsx2-0-9-4-has-arrived/index.mdx","source":"@site/blog/2007/pcsx2-0-9-4-has-arrived/index.mdx","title":"PCSX2 0.9.4 Has Arrived","description":"Well ladies and gents, here it is, the brand spanking new PCSX2 0.9.4","date":"2007-11-11T00:00:00.000Z","formattedDate":"November 11, 2007","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":2.14,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-11-11T00:00:00.000Z","description":"Well ladies and gents, here it is, the brand spanking new PCSX2 0.9.4","draft":false,"tags":["progress-report"],"title":"PCSX2 0.9.4 Has Arrived"},"prevItem":{"title":"Release Fixes And Stuff","permalink":"/pcsx2-net-www/blog/2007/release-fixes-and-stuff"},"nextItem":{"title":"Gsdx9 Lives!","permalink":"/pcsx2-net-www/blog/2007/gsdx9-lives"}},"content":"Well ladies and gents, here it is, the brand spanking new PCSX2 0.9.4.\\nWe have lots of new stuff for you people to try out, some of the major\\nfeatures included in this release are:\\n\\n\x3c!-- truncate --\x3e\\n\\n- ZeroSPU2 - new SPU2 plugin from zerofrog. It is the most stable SPU2\\nplugin. Also has a time-scaling feature which slows down sound when the\\nframe rate is too low (instead of hearing popping sounds). The\\ntime-scaling feature works best under Windows, but is also implemented\\nin Linux. This new plugin also fixes the voices on the Japanese release\\nof **Final Fantasy X**\\n\\n- VU recompilers - games like **Kingdom Hearts II** , **Metal Gear Solid\\nIII** , and **Katamari Damacy** are now playable.\\n\\n- ZeroGS 0.97 - **ZeroGS DirectX has gone open source!** You can\\ndownload it from sourceforge. A lot of bug fixes in this release and the\\nadded support of AA modes up to x16! One new feature is the ability to\\ntweak ZeroGS options, which were internal up to these release.\\n\\n- Path3 GS fixes - Fixes corrupting textures on many games.\\n\\n- Memory Card Fixes - Now you can save your games in games like\\n**Resident Evil 4** and others which refused to see memorycards!\\n\\n- Dual Layer DVD reading support for games like **Xenosaga** .\\n\\n- Network Play! Enjoy playing your favorite online game with PS2\\nPlayers. ( **[WinPCap](http://www.winpcap.org/install/default.htm)\\nRequired** ), You can read up on how to do it by following this link\\n[here](http://forums.pcsx2.net/Thread-How-To-Play-Online-Guide)\\n\\n- Windows x64 and Linux x86-64 support - The recompilers are not\\noptimized yet, so don\'t expect major speed improvements. However, pcsx2\\ncan now natively run on these platforms as well as the x86 platforms.\\n**For Windows, we recommend you stick to the 32bit build rather than the\\n64bit one.**\\n\\n- Real Time Clock - Silly as it may seem, this actually makes **Metal\\nGear Solid 3** and **Katamari Damacy** work, plus your ps2 says the\\nactual time!\\n\\nIf you get a d3dx9_36.dll not found error, you need to update your\\ndirectx from\\n[here](http://www.microsoft.com/en-us/download/details.aspx?id=35) .\\nEnjoy!\\n\\n**EDIT: There was a slight bug in the ZeroGS plugin. We\'ve updated the\\nbinary and setup files. If you have a graphics that supports pixel\\nshader 3.0, and zerogs reports it as 2.0, then grab the new files.**\\n\\n**EDIT2: There was another bug on TLB builds and x64 builds that made\\nthe emulator ~10-20% slower. It has been fixed now. If you are not on\\nwindows xp using the VM build, please get the new setup (or update\\nsourceforge rev 196). Thanks!**"},{"id":"/2007/gsdx9-lives","metadata":{"permalink":"/pcsx2-net-www/blog/2007/gsdx9-lives","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/gsdx9-lives/index.mdx","source":"@site/blog/2007/gsdx9-lives/index.mdx","title":"Gsdx9 Lives!","description":"Gabest popped on to the forums yesterday to release a new version of his plugin","date":"2007-11-09T00:00:00.000Z","formattedDate":"November 9, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.47,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-11-09T00:00:00.000Z","description":"Gabest popped on to the forums yesterday to release a new version of his plugin","draft":false,"tags":["devblog"],"title":"Gsdx9 Lives!"},"prevItem":{"title":"PCSX2 0.9.4 Has Arrived","permalink":"/pcsx2-net-www/blog/2007/pcsx2-0-9-4-has-arrived"},"nextItem":{"title":"PCSX2 Team Unstoppable!","permalink":"/pcsx2-net-www/blog/2007/pcsx2-team-unstoppable"}},"content":"Gabest popped on to the forums yesterday to release a new version of his\\nplugin, notable changes being:\\n*This version fixes a few things like shaking/interlacing\\nMTGS crash fix\\nSoftware rendering reaching about 10-20% higher framerate*\\n\\n\x3c!-- truncate --\x3e\\n\\nDo note this version requires Pixel Shader 2 and SSE2. Unfortunately the\\nPixel Shader thing can no longer be helped due to microsoft removing\\nPixelshader 1.1 and 1.4 support from DirectX, so for those without, this\\nis an omen to update your graphics card\\n\ud83d\ude0a\\n\\nTo discuss or get support, you can do so [here](http://forums.pcsx2.net/Thread-GSdx)"},{"id":"/2007/pcsx2-team-unstoppable","metadata":{"permalink":"/pcsx2-net-www/blog/2007/pcsx2-team-unstoppable","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/pcsx2-team-unstoppable/index.mdx","source":"@site/blog/2007/pcsx2-team-unstoppable/index.mdx","title":"PCSX2 Team Unstoppable!","description":"It seems like our developers are on steroids, there has been so many progress in the last few days (netplay and usb keyboard support)","date":"2007-09-05T00:00:00.000Z","formattedDate":"September 5, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.205,"hasTruncateMarker":true,"authors":[{"name":"falcon4ever","url":"https://github.com/falcon4ever","imageURL":"https://github.com/falcon4ever.png","key":"falcon4ever"}],"frontMatter":{"authors":["falcon4ever"],"date":"2007-09-05T00:00:00.000Z","description":"It seems like our developers are on steroids, there has been so many progress in the last few days (netplay and usb keyboard support)","draft":false,"tags":["devblog"],"title":"PCSX2 Team Unstoppable!"},"prevItem":{"title":"Gsdx9 Lives!","permalink":"/pcsx2-net-www/blog/2007/gsdx9-lives"},"nextItem":{"title":"Some Testing","permalink":"/pcsx2-net-www/blog/2007/some-testing"}},"content":"It seems like our developers are on steroids, there has been so many\\nprogress in the last few days (netplay and usb keyboard support).\\n\\n\x3c!-- truncate --\x3e\\n\\nOf course betatesters do not sit still either, since **Monster Hunter**\\nis not the only game which supports online gaming. We have tried to find\\nother games supporting netplay as well.\\nBy comparing the list of netplay capable games (\\n[wiki!](http://en.wikipedia.org/wiki/List_of_PlayStation_2_network_games)\\n) with our PCSX2 compatibility list, we found that the game **XIII**\\nwould be a good candidate.\\nThe game itself is fully playable at reasonable speeds in the single\\nplayer mode.\\n\\nTrying our luck with the same dev9 plugin (netplay) did not give us the\\nresults we hoped for. Authentication went smooth however account\\ncreation kept failing over and over again.\\n\\nFortunately **gigaherz** and **drkIIRaziel** worked together trying to\\nsolve this issue. After the plugin was rewritten they managed to fix the\\nproblem.\\n\\n(hmm... that deathmatch versus drkIIRaziel went not the way as I hoped\\n\ud83d\ude1b )\\n\\n<Image cols={3} src={require(\\"./img/XIII-1a_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-1b_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-1c_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-1d_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-1e_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-1f_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-2_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-3_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-4_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-5_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-6_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-7_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-8_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-9_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-10_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-11_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-12_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-13_thumb.jpg\\").default} />\\n\\n<Image cols={3} src={require(\\"./img/XIII-14_thumb.jpg\\").default} />"},{"id":"/2007/some-testing","metadata":{"permalink":"/pcsx2-net-www/blog/2007/some-testing","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/some-testing/index.mdx","source":"@site/blog/2007/some-testing/index.mdx","title":"Some Testing","description":"Work towards PCSX2 0.9.4 continues at a steady pace! GiGaHeRz has done significant work towards USB emulation, and we now have keyboard support!","date":"2007-09-03T00:00:00.000Z","formattedDate":"September 3, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.135,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2007-09-03T00:00:00.000Z","description":"Work towards PCSX2 0.9.4 continues at a steady pace! GiGaHeRz has done significant work towards USB emulation, and we now have keyboard support!","draft":false,"tags":["devblog"],"title":"Some Testing"},"prevItem":{"title":"PCSX2 Team Unstoppable!","permalink":"/pcsx2-net-www/blog/2007/pcsx2-team-unstoppable"},"nextItem":{"title":"0.9.2 Vm Fix - Probably","permalink":"/pcsx2-net-www/blog/2007/vm-fix-probably-0-9-2"}},"content":"Work towards **PCSX2 0.9.4** continues at a steady pace! **GiGaHeRz**\\nhas done significant work towards USB emulation, and we now have\\n**keyboard support!**\\n\\n\x3c!-- truncate --\x3e\\n\\nWhen going online with PCSX2, or even a real PS2, chat and general team\\nwork requires you type to other players, thus **GiGaHeRz** was inspired\\nto work on the USB side of PS2 emulation and bring us working keyboard\\nsupport!\\n\\nYou don\'t even need a USB keyboard plugged into your PC, it can be any\\ntype of keyboard\\n\ud83d\ude0a Of course this required us to test (play) even\\nmore **Monster Hunter** together...*ahem*\\n\\nYou may be wondering why the first word in the news post is just a bunch\\nof stars? Well it seems *Capcom* like any sensible network game\\ndeveloper, censor certain words, however whilst \'testing\' PCSX2 we\\nsoon found that the word **after** is censored in the game, whats even\\nfunnier, the word *wanker* isn\'t! (gasp, swearing on news page!)\\n\\nVideo and yet more shots of our exploits, the video certainly makes me\\nchuckle \ud83d\ude08\\n\\n\x3c!-- TODO-LEGACY: FIND --\x3e\\n\x3c!-- [Do the Falc Stamp! - VIDEO\\n2.09MB](/images/stories/frontend/online/dothefalcstomp1.rar)\\n(Poor old **Falcon4ever** mwhahahar) --\x3e\\n\\n<Image cols={4} src={require(\\"./img/mhnkb_29tt.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/mhnkb_28tt.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/mhnkb_27tt.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/mhnkb_26tt.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/mhnkb_25tt.jpg\\").default} />\\n\\n\x3c!-- TODO-LEGACY: Find  --\x3e\\n\x3c!-- For more screenshots you can grab this screenshot pack (5.12 mb)\\n[here](/images/stories/frontend/online/monster_hunter_screens.rar) --\x3e"},{"id":"/2007/vm-fix-probably-0-9-2","metadata":{"permalink":"/pcsx2-net-www/blog/2007/vm-fix-probably-0-9-2","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/vm-fix-probably-0-9-2/index.mdx","source":"@site/blog/2007/vm-fix-probably-0-9-2/index.mdx","title":"0.9.2 Vm Fix - Probably","description":"Since 0.9.2\'s release, many users, mainly those who live in Brazil, have had problems running the VM version of PCSX2","date":"2007-08-24T00:00:00.000Z","formattedDate":"August 24, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.555,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-08-24T00:00:00.000Z","description":"Since 0.9.2\'s release, many users, mainly those who live in Brazil, have had problems running the VM version of PCSX2","draft":false,"tags":["devblog"],"title":"0.9.2 Vm Fix - Probably"},"prevItem":{"title":"Some Testing","permalink":"/pcsx2-net-www/blog/2007/some-testing"},"nextItem":{"title":"Bositman Wooooooooo","permalink":"/pcsx2-net-www/blog/2007/bositman-wooooooooo"}},"content":"Since 0.9.2\'s release, many users, mainly those who live in Brazil,\\nhave had problems running the VM version of PCSX2. After trialing this\\nfix on the forum for the past 6 or so months, I figured it was about\\ntime we put it on the site!\\n\\n\x3c!-- truncate --\x3e\\n\\nSo if any of you guys have enabled the permissions, logged out, then\\nback in to find it still doesn\'t work, this should be your salvation!\\n\\nUsers with Athlon XP processors or any chip without SSE2 support, this\\nisn\'t your problem. VM requires SSE2 to function correctly which is why\\nyou are getting crashes.\\n\\nIf you still have problems check [this\\nthread](http://forums.ngemu.com/pcsx2-official-forum/88368-0-9-2-vm-fix.html)"},{"id":"/2007/bositman-wooooooooo","metadata":{"permalink":"/pcsx2-net-www/blog/2007/bositman-wooooooooo","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/bositman-wooooooooo/index.mdx","source":"@site/blog/2007/bositman-wooooooooo/index.mdx","title":"Bositman Wooooooooo","description":"In our spare time, some of us do little things to amuse ourselves and others, generally involving the betatesters, the devs, or generally people who come in the IRC channel","date":"2007-08-14T00:00:00.000Z","formattedDate":"August 14, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.99,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2007-08-14T00:00:00.000Z","description":"In our spare time, some of us do little things to amuse ourselves and others, generally involving the betatesters, the devs, or generally people who come in the IRC channel","draft":false,"tags":["devblog"],"title":"Bositman Wooooooooo"},"prevItem":{"title":"0.9.2 Vm Fix - Probably","permalink":"/pcsx2-net-www/blog/2007/vm-fix-probably-0-9-2"},"nextItem":{"title":"Dynasty Warriors And Fullmetal Alchemist Videos On 0.9.4!","permalink":"/pcsx2-net-www/blog/2007/dynasty-warriors-and-fullmetal-alchemist-videos-on-0-9-4"}},"content":"In our spare time, some of us do little things to amuse ourselves and\\nothers, generally involving the betatesters, the devs, or generally\\npeople who come in the IRC channel.\\n\\n\x3c!-- truncate --\x3e\\n\\nYou may have previously seen CKemu\'s \\"Betatester Magazine\\" issues or his\\ncomic strips involving testers and developers. Well my \\"party piece\\" is\\nmaking little songs, with the help of some of our IRC chatters of\\ncourse!\\n\\nBositman is well known throughout the community, so we (being myself and\\nGB\\\\_Away) decided a while ago to make a little song in his honor, it was\\ncatchy and fun to make but i wasn\'t totally happy with the sound.\\nRecently i decided to remaster the song and redo the guitar, so for your\\nlistening pleasure i have placed it online for all to be amused!\\n\\nThe lyrics are simple but they say enough!\\n\\n\\"Bositman, Bositman, ooooooooooooo, Bositman, Bositman, Bositman,\\nBositman, BOSITMAN!, Bositman, oooooooooooooooo, Bositman, Bositman,\\nBositman, Bositman\\"\\n\\n\x3c!-- TODO - add the song? lol --\x3e\\n\x3c!-- And here in nice 320kbps 48khz MP3 format, is the song, enjoy!\\n\\nEdit by bositman: Dude,I told you it\'s not pronounced as an \\"s\\" but\\n\\"z\\"!!\\n\\n[Refraction Feat GB\\\\_Away -\\nBositman.mp3](/images/stories/frontend/devblog/Refraction_Feat_GB_Away-Bositman.mp3) --\x3e"},{"id":"/2007/dynasty-warriors-and-fullmetal-alchemist-videos-on-0-9-4","metadata":{"permalink":"/pcsx2-net-www/blog/2007/dynasty-warriors-and-fullmetal-alchemist-videos-on-0-9-4","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/dynasty-warriors-and-fullmetal-alchemist-videos-on-0-9-4/index.mdx","source":"@site/blog/2007/dynasty-warriors-and-fullmetal-alchemist-videos-on-0-9-4/index.mdx","title":"Dynasty Warriors And Fullmetal Alchemist Videos On 0.9.4!","description":"Since its summer time and nothing much goes on these days (yes the devs and testers also have lives!) I thought I\'d entertain you with some videos I recorded, showing off some of the new fixes in 0.9.4","date":"2007-08-11T00:00:00.000Z","formattedDate":"August 11, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.78,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2007-08-11T00:00:00.000Z","description":"Since its summer time and nothing much goes on these days (yes the devs and testers also have lives!) I thought I\'d entertain you with some videos I recorded, showing off some of the new fixes in 0.9.4","draft":false,"tags":["devblog"],"title":"Dynasty Warriors And Fullmetal Alchemist Videos On 0.9.4!"},"prevItem":{"title":"Bositman Wooooooooo","permalink":"/pcsx2-net-www/blog/2007/bositman-wooooooooo"},"nextItem":{"title":"Graphics Synthesizer Gpus And Dual Cores","permalink":"/pcsx2-net-www/blog/2007/graphics-synthesizer-gpus-and-dual-cores"}},"content":"Since its summer time and nothing much goes on these days (yes the devs\\nand testers also have lives!) I thought I\'d entertain you with some\\nvideos I recorded, showing off some of the new fixes in 0.9.4.\\n\\n\x3c!-- truncate --\x3e\\n\\nFirst and foremost, you\'ll notice perfect sound in both Dynasty\\nWarriors 4 Xtreme Legends and Fullmetal Alchemist 2 videos! Also,\\nFullmetal Alchemist 2 did not even boot in 0.9.3 but with the SPU2 fixes\\nin 0.9.4 the game looks playable and I\'ve already reached Chapter 2\\nwith no problems at all.Note that the videos were taken using Bilinear\\nfiltering and 4X AA and are sped up to 100% speed although they did run\\npretty near that thanks to the new ZeroGS!\\n\\nAbout progress I\'ll just say there are some new plugins in development\\nwhich have only seen null versions of until now, zeroGS 16:9 support and\\nthe new bios format getting implemented (still not complete)"},{"id":"/2007/graphics-synthesizer-gpus-and-dual-cores","metadata":{"permalink":"/pcsx2-net-www/blog/2007/graphics-synthesizer-gpus-and-dual-cores","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/graphics-synthesizer-gpus-and-dual-cores/index.mdx","source":"@site/blog/2007/graphics-synthesizer-gpus-and-dual-cores/index.mdx","title":"Graphics Synthesizer Gpus And Dual Cores","description":"It was apparent early on the project that the GS plugin was going to be a big bottleneck during 3D scenes","date":"2007-08-07T00:00:00.000Z","formattedDate":"August 7, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":4.46,"hasTruncateMarker":true,"authors":[{"name":"zerofrog","key":"zerofrog"}],"frontMatter":{"authors":["zerofrog"],"date":"2007-08-07T00:00:00.000Z","description":"It was apparent early on the project that the GS plugin was going to be a big bottleneck during 3D scenes","draft":false,"tags":["devblog"],"title":"Graphics Synthesizer Gpus And Dual Cores"},"prevItem":{"title":"Dynasty Warriors And Fullmetal Alchemist Videos On 0.9.4!","permalink":"/pcsx2-net-www/blog/2007/dynasty-warriors-and-fullmetal-alchemist-videos-on-0-9-4"},"nextItem":{"title":"2 New Plugins For Download","permalink":"/pcsx2-net-www/blog/2007/2-new-plugins-for-download"}},"content":"It was apparent early on the project that the GS plugin was going to be\\na big bottleneck during 3D scenes. It isn\'t that the GS plugin itself\\ndoes a lot of computation on the CPU, but the fact that it needs to\\ncommunicate with the graphics card means that unnecessary stalls will\\noccur in the graphics driver as the GPU and CPU are synchronized. During\\nthese stalls, the CPU basically goes to lunch until the GPU is ready.\\nGraphics drivers and libraries are aware of this and try as little as\\npossible to communicate with the graphics card. They usually cache\\nrender state changes, shader changes, and texture changes up until\\nactual geometry is rendered. They also take advantage of FIFOs (first in\\nfirst out buffers). The CPU just writes to the FIFO and the GPU just\\nreads from it, this makes all the difference in terms of keeping the GPU\\nactive while the CPU isn\'t and vise versa.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe biggest challenge when designing games and hardcore applications\\nthat need to use the GPU to its full potential is to make sure that\\ngraphics driver stalls are minimal **at all costs** . What kills games\\nisn\'t sending geometry down the graphics pipeline, but it is when render\\ntargets are switched, render targets are used as textures in the next\\ndraw call, textures are locked, and when render targets are transferred\\nfrom GPU memory to CPU memory (in the last case, the CPU not only goes\\nto lunch, but has dinner also). GPU optimization talks usually appear in\\nevery Game Developers Conference and there are many papers on them on\\nthe net, so there is a lot more to the story than written here.\\n\\nAll this means is that single-threaded applications really need to\\ndesign their GPU algorithms well to see fast frame rates. This\\nunfortunately is not possible with Pcsx2 and the GS plugin. The GS\\nplugin has to draw geometry in the same order as it was received. This\\nkills almost all caching techniques used by modern games because the GS\\nand PC GPUs have very different performance bottlenecks. In modern GPUs,\\nit is advantageous to group as much geometry as possible in one draw\\ncall. The GS doesn\'t suffer from such bottlenecks. The GS also has two\\ndifferent contexts which makes things twice as difficult. ZeroGS can\\nonly do a limited amount of work-arounds before compatibility starts\\ndropping, so the only other option is to try to multithread the GS. Note\\nthat using graphics libraries from multiple threads is not a trivial\\ntask.\\n\\nFortunately, the GS plugin is very unique in its nature. 99% of the\\ncommunication that happens between the GS plugin and the rest of the\\nsystems components happens in the direction to the GS. The only times\\nthe EE needs to synchronize with the GS is when it reads back the\\nFINISH/SIGNAL registers and part of the 4Mb GS memory. Register\\nreadbacks are used frequently, so this suggests that tight\\nsynchronization will be needed with the GS. The GS memory readbacks\\naren\'t as frequent; however, they require some special considerations\\nwith Virtual Memory and DMAs. The rest of the 99% of communication that\\ngoes to the GS happens with a GS FIFO.\\n\\nWhen first started, Pcsx2 creates a GS thread and reserves special\\nmemory for the GS FIFO. The GS plugin then creates the Direct3D\\ndevice/GL context **only for that thread** . Then when the game runs,\\nthe EE copes all its GS packets to the FIFO and then notifies the GS\\nthread. The GS thread then checks if the FIFO has data, and then sends\\nit to the GS plugin. This sounds easier than it actually is because very\\ntight synchronization needs to happen to make sure no overwriting occurs\\nin the FIFO. The FINISH/SIGNAL register synchronization actually doesn\'t\\nhappen across the EE and GS thread boundaries. Instead the EE thread\\npeeks at all the packets ahead of time and handles it in its own\\nroutines.\\n\\nWhat makes the \\"Dual Core\\" option special is the notifies part of the\\nlast explanation. The GS thread can either sleep waiting for a\\nnotification from EE, which can be done by WaitForSingleObject and\\nSetEvent functions. Or it can continually check if the GS FIFO is empty\\nwithout ever stopping. The latter option kills single cores but goes\\nmuch faster on dual cores. The results of clicking on the MTGS and DC\\noptions on dual cores are phenomenal. Usually frame rates go up or even\\nsurpass 2x.\\n\\nMultithreading in games is going to be very big in the future. The times\\nhave passed when there is one CPU that does everything and one GPU that\\njust renders. The biggest problem is which game processing to divide\\ninto which thread, and how these threads will communicate with each\\nother. Many of these issues are still open and current game companies\\nare struggling with the added complication of concurrent execution.\\n\\n**Moral of the blog** - GPUs have become so powerful that people are\\nstaring to do tasks like stereo vision and general purpose computation\\nwith them. Learn how to use them. I recommend ***ShaderX3: Advanced\\nRendering with DirectX and OpenGL*** by Wolfgang Engel and ***GPU Gems\\n2: Programming Techniques for High-Performance Graphics and\\nGeneral-Purpose Computation*** by Matt Pharr, Randima Fernando, and the\\n20+ researchers that contributed to it."},{"id":"/2007/2-new-plugins-for-download","metadata":{"permalink":"/pcsx2-net-www/blog/2007/2-new-plugins-for-download","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/2-new-plugins-for-download/index.mdx","source":"@site/blog/2007/2-new-plugins-for-download/index.mdx","title":"2 New Plugins For Download","description":"Okay, they aren\'t new, they have been on NGemu a while, but they have been getting some good support from the community and i felt they needed adding to the official site","date":"2007-07-22T00:00:00.000Z","formattedDate":"July 22, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.415,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-07-22T00:00:00.000Z","description":"Okay, they aren\'t new, they have been on NGemu a while, but they have been getting some good support from the community and i felt they needed adding to the official site","draft":false,"tags":["devblog"],"title":"2 New Plugins For Download"},"prevItem":{"title":"Graphics Synthesizer Gpus And Dual Cores","permalink":"/pcsx2-net-www/blog/2007/graphics-synthesizer-gpus-and-dual-cores"},"nextItem":{"title":"PCSX2 Magazine Appearance","permalink":"/pcsx2-net-www/blog/2007/pcsx2-magazine-appearance"}},"content":"Okay, they aren\'t new, they have been on NGemu a while, but they have\\nbeen getting some good support from the community and i felt they needed\\nadding to the official site!!\\n\\n\x3c!-- truncate --\x3e\\n\\nDue to the hard work of **Rebel_X** and **ChickenLiver** from the PCSX2\\nforums, we are proud to present **LilyPad** and **TwinPad** plugins,\\nwhich both allow keyboard users to have full use of the analog sticks!\\nI\'m sure you will enjoy them as much as the forum users have."},{"id":"/2007/pcsx2-magazine-appearance","metadata":{"permalink":"/pcsx2-net-www/blog/2007/pcsx2-magazine-appearance","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/pcsx2-magazine-appearance/index.mdx","source":"@site/blog/2007/pcsx2-magazine-appearance/index.mdx","title":"PCSX2 Magazine Appearance","description":"Recently PCSX2 has made its second appearance in the Italian magazine - The Games Machine","date":"2007-07-01T00:00:00.000Z","formattedDate":"July 1, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.86,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-07-01T00:00:00.000Z","description":"Recently PCSX2 has made its second appearance in the Italian magazine - The Games Machine","draft":false,"tags":["devblog"],"title":"PCSX2 Magazine Appearance"},"prevItem":{"title":"2 New Plugins For Download","permalink":"/pcsx2-net-www/blog/2007/2-new-plugins-for-download"},"nextItem":{"title":"Bios Dumper V2.0","permalink":"/pcsx2-net-www/blog/2007/bios-dumper-v2-0"}},"content":"Recently **PCSX2** has made its second appearance in the Italian\\nmagazine - *The Games Machine* . It\'s great to see PCSX2 getting\\nmention in publications, and we thought we\'d share the article with\\nyou!\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you can read Italian, you can click on the thumbnail to the left and\\nread it yourself, for those of you who can\'t read Italian, a rough\\ntranslation is below (Made by a friend of the PCSX2 team!):\\n\\n*\\"Some time ago we talked about PS2 emulation and we mentioned that\\nPCSX2 had made a lot of progress, but that it was still impossible to\\n\\"play\\".\\n\\nThings have changed a lot and now PCSX2, that is the result of more than\\n2 years of developing, is the only emulator that can emulate the PS2 in\\na good way. The hardware requirements are very high, we are talking\\nabout an Intel E6600 or an equivalent AMD, 1 GB of ram and a video card\\nwith full support of Pixel Shader 2.0.\\n\\nThe requirements are very high but not absurd if you are thinking a bout\\nan upgrade to Windows Vista. PCSX2, the latest release 0.9.2, is based\\non some plugins which emulate the functions of PCSX2.\\n\\nOn the official site of the project ( <http://pcsx2.net> ) you can find\\na very complete guide to the use of the emu. Personally, I can recommend\\nyou the new ZeroGS 0.96.0 (a video plugin). It\'s a plugin which works\\nvery well only with newer graphics cards. There are specific plugins\\njust for audio,controller, USB and for Firewire emulation. There are\\nalso a lot of CDVD plugins.\\n\\nIf you want to use PCSX2 you must have a \\"real ps2\\" and its bios. You\\ncan obtain it dumping it from your ps2 (any other way is against the\\nlaw).\\n\\nPCSX2 is compatible with a lot of famous games like: GTA San Andreas,\\nDevil May Cry 3, Final Fantasy X... The framerate is very low on a lot\\nof PC\'s but buying a very powerful pc, the framerate problem is going\\nto end in the coming months.\\n\\nAt the end PCSX2 is a very good product and it\'ll have for sure an\\nevolution thanks to the hardware evolution.\\"*\\n\\n<Image cols={6} src={require(\\"./img/pcsx2tgmt.jpg\\").default} />"},{"id":"/2007/bios-dumper-v2-0","metadata":{"permalink":"/pcsx2-net-www/blog/2007/bios-dumper-v2-0","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/bios-dumper-v2-0/index.mdx","source":"@site/blog/2007/bios-dumper-v2-0/index.mdx","title":"Bios Dumper V2.0","description":"Florin has just released BIOS Dumper v2.0","date":"2007-06-30T00:00:00.000Z","formattedDate":"June 30, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.815,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2007-06-30T00:00:00.000Z","description":"Florin has just released BIOS Dumper v2.0","draft":false,"tags":["devblog"],"title":"Bios Dumper V2.0"},"prevItem":{"title":"PCSX2 Magazine Appearance","permalink":"/pcsx2-net-www/blog/2007/pcsx2-magazine-appearance"},"nextItem":{"title":"Erm What Just Happened","permalink":"/pcsx2-net-www/blog/2007/erm-what-just-happened"}},"content":"**Florin** has just released **BIOS Dumper v2.0**\\n\\n\x3c!-- truncate --\x3e\\n\\nThis program will dump the PS2 BIOS, DVD Player ROM, NVM etc from your\\nPlayStation 2 via a \'host\' enabled connection.\\n\\nPCSX2 0.9.4 will be using the new format BIOS (*.p2b) created by **BIOS\\nDumper v2.0** , as it dumps a more \\"complete\\" copy of the BIOS. It is\\n**highly** recommended that you redump your BIOS to get a more complete\\ndump and thus enable PCSX2 to more accurately emulate the PlayStation 2\\n\\nYou won\'t need to throw away your old BIOS files, as a convertor will\\nbe released in the future to convert the older format to **P2B** .\\nConversion is no substitute for a redump as converted BIOS\'s will\\n**not** contain the new information dumped from **BIOS Dumper v2.0** .\\n\\n**EDIT** : If you have downloaded **before** 30d 6m 2007y @ 20:11 GMT+0,\\nor are having problems making the p2b file, please redownload the files\\nprovided, as they have been updated!"},{"id":"/2007/erm-what-just-happened","metadata":{"permalink":"/pcsx2-net-www/blog/2007/erm-what-just-happened","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/erm-what-just-happened/index.mdx","source":"@site/blog/2007/erm-what-just-happened/index.mdx","title":"Erm What Just Happened","description":"Testing can be a comical affair!","date":"2007-06-06T00:00:00.000Z","formattedDate":"June 6, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.635,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2007-06-06T00:00:00.000Z","description":"Testing can be a comical affair!","draft":false,"tags":["devblog"],"title":"Erm What Just Happened"},"prevItem":{"title":"Bios Dumper V2.0","permalink":"/pcsx2-net-www/blog/2007/bios-dumper-v2-0"},"nextItem":{"title":"Zero Eater!","permalink":"/pcsx2-net-www/blog/2007/zero-eater"}},"content":"Testing can be a comical affair!\\n\\n\x3c!-- truncate --\x3e\\n\\nFor instance **Katamari Damacy** , the poor little pint sized prince\\nkept on falling through the universe, even better is the King would keep\\napologizing for a *Royal Warp* and return the prince to a new location,\\nonly for it to happen again.\\n\\n**Metal Gear Solid 3** suffers(ed) from a similar problem, Snake would\\nsuddenly drop though an invisible hole, causing the classic \\"Snake, are\\nyou alright? snake? SNAKE!!!\\"\\n\\n**Final Fantasy X** still suffers from characters getting placed the\\nwrong way around, so they run away from the monster, smite it and\\nsomehow return to the same position. **WipeOut Fusion** also suffers\\nfrom things going backwards, every ship gets placed the wrong way\\naround, and the AI along with you have to turn around before they can\\nrace!\\n\\n**Tekken Tag** has *Squishy Head Syndrome* , you kick a character in the\\nface and your head goes perfectly flat, suddenly \\"anything but the\\nface!!\\" takes on an entire new meaning!\\n\\nOver the course of testing for PCSX2 the team has encountered thousands\\nupon thousands of bugs, but despite popular belief that all bugs are\\ngraphical, many of these bugs are much more bizarre. In fact the PCSX2\\nproject may have released many a fine video demonstrating progress, we\\ncould have released an epic film trilogy of *bloopers* by now.\\n\\nNow admittedly finding a bug requires the tester to try hundreds of\\nprogram combinations (plugins, recompilers settings, debug options etc),\\nmake long debug logs and attempt to find the bug in the debugger or\\ntrace the origin of the bug if it\'s a regression, but sometimes just\\nwatching the bug makes it all worthwhile!\\n\\nI fondly remember the *linuz.naked\\\\_bug();* , where characters in\\n**Street Fighter EX3** would be missing clothes - specifically the women\\nmissing skirts. Or how about every character in **Final Fantasy X**\\nbeing Tidus, yes folks **EVERY** character, from enemies, to people\\nwalking around, nothing like hearing the pretty girl-boy with Yuna\'s\\nvoice!\\n\\nSometimes It\'s tempting to suggest we add an option to the emulator to\\n\\"re-create\\" these bugs, from totally missing collision detection, AI\\ngoing berserk, to people floating upside down, but alas we\'re here to\\nemulate the PS2, not our goofs.\\n\\nSo next time you think of emulation bugs, do not assume they\'re always\\ngraphical, or some complex mind boggling bug that causes the game to do\\nnothing - sometimes, just sometimes there\'s a poor unshaven tester in a\\ndarkened room, covered in coffee that they\'ve just spat out because Lara\\nCrofts boobs have just exploded, or Gran Turismo cars have just\\ndeveloped anti gravity drives!\\n\\nSo as a rare treat, and somewhat a prelude to current **Work in Progress**, here\'s a game with some of it\'s bugs intact!\\n\\n**Katamari Damacy** - Status at time of writing: **Ingame**\\n\\nList of testing **notes**:\\n\\n-   Floor Bug, seems the textures they use to do floor detail are\\nlayered? (zBuffer)\\n-   Object clipping bugs (walls etc).\\n-   Katamari Mask? (the circle around the katamari, perhaps used to cull\\nobjects under the outer layer of what you have collected?).\\n-   Stuck on pillar, can\'t go anywhere bug! (Level 3)."},{"id":"/2007/zero-eater","metadata":{"permalink":"/pcsx2-net-www/blog/2007/zero-eater","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/zero-eater/index.mdx","source":"@site/blog/2007/zero-eater/index.mdx","title":"Zero Eater!","description":"Refraction, what have you done? You\'ve changed history. You\'ve created a Time Paradox!","date":"2007-06-01T00:00:00.000Z","formattedDate":"June 1, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.535,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2007-06-01T00:00:00.000Z","description":"Refraction, what have you done? You\'ve changed history. You\'ve created a Time Paradox!","draft":false,"tags":["devblog"],"title":"Zero Eater!"},"prevItem":{"title":"Erm What Just Happened","permalink":"/pcsx2-net-www/blog/2007/erm-what-just-happened"},"nextItem":{"title":"PCSX2 Video Crazy","permalink":"/pcsx2-net-www/blog/2007/pcsx2-video-crazy"}},"content":"*Refraction, what have you done? You\'ve changed history. You\'ve\\ncreated a Time Paradox!*\\n\\n\x3c!-- truncate --\x3e\\n\\n**Real Time Clock** (RTC) has been recently implemented by *Refraction*\\n. PCSX2 now takes the current system time from your OS and inserts the\\nvalue into PCSX2 upon launch, from that point onwards the emulated RTC\\ncounts independently from the OS.\\n\\nSo? you wonder, well apart from the BIOS now displaying the correct time\\nand date - you would think this is a minor addition to PCSX2, nothing\\nmore than an addition to authenticity? Well you\'re in for a surprise!\\n\\nIt struck me when talking to *Refraction* over a cup of coffee, **Metal\\nGear Solid 3** uses system time for various *fun* aspects of the game -\\nSuch as being able to kill *The End* from old age if you set the RTC 1\\nyear ahead after saving during the battle.\\n\\n**Metal Gear Solid 3** had never done anything under PCSX2, so with the\\nRTC addition to PCSX2 in mind, I popped the disc into my drive, and\\neureka it booted!! This however was only the beginning of an epic saga\\nbetween *Zerofrog* and the *Konami programmers* !\\n\\n*Zerofrog* has spent days wrestling with *Konami\'s* ability to push the\\nPS2 hardware to its limits by making **zeroGS KOSMOS** push the limits\\nof GPU\'s, *Metal Gear Solid 3* certainly loves its post processing! Not\\nonly has he managed to get the game looking ..well from absolute garbage\\nto gorgeous, he\'s also managed to stop *Snake* from slipping through\\nholes in the universe instantly.\\n\\nThe game still has issues, *Snake* still manages to find holes in the\\nuniverse (falls through geometry), and he still likes to get stuck\\ninside trees, rocks or just teleport off the edge of the world (the\\nvideo demonstrates the latter beautifully!). The game also still suffers\\nfrom visual issues, such as missing textures and the specular lighting\\noverlay being drawn wrong, hopefully by the time the next incarnation of\\nPCSX2 comes out, these issues will be **mostly** resolved.\\n\\nSo to celebrate this game going from nothing to ingame and the\\nchallenges it threw at us, we\'re releasing a video and **63** shots!\\nNot all 63 are here though, General Emulation run by our betatester\\n**General Plot** has 31 exclusive shots, so head there for the rest!\\n\\nAll this maybe great news (especially for MGS fans), but there is more,\\nyou may have noticed the nothing status games have been decreasing\\nsteadily and the playable count is going up on our [on site\\ncompatibility list](/compat) , including some rather\\nnice games...and there is a new plugin coming up...but you\'ll have to\\nwait!\\n\ud83d\ude09\\n\\nNow enjoy the video which you can grab from here (it\'s a torrent so\\nplease seed, and check out our other torrented videos here)\\n\\nClick on the thumbnails below to see larger versions of each image, and\\nhead over to General Emulation for the rest!\\n\\n<Image cols={3} src={require(\\"./img/mgs3_04t.jpg\\").default} />\\n<Image cols={3} src={require(\\"./img/mgs3_14t.jpg\\").default} />\\n<Image cols={3} src={require(\\"./img/mgs3_18t.jpg\\").default} />\\n<Image cols={3} src={require(\\"./img/mgs3_43t.jpg\\").default} />\\n\\n\x3c!-- **[More screens\\nhere](/images/stories/frontend/zeroeater/mgs3_screens_news.rar)** --\x3e"},{"id":"/2007/pcsx2-video-crazy","metadata":{"permalink":"/pcsx2-net-www/blog/2007/pcsx2-video-crazy","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/pcsx2-video-crazy/index.mdx","source":"@site/blog/2007/pcsx2-video-crazy/index.mdx","title":"PCSX2 Video Crazy","description":"PCSX2 is perhaps one of the few projects that releases a constant series of videos demonstrating development progress","date":"2007-05-04T00:00:00.000Z","formattedDate":"May 4, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.97,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2007-05-04T00:00:00.000Z","description":"PCSX2 is perhaps one of the few projects that releases a constant series of videos demonstrating development progress","draft":false,"tags":["devblog"],"title":"PCSX2 Video Crazy"},"prevItem":{"title":"Zero Eater!","permalink":"/pcsx2-net-www/blog/2007/zero-eater"},"nextItem":{"title":"We\'Re Busy....K!","permalink":"/pcsx2-net-www/blog/2007/we-re-busy-k"}},"content":"**PCSX2** is perhaps one of the few projects that releases a constant\\nseries of videos demonstrating development progress, and whilst I\'m not\\n100% sure on this, I believe the only emulator to have had two \\"promo\\"\\nvideos demonstrating that yes indeed, PS2 emulation is possible!\\n\\n\x3c!-- truncate --\x3e\\n\\nThese videos are delivered to you via **Bit Torrent**, which for an emulation\\nsite is somewhat unique. In fact so \\"odd\\", I\'ve had emails asking me if\\nthe use of Bit Torrent is legal, surprisingly Bit Torrent can and is\\nused for legal distribution!\\n\\nYou might wonder why such \\"promo\\" videos are made, it\'s somewhat\\nunorthodox, well aside from the fact they are good fun to make, they\\nserve to demonstrate what this project is doing as many people still\\ndon\'t believe that this is even possible!\\n\\nHow are these videos made? Simple!\\n\\nWhen using *zeroGS* you merely have to press **F7** to start recording\\nto your preferred codec, you then press F7 to stop recording, at this\\npoint you can just quit the emulator and marvel at your video, or you\\ncan keep playing! Press F7 again to add more footage to your video, and\\nagain press F7 to stop recording, this will produce one video based on\\nwhere you stop/start recording.\\n\\n*zeroGS* automatically speeds up footage to \\"normal\\" speeds, which\\ncauses issues if you want to record audio in sync with the video\\nfootage. *P.E.Op.S SPU2 DSound Driver* records at \\"emulated\\" speed and\\nif the recording was muxed with the video recording, it would be\\nsignificantly out of sync.\\n\\nHowever, you can get around this issue by disabling MTGS / DC modes from\\nthe CPU settings dialog, and setting *P.E.Op.S SPU2 DSound Driver* to\\n**Thread Mode** . To *ensure* sync with the video, set *P.E.Op.S SPU2\\nDSound Driver* to start recording **before** you confirm the codec you\\nwish to record with.\\n\\nYou then can put the audio and video streams together in your preferred\\nvideo editing software, for simple tasks like this I recommend\\n[VirtualDub](http://www.virtualdub.org/) .\\n\\nThe ability to record video directly from a PS2 game has significant\\nbenefits over camcorder or TV card recording as you can get fantastic\\nquality at higher resolutions than the PS2 can natively output.\\n\\nFor the gaming enthusiast it lends itself nicely to demonstrating how\\nkick-ass you are at a game, or lets you demonstrate secret areas,\\nadvanced combos.\\n\\n[YouTube](http://www.youtube.com) obviously offers a space to share such\\nvideos, and many people from all over the world already show fantastic\\nvideos from PCSX2, even the team use YouTube as a low bandwidth option\\nto our high quality torrented videos.\\n\\n[YouTube](http://www.youtube.com) is also used by some testers to\\ndemonstrate intermediate work, and this videos are normally only shown\\non the [official forums](http://forums.pcsx2.net) as a bonus to our\\nforum browsers, an example of this would be the following video\\ndemonstrating *Final Fantasy XII* no longer suffering from vanishing\\ntext\\n\\n\x3c!-- TODO - embed video links were lost! --\x3e\\n\\nSo go on! Search [YouTube](http://www.youtube.com) for \\"PCSX2\\" and check\\nout what our users are posting! I personally get a great deal of\\npleasure from seeing this emulator being enjoyed and used.\\n\\nIf you feel inclined why not record your awesome combo powa\'s, or you\\ndefeating some insanely tough boss and then place them on\\n[YouTube](http://www.youtube.com) .\\n\\nIf something catches our eye, you may just get a honorable mention here!\\n\\n**Latest Development Video - Kingdom Hearts II**\\n\\n\\n\\n\\n\\n**Resident Evil 4 - Pervert (RPGWizard)**\\n\\n\\n\\n\\n\\n**FFX-2 Secret Ending (NexXxus86)**\\n\\n\\n\\n\\n\\n**PCSX2 Developers 0 - 1 Betatesters**\\nNothing to do with PCSX2, but testers RULE KTHX! HIHI\\n\\n\\n![](./img/pcsx2-video-crazy.jpg)"},{"id":"/2007/we-re-busy-k","metadata":{"permalink":"/pcsx2-net-www/blog/2007/we-re-busy-k","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/we-re-busy-k/index.mdx","source":"@site/blog/2007/we-re-busy-k/index.mdx","title":"We\'Re Busy....K!","description":"Busy is certainly one way to describe PCSX2 development currently!","date":"2007-04-27T00:00:00.000Z","formattedDate":"April 27, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.23,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2007-04-27T00:00:00.000Z","description":"Busy is certainly one way to describe PCSX2 development currently!","draft":false,"tags":["devblog"],"title":"We\'Re Busy....K!"},"prevItem":{"title":"PCSX2 Video Crazy","permalink":"/pcsx2-net-www/blog/2007/pcsx2-video-crazy"},"nextItem":{"title":"Refraction Path 3","permalink":"/pcsx2-net-www/blog/2007/refraction-path-3"}},"content":"*Busy* is certainly one way to describe PCSX2 development currently!\\n\\n\x3c!-- truncate --\x3e\\n\\nProgress on **PCSX2 0.9.4** is coming along nicely with several members\\nof the team making some significant additions to the project!\\n\\n**Zerofrog** has fixed the SPS (Spikey Polygon Syndrome) that plagued\\n*Kingdom Hearts 2* , making the game much more viewable and **almost**\\nplayable!\\n\\nTo demonstrate this, below are 10 **High Quality** shots from various\\nareas of the game, but take special note when viewing the\\nimages...why?\\n\\nZeroGS development has also continued during this hectic time, and those\\nof you with great GPU\'s can enjoy 8x and 16x render target (referred to\\nas AA within the plugin).\\n\\n**Saqib** has recently been working hard on memory card issues, testing\\nis still under way however thanks to his work games like *Phantasy Star\\nUniverse* are now getting ingame and the ever popular *Resident Evil 4*\\ncan now load saves, and if all goes to plan - save to!\\n\\n**Refraction** is also busy and after his success with **Path 3** work\\nhas turned his attention to other issues, thanks to his work *Tekken 5*\\nis now getting ingame! Currently *Tekken 5* can\'t be classed as\\nplayable as characters are totally lacking in the Y dimension!\\n\\nPlenty more where all this came from...watch this space!\\n\\n**Kingdom Hearts 2**\\n\\n<Image cols={6} src={require(\\"./img/TN_KHII_01.jpg\\").default} />\\n<Image cols={6} src={require(\\"./img/TN_KHII_02.jpg\\").default} />\\n\\n**Resident Evil 4**\\n\\n<Image cols={6} src={require(\\"./img/tRE4_01.jpg\\").default} />\\n<Image cols={6} src={require(\\"./img/tRE4_02.jpg\\").default} />\\n\\n**Tekken 5**\\n\\n<Image cols={6} src={require(\\"./img/tT5_01.jpg\\").default} />\\n<Image cols={6} src={require(\\"./img/tT5_02.jpg\\").default} />"},{"id":"/2007/refraction-path-3","metadata":{"permalink":"/pcsx2-net-www/blog/2007/refraction-path-3","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/refraction-path-3/index.mdx","source":"@site/blog/2007/refraction-path-3/index.mdx","title":"Refraction Path 3","description":"Whilst the Linux users out there get to enjoy PlayStation 2 emulation for the first time in awhile with PCSX2 0.9.3, I\'m sure both Windows and Linux users wonder what lies in store with PCSX2 0.9.4","date":"2007-04-13T00:00:00.000Z","formattedDate":"April 13, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.47,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2007-04-13T00:00:00.000Z","description":"Whilst the Linux users out there get to enjoy PlayStation 2 emulation for the first time in awhile with PCSX2 0.9.3, I\'m sure both Windows and Linux users wonder what lies in store with PCSX2 0.9.4","draft":false,"tags":["devblog"],"title":"Refraction Path 3"},"prevItem":{"title":"We\'Re Busy....K!","permalink":"/pcsx2-net-www/blog/2007/we-re-busy-k"},"nextItem":{"title":"And The Sources Follow","permalink":"/pcsx2-net-www/blog/2007/and-the-sources-follow"}},"content":"Whilst the Linux users out there get to enjoy PlayStation 2 emulation\\nfor the first time in awhile with **PCSX2 0.9.3** , I\'m sure both\\nWindows and Linux users wonder what lies in store with **PCSX2 0.9.4**.\\n\\n\x3c!-- truncate --\x3e\\n\\nFirst off, before I get to the seductive eye candy, a small but\\n*important* note for our Brazilian users:\\n\\nThe VM (PCSX2 Virtual Memory Build) issues under Windows XP you have\\nexperienced with **PCSX2 0.9.2** have been fixed in **0.9.4** thanks to\\nsome work by Refraction.\\n\\nI dare say the term \\"Path 3\\" doesn\'t mean a great deal to most of the\\npeople visiting this site, however \\"Path 3\\" is part of GS/GIF (the\\ninterface for GS) and is often used in the handling of textures and\\nenvironment effects.\\n\\nRefraction has been doing a great deal of research / coding with regards\\nto path 3. Many games now are **no longer** suffering from garbage\\ntextures, texture flicker and other miscellaneous issues.\\n\\nWhilst these fixes have **far reaching** effects, from games no longer\\ndisplaying \\"split-repeating IPU\\" (multiple copies of the same frame on\\nscreen), to subtle fixes like *Final Fantasy 12* having fixed menu\\nbackgrounds, below is a selection of shots from games that have seen\\ndramatic improvement! **Click on Image to See Larger Version!**\\n\\n-   And1 Streetball\\n-   Bloody Roar 4\\n-   Bomberman Hardball\\n-   Burnout 2 - Point of Impact\\n-   Grand Theft Auto - San Andreas\\n-   Lemmings\\n-   Metal Slug 3D\\n-   Need for Speed Carbon\\n-   Need for Speed Most Wanted\\n-   Street Racing Syndicate\\n-   Swords of Destiny\\n-   The Fast and The Furious - Tokyo Drift\\n-   The Punisher\\n-   Torino 2006\\n\\n<Image cols={3} src={require(\\"./img/t_and11.jpg\\").default} />\\n<Image cols={3} src={require(\\"./img/t_bomber1.jpg\\").default} />\\n<Image cols={3} src={require(\\"./img/t_bomber2.jpg\\").default} />\\n<Image cols={3} src={require(\\"./img/t_br1.jpg\\").default} />"},{"id":"/2007/and-the-sources-follow","metadata":{"permalink":"/pcsx2-net-www/blog/2007/and-the-sources-follow","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/and-the-sources-follow/index.mdx","source":"@site/blog/2007/and-the-sources-follow/index.mdx","title":"And The Sources Follow","description":"It took only a couple of hours to convince us that it is impossible to make a Linux release without also releasing the source","date":"2007-04-01T00:00:00.000Z","formattedDate":"April 1, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.225,"hasTruncateMarker":true,"authors":[{"name":"zerofrog","key":"zerofrog"}],"frontMatter":{"authors":["zerofrog"],"date":"2007-04-01T00:00:00.000Z","description":"It took only a couple of hours to convince us that it is impossible to make a Linux release without also releasing the source","draft":false,"tags":["devblog"],"title":"And The Sources Follow"},"prevItem":{"title":"Refraction Path 3","permalink":"/pcsx2-net-www/blog/2007/refraction-path-3"},"nextItem":{"title":"The Penguin Returns - 0.9.3 Linux Release","permalink":"/pcsx2-net-www/blog/2007/the-penguin-returns-0-9-3-linux-release"}},"content":"It took only a couple of hours to convince us that it is impossible to\\nmake a Linux release without also releasing the source. For those people\\nthat had problems with the binaries, they can now go to our\\ndownloads and compile\\ntheir own executables! Hopefully this will resolve all the random\\ncrashes and exceptions. Note that the [**Cg\\nToolkit**](http://developer.nvidia.com/object/cg_toolkit.html)\\nis required for successful compilation. To compile everything type\\n\\n\x3c!-- truncate --\x3e\\n\\n> sh build.sh all\\n\\nat the root SVN directory. Look at the INSTALL file in the root\\ndirectory for more options.\\n\\nPlease keep in mind that the graphics in linux are a little lacking due\\nto an incomplete ZeroGS OpenGL plugin. Anti-aliasing and hardcore\\ngraphics have not been tested thoroughly; however, the linux builds are\\nstill very good. From the tests we\'ve done, performance and features\\nare pretty much the same when compared to the Windows version... which\\nis a tremendous leap for pcsx2. A lot of time was put in to make this\\nrelease possible.\\n\\n**Windows Users** : You can similarly compile your own binaries if you\\nare curious what the team has been up to lately. We will not be\\nofficially supporting any windows specific bugs or compilation problems\\nfrom 0.9.3. 0.9.3 is specifically meant for linux.\\n\\n**Beryl users** : Turn it off or otherwise pcsx2 will go very slow.\\n\\nSome final words: try not to have any Linux vs Windows or x86 vs x86-64\\nrecompiler wars until 0.9.4 comes out."},{"id":"/2007/the-penguin-returns-0-9-3-linux-release","metadata":{"permalink":"/pcsx2-net-www/blog/2007/the-penguin-returns-0-9-3-linux-release","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/the-penguin-returns-0-9-3-linux-release/index.mdx","source":"@site/blog/2007/the-penguin-returns-0-9-3-linux-release/index.mdx","title":"The Penguin Returns - 0.9.3 Linux Release","description":"Well linux users, we promised we\'d have you back and here is the living breathing proof","date":"2007-04-01T00:00:00.000Z","formattedDate":"April 1, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.11,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-04-01T00:00:00.000Z","description":"Well linux users, we promised we\'d have you back and here is the living breathing proof","draft":false,"tags":["devblog"],"title":"The Penguin Returns - 0.9.3 Linux Release"},"prevItem":{"title":"And The Sources Follow","permalink":"/pcsx2-net-www/blog/2007/and-the-sources-follow"},"nextItem":{"title":"The Pressure Is On!","permalink":"/pcsx2-net-www/blog/2007/the-pressure-is-on"}},"content":"Well linux users, we promised we\'d have you back and here is the living\\nbreathing proof!\\n\\n\x3c!-- truncate --\x3e\\n\\nAlong with this release you have a couple of new plugins exclusively!\\n\\n-   **ZeroPAD** - New pad plugin based off Twinpad, PADWinkeyb and\\nSSSPSX Pad.\\n-   **ZeroGS OGL** - An OpenGL conversion of ZeroGS. No more GSSoft for\\nyou\ud83d\ude09\\n\\nYou also have available a 32bit and 64bit build for your pleasure, we do\\nspoil you sometimes! Take note the 64bit version is far from finished!\\nThe next release will be much quicker than the current\\nimplementation...\\n\\n**WINDOWS USERS** :- I have some bad news for you, there will be no\\n0.9.3 for windows, **BUT** Before you go crying to mummy that we\'ve\\nbeen picking on you, you will see 0.9.4 very soon, we have some 64bit\\nbugs in windows to sort out, along with some excellent fixes for games\\nsuch as **Grand Theft Auto - San Andreas** so it will be worth the\\nwait.\\n\\nAs a consolation, if you are in to Dreamcast emulation, the long awaited\\n**nullDC** has just been released, you can grab it\\n[here](http://forums.ngemu.com/nulldc-forum/87533-nulldc-v1-0-0-public-beta-1-a.html)\\n\\nJust to excite you a little more, here are a few shots I\'ve taken with\\nsome of the new fixes for 0.9.4. Enjoy \ud83d\ude0a\\n\\n<Image cols={4} src={require(\\"./img/Grandia2t.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/GTASAt.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/NFSCarbont.jpg\\").default} />"},{"id":"/2007/the-pressure-is-on","metadata":{"permalink":"/pcsx2-net-www/blog/2007/the-pressure-is-on","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/the-pressure-is-on/index.mdx","source":"@site/blog/2007/the-pressure-is-on/index.mdx","title":"The Pressure Is On!","description":"Just a quick note to let you guys know i have just uploaded a modified version of **SSSPSX Pad 1.7** to change how its pressure sensitive buttons work","date":"2007-03-09T00:00:00.000Z","formattedDate":"March 9, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.505,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2007-03-09T00:00:00.000Z","description":"Just a quick note to let you guys know i have just uploaded a modified version of **SSSPSX Pad 1.7** to change how its pressure sensitive buttons work","draft":false,"tags":["devblog"],"title":"The Pressure Is On!"},"prevItem":{"title":"The Penguin Returns - 0.9.3 Linux Release","permalink":"/pcsx2-net-www/blog/2007/the-penguin-returns-0-9-3-linux-release"},"nextItem":{"title":"Work in progress","permalink":"/pcsx2-net-www/blog/2007/work-in-progress"}},"content":"Just a quick note to let you guys know i have just uploaded a modified\\nversion of **SSSPSX Pad 1.7** to change how its pressure sensitive\\nbuttons work. If you play games such as **Final Fantasy XII** and **Gran\\nTurismo 3** , you will know on the current release you have to press\\nX+R2 O+L1 etc, well not anymore\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nYou can find this release in the Download section.\\n\\nBig thanks goes out to Nagisa for this excellent plugin and i hope you\\nwill consider using this pressure style in future releases instead of\\nthe 2-Button combos\ud83d\ude09\\n\\nEnjoy\\nRefraction"},{"id":"/2007/work-in-progress","metadata":{"permalink":"/pcsx2-net-www/blog/2007/work-in-progress","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/work-in-progress/index.mdx","source":"@site/blog/2007/work-in-progress/index.mdx","title":"Work in progress","description":"Work has been silently progressing over in camp PCSX2. So whats going on?","date":"2007-02-11T00:00:00.000Z","formattedDate":"February 11, 2007","tags":[{"label":"progress-report","permalink":"/pcsx2-net-www/blog/tags/progress-report"}],"readingTime":1.58,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2007-02-11T00:00:00.000Z","description":"Work has been silently progressing over in camp PCSX2. So whats going on?","draft":false,"hide_table_of_contents":true,"tags":["progress-report"],"title":"Work in progress"},"prevItem":{"title":"The Pressure Is On!","permalink":"/pcsx2-net-www/blog/2007/the-pressure-is-on"},"nextItem":{"title":"PCSX2 Optimization","permalink":"/pcsx2-net-www/blog/2007/pcsx2-optimization"}},"content":"Work has been silently progressing over in camp PCSX2. So whats going\\non?\\n\\n\x3c!-- truncate --\x3e\\n\\nWell for starters PCSX2 **linux** . Development for PCSX2 linux has gone\\nextremely well, so well in fact that several games already run on the\\ndevelopers machine and soon we betatesters shall be entering mainstream\\ntesting phase.\\n\\nWith the advent of PCSX2 linux comes zeroGS **OGL** , a full port of the\\ncurrent D3D zeroGS by zerofrog. Whilst this OGL port is in terms of\\nvisual compatibility is extremely close to the D3D build, it has several\\nspeed related issues to \'iron out\', of course these issues will be fixed\\nin the future, and more information shall be given out soon. There will\\nalso be a \'surprise\' with zeroGS OGL, but that is for zerofrog to\\nannounce in the future!\\n\\nPCSX2 is also getting a full blown **x64** build! This is some\\nexceedingly hefty work, with x64 recompilers and core having to be\\nwritten. Such a port will be able to take full advantage of x64\\ncompatible CPUs under an appropriate OS (Windows x64 / Linux x64), this\\nshould offer **significant** gains in speed, however the work is\\npreliminary and we can\'t offer direct examples or comparisons yet..!\\n\\nTo all those who have donated, thank you very much! Your donations have\\nhelped us buy new hardware to fully develop the linux ports and use\\n64bit in a stable environment.\\n\\nOf course with all this porting and rather complex set of additions\\ndoesn\'t leave huge amounts of room for the team to work on other\\naspects, but we have not forgotten the primary reason for this emulator. Getting PS2 games to run on your PC, and compatibility thus has\\n**not** taken a sidestep, below are shots of **Soul Calibur II** running under a recent beta of PCSX2:\\n\\n\\n![](img/scII_01.jpg)\\n\\n![](img/scII_02.webp)\\n\\n![](img/scII_03.jpg)\\n\\n![](img/scII_04.jpg)\\n\\n![](img/scII_05.jpg)\\n\\n![](img/scII_06.jpg)\\n\\n![](img/scII_07.webp)\\n\\n![](img/scII_08.webp)\\n\\n![](img/scII_09.webp)\\n\\n![](img/scII_10.webp)\\n\\n![](img/scII_11.webp)\\n\\n![](img/scII_12.webp)\\n\\n![](img/scII_13.webp)\\n\\n![](img/scII_14.webp)"},{"id":"/2007/pcsx2-optimization","metadata":{"permalink":"/pcsx2-net-www/blog/2007/pcsx2-optimization","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2007/pcsx2-optimization/index.mdx","source":"@site/blog/2007/pcsx2-optimization/index.mdx","title":"PCSX2 Optimization","description":"Many people have visited the forums giving ideas on how and where PCSX2 should be optimized","date":"2007-01-30T00:00:00.000Z","formattedDate":"January 30, 2007","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":10.08,"hasTruncateMarker":true,"authors":[{"name":"zerofrog","key":"zerofrog"}],"frontMatter":{"authors":["zerofrog"],"date":"2007-01-30T00:00:00.000Z","description":"Many people have visited the forums giving ideas on how and where PCSX2 should be optimized","draft":false,"tags":["devblog"],"title":"PCSX2 Optimization"},"prevItem":{"title":"Work in progress","permalink":"/pcsx2-net-www/blog/2007/work-in-progress"},"nextItem":{"title":"Merry Christmas!","permalink":"/pcsx2-net-www/blog/2006/merry-christmas"}},"content":"Many people have visited the forums giving ideas on how and where Pcsx2\\nshould be optimized. While most ideas sound solid on the outside, they\\nusually will not work in practice for various reasons. This blog will\\nanswer some of those burning questions on what Pcsx2 optimizations are\\nimportant and where development work should be put in to make things run\\nfaster. We will touch on why the GPU is the bottleneck on some games and\\nwhy the CPU is on others. We will also go into the distribution of\\nworkload of the various components of Pcsx2 as it is computing away. And\\nmost important, we will cover plugin design so that system resources are\\ndistributed nicely.\\n\\n\x3c!-- truncate --\x3e\\n\\nFirst a note to the people that have played around with optimization or\\nwill play around with it. Be careful when measuring performance with\\nframes per second! If anyone told me their optimization gained 5 fps for\\na certain game, I would not understand what that means! Why? Well if a\\ngame went from 5 fps to 10 fps, that means each frame took 200ms and now\\nit takes 100ms. The optimization saved 100ms of CPU time per frame and\\nnow the game is 2x faster (this doesn\'t happen anymore)! If a game went\\nfrom 60 fps to 65 fps, each frame took 16.6 ms and now it takes 15.4 ms.\\nThis is only 1.2 ms of saved time per frame, and the game is only 1.06\\ntimes faster. Which optimization do you think is better? Also a 1-2%\\nspeed difference is **not** statistically big enough to say that the\\noptimization is useful. In fact, the fps counter in the title bar\\nfluctuates between 1-2% all the time. So you\'ll just be picking up\\nnoise.\\n\\n**Introduction**\\n\\n![](./img/pcsx2-optimization.jpg)\\n\\nThe major components of Pcsx2 are shown in the figure. The heart of\\nPcsx2 is the dynamic translators of the various PS2 instruction sets,\\nmost often called the recompilers. Note that there are three hearts that\\nPcsx2 can be compiled with depending on your CPU: the interpreter\\n(actually always present), x86, and x86-64. Starting with 0.9.3, Pcsx2\\nhas been retrofitted to compile the interpreter on any little-endian CPU\\narchitecture by compiling with the PCSX2\\\\_NORECBUILD define. There is\\nalso the memory management scheme that factors into dynamic translation\\nsince memory accesses can be optimized away instead of calling one huge\\nMemoryRead(address, value) that redirects execution to the various\\nhardware components. The DMA connects all data that is passed to the\\nsub-components of Pcsx2. To the right are the components that are just\\ninterface stubs that interact with the plugins. At the bottom are the\\ncomponents that are implemented in Pcsx2 without any plugins. The reason\\nfor no plugins is that these components require tight synchronization\\nbetween the Pcsx2 hardware registers, so having the component in a\\nplugin will unnecessarily complicate and slow down things. Note that IPU\\ncan be argued to be a plugin on its own, however the actual MPEG2\\ndecoding part of IPU is not the problem as much as the DMA communication\\nbetween it and the EE.\\n\\nThe Graphysic Synthesizer (GS) plugin accepts a stream of commands to\\nrender geometry to its 4Mb video memory. This stream usually comes from\\nVU1, VIF, or a DMA transfer. Data from VU1 is usually 3d geometry, data\\nfrom VIF/DMA is usually textures or static 2D geometry. From time to\\ntime, the EE can request to read the GS memory from the VIF. Also, the\\nGS sets various hardware registers so that the EE can synchronize with\\nit. In MTGS mode, the GS has its own thread to do the stream processing\\nand these hardware registers are emulated on the main EE thread to avoid\\nhaving the EE wait for the GS to complete. In this way, the GS and EE\\ncan be detached and memory won\'t get corrupted. Ideally the GS plugin\\nshould offload as much computation off to the GPU and leave the CPU\\nalone, this however is possible to a certain degree because of drivers\\n(see the \\"Graphics Synthesizer, GPUs, and Dual Cores\\" blog).\\n\\nThe Sound Processing Unit (SPU2) plugin accepts a stream of commands\\nthrough DMA. The stream usually writes/reads SPU2 memory and sets\\nvarious channel modes. These channels play their data on a separate\\nthread that produces raw PCM data to send to the sound card. At the\\nmoment, the communication between SPU2 and DMA is pretty buggy.\\n\\nThe CDVD plugin just worries about reading data from ISOs or DVD drives.\\nVarious caching and read-ahead techniques have to be applied in order to\\nmake the reading fast and not noticeable to the user.\\n\\nThe rest of the plugins are either not implemented like USB and FireWire\\nor are pretty standard across emulators.\\n\\n**Optimization**\\n\\nWhen running, Pcsx2 spends most of its time in recompiled code (EE/IOP\\nor VUs). When in the EE recompiler, most components are executed as\\nhardware registers are written through the memory write functions. About\\nevery 512 EE cycles, the recompilers call cpuBranchTest to update\\ncounters, give IOP enough time to catch up, and perform other system\\nstuff. The VU programs are usually executed as soon as the program is\\nstarted in the VIF. If VU1 is executed, the recompilers don\'t exit until\\nthe VU program exits. If VU0 is executed, only 512 VU cycles are\\nexecuted then control is given to the EE so it can catch up\\n(synchronizing VU0 can be very tricky). IOP recompilers usually don\'t\\ntake up a lot of CPU time. Besides the fact that IOP runs 8 times slower\\nthan EE, it is also a 32bit processor, so things are fairly quick.\\nThe rest of Pcsx2 time is spent in pipelining the data through the\\nvarious components. A good amount of time is also spend in the VIF\\nUNPACK function, however this function is super-optimized (see iVif.cpp\\nor iVif.S) so nothing can be done about that anymore. IPU also does\\nMPEG2 decompression, so it is arguably computationally intensive during\\nmovies (however this isn\'t the case at all).\\n\\nBecause Pcsx2 is written in C/C++, function calls and pipelining is very\\nfast. Many people believe that rearranging code and optimizing the\\ncalling conventions will speed things up. This is **not** the case at\\nall. Although there do exist functions that could benefit from some\\nhand-coded assembly, you will not see a statistical speed difference\\nbecause the assembly code might not have improved speed too much, or the\\nfunction is not called often enough to really matter. For example, it is\\nstupid to optimize the recInit function, it is called only once per\\ngame!\\n\\n**Recompiler Optimizations**\\n\\nIn short, don\'t waste your time optimizing the ADD or MULT instruction\\n...or any single instruction for that matter. The bottleneck of the\\nrecompilers is the way the registers are allocated. Also, registers are\\nnot tracked across simple blocks meaning that they are all dumped to\\nmemory at the end of each block, which is very suboptimal. My advice is\\nnot to touch any recompiler unless you know what is going on. If you are\\ninclined to optimize recompilers, do the EE. The VU recompilers are\\n**very** fast at the moment, so don\'t waste your time because you might\\nkill compatibility... and IOP is just not worth it. When running a\\nprofiler, you might see the cpuBranchTest function pop up a lot... don\'t\\nwaste your time by rearranging code out of the function or trying to\\ncall the function less frequently, it won\'t work.\\n\\n**GS plugin optimizations**\\n\\nThere have been various suggestions to use shaders to offload as much\\ncomputation as possible. This is exactly what ZeroGS does! In fact,\\nZeroGS does it so well that your GPU will cry (hence the name KOSMOS).\\nThe biggest problem with the GS plugin is managing the render targets\\nand caching the textures. Also, the trick to everything is **never**\\n(and I really mean never) to transfer GPU memory to system memory. This\\nproblem is actually very common with many games because game developers\\njust do crazy shit with the GS... sometimes I get the urge to email\\ncompanies asking them \'what were you on when you programmed this?\'. This\\nis the reason why certain games are much slower than others. Sometimes\\nthe problem is fixable, sometimes it isn\'t (this is a good time to\\nmention that the ocean zbuffer bug in FF12 is exactly due to this\\nproblem... and ZeroGS ingeniously ignores the memory transfer so FF12 is\\nnice and fast... hence the bug).\\n\\nSomeone in the forums suggested executing VU1 instructions in the GPU\\nvertex shaders. If you look at the shader and VU instruction sets,\\nyou\'ll see that they are very similar, so I can understand why someone\\nwould think this. However this is not possible because VUs are **way**\\nmore complex than vertex shaders! In fact, it is suicide to consider the\\namount of code reengineering that would have to be done just to get the\\nGPU to execute a simple VU program... the GPU already has enough work to\\ndo. While on the subject of VU, it is also useful to mention that it is\\nsuicide to even consider putting the VU recompilers in their own CPU\\nthread that can execute concurrently with the EE! Making things\\nmulti-threaded is tricky because of the data sharing between the two\\nthreads. In fact, putting the VU execution on another thread would\\nprobably slow things down more than speed up. The reason multithreading\\non the GS works so well is because the EE doesn\'t have to stop to\\nsynchronize with the GS, all it has to do is copy the stream it wants to\\nsend to the GS in a temporary buffer. The GS plugin will process it when\\nit gets the time.\\n\\n**SPU2 optimizations**\\n\\nDon\'t know what\'s going on here. SPU2 really needs reworking. And it\\nisn\'t just the plugin, there is a whole synchronization issue with DMA\\nand SPU2 that has to be taken care of. The SPU2 should be multithreaded\\nand it shouldn\'t require any huge synchronization with the main thread.\\nIf anyone will work on something, it should be SPU2.\\n\\n**Other optimizations**\\n\\nMost other components of Pcsx2 are already pretty optimized. To\\nsummarize, the biggest bottlenecks are the recompilers, GS plugin, and\\nSPU2. Currently x86-64 versions of the recompilers are being developed.\\nZeroGS OpenGL will be released as open source soon, so people can\\ncontribute their own changes if necessary. Actually, future versions of\\nZeroGS will have a complex patch system that will enable gamers to tweak\\nsettings so that the game is as fast as possible (even dual core users\\ncan see a big performance gain with the correctly tweaked settings). No\\none is maintaining SPU2.... but that will change if this continues.\\n\\nThe last hope for optimization is actually x86-64. As to how much\\nperformance will increase... not even I know, but we shall see later in\\nthe year when Pcsx2 x64 releases (for Linux too).\\n\\n**Moral of the blog** Optimization is time consuming and it is more of\\nan art than science. Programs are developed much faster and have less\\nbugs when you don\'t have to worry about optimizing (Java is a great\\nexample of a language where it is easy to develop programs, but very\\nhard to have it run fast.. by design I guess). But no matter the\\napplication, having it go faster is much better than having it go\\nslower. A lot of game companies spend a lot of money optimizing their\\ncode because it is that important. The reason most newer games have\\nbeautiful graphics running in real-time is not just because GPUs are\\ngetting faster, but also companies are getting better at optimizing\\ntheir game engines. For example, games when the PS2 was first released\\nlook inferior to what new PS2 games look today. And with the way things\\nare going in the software industry, it looks like C++ will stick around\\nfor a very long time because of its optimization capabilities. Learn\\nC++, there are many books I can recommend, but the best way to learn is\\nto actually go and program something."},{"id":"/2006/merry-christmas","metadata":{"permalink":"/pcsx2-net-www/blog/2006/merry-christmas","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/merry-christmas/index.mdx","source":"@site/blog/2006/merry-christmas/index.mdx","title":"Merry Christmas!","description":"Merry Christmas folks!","date":"2006-12-25T00:00:00.000Z","formattedDate":"December 25, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.315,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-12-25T00:00:00.000Z","description":"Merry Christmas folks!","draft":false,"tags":["devblog"],"title":"Merry Christmas!"},"prevItem":{"title":"PCSX2 Optimization","permalink":"/pcsx2-net-www/blog/2007/pcsx2-optimization"},"nextItem":{"title":"New Configuration Guide And Translations","permalink":"/pcsx2-net-www/blog/2006/new-configuration-guide-and-translations"}},"content":"Merry Christmas folks!\\n\\n\x3c!-- truncate --\x3e\\n\\nHope you all have a fantastic day, and get what you want (car,\\ngirlfriend / boyfriend, computer, 1000 games, mint rare copy of Final\\nFantasy 7, the one where Aeris lives...etc, well atleast\\nthey\'re all cheaper than a PS3, and available in more countries\\n\ud83d\ude09 )\\n\\nIf you don\'t celebrate christmas, well Merry Monday to you all!"},{"id":"/2006/new-configuration-guide-and-translations","metadata":{"permalink":"/pcsx2-net-www/blog/2006/new-configuration-guide-and-translations","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/new-configuration-guide-and-translations/index.mdx","source":"@site/blog/2006/new-configuration-guide-and-translations/index.mdx","title":"New Configuration Guide And Translations","description":"For those who haven\'t noticed,the PCSX2 Configuration Guide has been updated for v0.9.2 and is now integrated in this site itself","date":"2006-12-20T00:00:00.000Z","formattedDate":"December 20, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.275,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2006-12-20T00:00:00.000Z","description":"For those who haven\'t noticed,the PCSX2 Configuration Guide has been updated for v0.9.2 and is now integrated in this site itself","draft":false,"tags":["devblog"],"title":"New Configuration Guide And Translations"},"prevItem":{"title":"Merry Christmas!","permalink":"/pcsx2-net-www/blog/2006/merry-christmas"},"nextItem":{"title":"PCSX2 Productions Present","permalink":"/pcsx2-net-www/blog/2006/pcsx2-productions-present"}},"content":"Hey everyone,long time since I\'ve posted some news on the PCSX2 site.\\nFor those who haven\'t noticed,the PCSX2 Configuration Guide has been\\nupdated for v0.9.2 and is now integrated in this site itself! You can\\nview it simply by clicking on the \\"Guide\\" link at the main menu.\\n\\n\x3c!-- truncate --\x3e\\n\\nWith the help of my buddy Falcon4ever, the guide has been converted to\\nmybb code and we now have a new system for translations! The translators\\nwill be send a txt file which no longer has any code inside, making it\\neasier for them as to what needs translating.\\n\\nIf anyone wants to apply for a translation, they must first drop me a\\nmail at this address [ This email address is being protected from\\nspambots. You need JavaScript enabled to view it.\\n]{#cloak7f815424dca50c661e623dd4e4314804}\\n\\n. If there is no other translator working on the same language,I will\\nsend back a mail with the txt to be translated.You can also check on the\\nupdated WIP list on emuforums\\n[here](http://forums.ngemu.com/pcsx2-official-forum/58506-pcsx2-configuration-guide.html)\\n. Note that translators are chosen at a first come basis!\\n\\nI already have people translating for\\nGreek,German,Italian,Dutch,Spanish,Russian,Serbian,Brazilian\\nPortuguese,French,Polish,Swedish and Turkish so no need to apply for\\nthese languages.\\n\\nThe translated guides will be uploaded as soon as possible, after I\\nreceive them and check for errors and cases of babelfish.You will be\\nable to select them by pressing the respective flag buttons on the guide\\npage, after they are done\\n\ud83d\ude0a\\n\\nThats all from me, I\'ll get back to the usual beta testing slavery\\n\ud83d\ude0a"},{"id":"/2006/pcsx2-productions-present","metadata":{"permalink":"/pcsx2-net-www/blog/2006/pcsx2-productions-present","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/pcsx2-productions-present/index.mdx","source":"@site/blog/2006/pcsx2-productions-present/index.mdx","title":"PCSX2 Productions Present","description":"We have thus decided to produce a rather \'unique\' video demonstrating some of the many games **PCSX2 0.9.2** can emulate","date":"2006-12-08T00:00:00.000Z","formattedDate":"December 8, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.755,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-12-08T00:00:00.000Z","description":"We have thus decided to produce a rather \'unique\' video demonstrating some of the many games **PCSX2 0.9.2** can emulate","draft":false,"tags":["devblog"],"title":"PCSX2 Productions Present"},"prevItem":{"title":"New Configuration Guide And Translations","permalink":"/pcsx2-net-www/blog/2006/new-configuration-guide-and-translations"},"nextItem":{"title":"PCSX2 0.9.2 - The Revenge!","permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9-2-the-revenge"}},"content":"**PCSX2 0.9.2** is out, with thousands of users busily trying\\nPlayStation 2 emulation out, the\\n[screenshots](http://forums.ngemu.com/pcsx2-official-forum/80878-post-your-pcsx2-0-9-2-screenshots-here.html)\\nthread has been a growing mecca of fantastic screenshots, we have thus\\ndecided to produce a rather \'unique\' video demonstrating some of the\\nmany games **PCSX2 0.9.2** can emulate.\\n\\n\x3c!-- truncate --\x3e\\n\\n\\nPCSX2\'s forum users produce many *excellent* shots, because of this we\\nplan to take a selection of shots from the [screenshots\\nthread](http://forums.ngemu.com/pcsx2-official-forum/80878-post-your-pcsx2-0-9-2-screenshots-here.html)\\non a \'regular\' basis and place them on this site under the screenshots\\nsection, so please keep on posting and thank you!\\n\\nThere is also a growing\\n[YouTube](http://www.youtube.com/results?search_query=PCSX2&search=Search)\\ncollection of videos being produced by PCSX2 users, check them out! Feel\\nfree to make your own videos using PCSX2\'s inbuilt video recording\\nfeatures and post them in the newly created [Videos\\nThread](http://forums.ngemu.com/pcsx2-official-forum/81947-post-your-pcsx2-0-9-2-videos-here.html)\\n!\\n\\nThis video is homage to you - the PCSX2 user, we hope you enjoy it!\\n\\n\x3c!-- TODO video? --\x3e"},{"id":"/2006/pcsx2-0-9-2-the-revenge","metadata":{"permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9-2-the-revenge","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/pcsx2-0-9-2-the-revenge/index.mdx","source":"@site/blog/2006/pcsx2-0-9-2-the-revenge/index.mdx","title":"PCSX2 0.9.2 - The Revenge!","description":"PCSX2 0.9.2 R2 is now available","date":"2006-11-18T00:00:00.000Z","formattedDate":"November 18, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.69,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-11-18T00:00:00.000Z","description":"PCSX2 0.9.2 R2 is now available","draft":false,"tags":["devblog"],"title":"PCSX2 0.9.2 - The Revenge!"},"prevItem":{"title":"PCSX2 Productions Present","permalink":"/pcsx2-net-www/blog/2006/pcsx2-productions-present"},"nextItem":{"title":"The 81Fc0 Is Over!","permalink":"/pcsx2-net-www/blog/2006/the-81fc0-is-over"}},"content":"**PCSX2 0.9.2 R2** is now available\\n\\n\x3c!-- truncate --\x3e\\n\\nThis fixes an assortment of issues found briefly after 0.9.2\'s original\\nlaunch. It is **strongly** advised that people get this build of 0.9.2\\nover the initial release.\\n\\n-   Compatibility regression with **Vampire Night** resolved.\\n-   **Final Fantasy X** now works for *most* regions.\\n-   Fixes Crash when using *config>patches*\\n-   Frame Limiting is now more accurate.\\n-   Improved zeroGS, **Disgaea 2** menus are now solid.\\n-   P.E.Op.S SPU2 updated to include threaded mode (useful for video\\nrecording).\\n-   Screen Saver / Power Saving now disabled when running PCSX2.\\n\\n\\nJust to cure our collective headaches \\"warnings about default.xml\\"\\nbeing blank, or \\"patches not found\\", are merely information, they do\\n**not** in any way effect PCSX2\'s compatibility or performance.\\n\\n:: [Official Screenshots\\nThread](http://forums.ngemu.com/pcsx2-official-forum/80878-post-your-pcsx2-0-9-2-screenshots-here.html)\\n- Post your shots from PCSX2 0.9.2 here!"},{"id":"/2006/the-81fc0-is-over","metadata":{"permalink":"/pcsx2-net-www/blog/2006/the-81fc0-is-over","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/the-81fc0-is-over/index.mdx","source":"@site/blog/2006/the-81fc0-is-over/index.mdx","title":"The 81Fc0 Is Over!","description":"PCSX2 0.9.2 is here!","date":"2006-11-18T00:00:00.000Z","formattedDate":"November 18, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.685,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-11-18T00:00:00.000Z","description":"PCSX2 0.9.2 is here!","draft":false,"tags":["devblog"],"title":"The 81Fc0 Is Over!"},"prevItem":{"title":"PCSX2 0.9.2 - The Revenge!","permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9-2-the-revenge"},"nextItem":{"title":"Site Improvements Part 2","permalink":"/pcsx2-net-www/blog/2006/site-improvements-part-2"}},"content":"**PCSX2 0.9.2** is here!\\n\\n\x3c!-- truncate --\x3e\\n\\nThis release brings several important changes to **PCSX2** , enhancing\\ncompatibility and adding several new aspects to the emulator.\\n\\n-   ADMA has been added to PCSX2, most (if not all) game videos will\\nplayback audio, many games now have their music and speech effects.\\nUnlike some, we think games need sound.\\n-   Counter fixes stopping games hitting *long pause* syndrome, or\\ncrashing.\\n-   Enhanced MTGS / DC stability, great for those with Dual Core CPUs.\\n-   IPU improvements, more game videos will now run.\\n-   VIF fixes, allowing for many games to run or look better.\\n-   VUrec fixes, improving ingame graphics when under VU recompilation\\n\\nAlso included with this release is the new **Patch Browser** and **Patch\\nFinder** , the patch browser, allows you to search memory with the tools\\nand functions you would be used to with a cheat searcher.\\n\\nThe Patch Browser will allow you to enable and disable parts of the\\npatch during gameplay, e.g. enabling *Infinite Lives* etc!\\n\\n**HOWEVER!!** - These features are not completed yet, enumerator\'s and\\nother features are not present, and the patch browser lacks\\nfunctionality! You can still use the patch finder, and an example XML\\nfile with notes is included with this release (in the root dir of\\nPCSX2), and the new format XML files can be used by PCSX2!\\n\\nPCSX2 0.9.2 also comes with a new **zeroGS** plugin, which increases\\ngraphical support for several games and fixes some of the bugs found in\\nthe previous version(s).\\n\\nWe\'re going to save ourselves some hassle next! We\'re aware many\\npeople want to play **Final Fantasy X** on PCSX2, as you maybe aware the\\ngame is now fully playable, however we would like to make two **very\\nimportant** notes:\\n\\n-   PEOPS CDVD plugin must be used!\\n-   MTGS can cause some crashes, they are rare, but if the game crashes,\\nswitch to single core mode for awhile!\\n\\nEnjoy this release!\\n:: [Official Screenshots\\nThread](http://forums.ngemu.com/pcsx2-official-forum/80878-post-your-pcsx2-0-9-2-screenshots-here.html)\\n- Post your shots from PCSX2 0.9.2 here!"},{"id":"/2006/site-improvements-part-2","metadata":{"permalink":"/pcsx2-net-www/blog/2006/site-improvements-part-2","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/site-improvements-part-2/index.mdx","source":"@site/blog/2006/site-improvements-part-2/index.mdx","title":"Site Improvements Part 2","description":"It\'s been a while since the last site improvements, however this time we have some nice and maybe unique features on our site","date":"2006-11-11T00:00:00.000Z","formattedDate":"November 11, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.3,"hasTruncateMarker":true,"authors":[{"name":"falcon4ever","url":"https://github.com/falcon4ever","imageURL":"https://github.com/falcon4ever.png","key":"falcon4ever"}],"frontMatter":{"authors":["falcon4ever"],"date":"2006-11-11T00:00:00.000Z","description":"It\'s been a while since the last site improvements, however this time we have some nice and maybe unique features on our site","draft":false,"tags":["devblog"],"title":"Site Improvements Part 2"},"prevItem":{"title":"The 81Fc0 Is Over!","permalink":"/pcsx2-net-www/blog/2006/the-81fc0-is-over"},"nextItem":{"title":"Saqib Time","permalink":"/pcsx2-net-www/blog/2006/saqib-time"}},"content":"It\'s been a while since the last site improvements, however this time we\\nhave some nice and maybe unique features on our site.\\n\\n\x3c!-- truncate --\x3e\\n\\nOur compatibility page has been upgraded. The new feature is the AJAX\\npowered toggle boxes which allow you to see games with a particular\\nstatus.\\n\\nThe status will be remembered when switching between pages."},{"id":"/2006/saqib-time","metadata":{"permalink":"/pcsx2-net-www/blog/2006/saqib-time","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/saqib-time/index.mdx","source":"@site/blog/2006/saqib-time/index.mdx","title":"Saqib Time","description":"One of the greatest questions mankind has ever asked is; \\"How long does Saqib take to give testers a beta?\\". It\'s a common question raised by many testers over the years.","date":"2006-11-10T00:00:00.000Z","formattedDate":"November 10, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.2,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-11-10T00:00:00.000Z","description":"One of the greatest questions mankind has ever asked is; \\"How long does Saqib take to give testers a beta?\\". It\'s a common question raised by many testers over the years.","draft":false,"tags":["devblog"],"title":"Saqib Time"},"prevItem":{"title":"Site Improvements Part 2","permalink":"/pcsx2-net-www/blog/2006/site-improvements-part-2"},"nextItem":{"title":"Touche Toupee!","permalink":"/pcsx2-net-www/blog/2006/touche-toupee"}},"content":"One of the greatest questions mankind has ever asked is; \\"How long does\\nSaqib take to give testers a beta?\\". It\'s a common question raised by\\nmany testers over the years.\\n\\n\x3c!-- truncate --\x3e\\n\\nOne could argue that such questions are not to be answered by mankind,\\nfor such knowledge would surely destroy us, well I for one believe that\\nmankind must know, for it could be the key to unlocking one of the\\ngreatest advances in Quantum Theory, since *zerofrog* learned how to\\ncollapse entire galaxies with his zeroGS KOSMOS.\\n\\nTo calculate the real world time it will take for saqib to deliver a\\nbeta to any given tester, you have to take into account the following\\nvariables and factors.\\n\\nNagging Factor **(N)** , does the tester have the strength to \'push\'\\nSaqib into hurrying along, for most testers this strength is given as\\nmerely a fraction of 1 as Saqib is remarkably stubborn!\\n\\nThus often N has little impact on the rate of beta delivery, However a\\ntester can use the offer of pornography (P) to entice Saqib to speed up,\\nbut this is a double edged sword, a value greater than 3 (3 videos, 3\\nphotosets etc), will create a - ahem \'W\' effect, causing the divider in\\nthis calculation to be reset to 1.\\n\\nCoffee Power **( C )** truly an awesome cosmic force in the universe,\\nit\'s magical beans can break through temporal barriers allowing for the\\nuser to work faster! In fact it\'s powers are so truly incredible, a\\nsingle mug of coffee acts as a massive multiplier, with each mug being\\nworth ^2.\\n\\nLaz0ritus is a common side effect caused by lack of daylight and social\\ninteraction, creating an almost coma like state, this is a severe factor\\nand can extend waiting duration by significant amounts of time, such is\\nthe effect that the multiplier for this variable can be set as high as\\n24 hours (1440 minutes).\\n\\nKOSMOS Temporal Pull **(K)** When working with KOSMOS all testers are\\neffected by the dragging effect caused by this massive Energy Black Hole\\n(EBH), which consumes entire galaxy clusters constantly, however\\ndevelopers are exposed to higher levels of KTP, which causes their time\\nto move extremely slowly, for every minute that passes in their time,\\n10,080 minutes pass in our time. The longer a developer has been exposed\\nto this effect the greater the effect.\\n\\nTemporal Reality Flux Syndrome **(F)** Early years of PCSX2 development\\nwas a risky business, those who ventured into this unknown, often came\\nback \'different\', medically the issue is little understood, but is\\nbelieved to be caused by watching motion at sub 1 FPS, this causes the\\ndeveloper to perceive time outside of PCSX2 to be incredibly fast.\\n\\nThis causes the sufferer to slow down to the more comfortable PCSX2\\nspeeds they became accustomed to in those early days, doctors and\\nscientists have learned in recent studies that the brain and motor\\nfunctions slow down by 60x normal values.\\n\\nIn some extreme cases it\'s known to produce such a slowdown that the\\ndeveloper is apparently petrified (Frozen in time). Others consider this\\nis merely a visual side effect as such low levels of motion cannot be\\nperceived by humans in normal space.\\n\\nThus the following calculation can be made:\\nR=Real World Time (Minutes)\\nS=Saqib Time (Minutes)\\nK=10080, L=1440, F=6, P=2, C=10, N=2, S=1.\\n\\n`R=(L*K*F*Log(1.7^S))/((Sin(PI*P/3)+1)*N^C)`\\n\\nR=10503.43726 minutes.\\n\\nSo a single minute in *Saqib Time* is equal to 7.29 Days in our time,\\nthis work is theoretical at the moment and needs a great deal of\\nrefinement, however one can see via this simple equation that we\'ll be\\nlong dead by the time PCSX2 has Saqib\'s code.\\n\\nOne hopes that a scientist or time traveler gets chance to see this and\\ncan offer help and advice for Saqib and his somewhat unique dilemma."},{"id":"/2006/touche-toupee","metadata":{"permalink":"/pcsx2-net-www/blog/2006/touche-toupee","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/touche-toupee/index.mdx","source":"@site/blog/2006/touche-toupee/index.mdx","title":"Touche Toupee!","description":"To celebrate the upcoming **PCSX2 0.9.2** release we have recorded a 7 minute 38 second long video of Tekken 4\'s arcade mode being completed with Nina","date":"2006-11-06T00:00:00.000Z","formattedDate":"November 6, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.47,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-11-06T00:00:00.000Z","description":"To celebrate the upcoming **PCSX2 0.9.2** release we have recorded a 7 minute 38 second long video of Tekken 4\'s arcade mode being completed with Nina","draft":false,"tags":["devblog"],"title":"Touche Toupee!"},"prevItem":{"title":"Saqib Time","permalink":"/pcsx2-net-www/blog/2006/saqib-time"},"nextItem":{"title":"PCSX2 64Bit Recompilation","permalink":"/pcsx2-net-www/blog/2006/pcsx2-64bit-recompilation"}},"content":"To celebrate the upcoming **PCSX2 0.9.2** release we have recorded a 7\\nminute 38 second long video of Tekken 4\'s arcade mode being completed\\nwith Nina!\\n\\n\x3c!-- truncate --\x3e\\n\\n**PCSX2 0.9.2** will add increased compatibility, improved graphics for\\nmany games, improved MTGS stability and an abundance of features that\\nyou\'ll get to see in the future.\\n\\nFor now bask in some Tekken 4 action and note the fighting wigs (ahar\\nnow you get the title) are no longer present - as zeroGS has also had\\nit\'s fair share of improvements!\\n\\n<Image cols={6} src={require(\\"./img/tek4_t.jpg\\").default} />"},{"id":"/2006/pcsx2-64bit-recompilation","metadata":{"permalink":"/pcsx2-net-www/blog/2006/pcsx2-64bit-recompilation","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/pcsx2-64bit-recompilation/index.mdx","source":"@site/blog/2006/pcsx2-64bit-recompilation/index.mdx","title":"PCSX2 64Bit Recompilation","description":"Many 64 bit architectures have been proposed; however, the x86-64 (aka AMD64) architecture has picked up a lot of speed since its initial proposal a couple of years ago","date":"2006-10-29T00:00:00.000Z","formattedDate":"October 29, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":7.37,"hasTruncateMarker":true,"authors":[{"name":"zerofrog","key":"zerofrog"}],"frontMatter":{"authors":["zerofrog"],"date":"2006-10-29T00:00:00.000Z","description":"Many 64 bit architectures have been proposed; however, the x86-64 (aka AMD64) architecture has picked up a lot of speed since its initial proposal a couple of years ago","draft":false,"tags":["devblog"],"title":"PCSX2 64Bit Recompilation"},"prevItem":{"title":"Touche Toupee!","permalink":"/pcsx2-net-www/blog/2006/touche-toupee"},"nextItem":{"title":"A Little Fix Here, Alittle Fix There...Vvvroom!","permalink":"/pcsx2-net-www/blog/2006/a-little-fix-here-alittle-fix-there"}},"content":"Many 64 bit architectures have been proposed; however, the x86-64 (aka\\nAMD64) architecture has picked up a lot of speed since its initial\\nproposal a couple of years ago. Most 64bit CPUs today support it, so it\\nlooks like a good candidate for 64bit recompilation. The x86-64\\narchitecture offers many more registers and can potentially speed up\\ngames by a significant amount. Up to now, Pcsx2 has largely been\\nignoring the 64 bit arena because there have been massive compatibility\\nissues, the developers weren\'t sure if it was really worth it, and\\nadding a new bug-free and fast recompiler to the existing code base is a\\nvery painful process. Anyone seriously suggesting this to a dev would\\nhave been laughed out of the chat room. However, the upcoming 0.9.2\\nrelease is looking very stable and after doing some research, we have\\ndecided to add support for x86-64 recompilation, both for 64bit versions\\nof Linux and Windows (yes, Linux support is returning).\\n\\n\x3c!-- truncate --\x3e\\n\\nBefore going into technical details, I want to cover the current Pcsx2\\nrecompilation model.\\n\\n**Pcsx2 Recompilation**\\n\\nEvery different instruction set requires either an interpreter or a\\nrecompiler to execute it on the PC. Both are important in emulation.\\nInterpreters are implemented with regular high-level languages and are\\nplatform independent. They are easy to program, easy to debug, but slow.\\nThey are extremely important for testing and debugging purposes. For\\nexample, interpreting a simple 32bit EE MIPS instruction (code) might\\nlook like:\\n\\n```cpp\\nswitch(code>>26) {\\ncase 0x02: // J - jump to\\npc = (code & 0x03ffffff)*4; // change the program counter\\nbreak;\\ncase 0x23: // LW - load word, sign extend\\ngpr[Rt] = (long long)*(long*)(memory+gpr[Rs]+(short)code);\\nbreak;\\n...\\n}\\n```\\n\\nRecompilers, on the other hand, try to cut as many corners as possible.\\nFor example, we know the instruction at address 0x1000 will never\\nchange, so there is no reason why the CPU needs to execute the switch\\nstatement and decode the instruction every single time it executes it.\\nSo recompilers generate the minimal amount of assembly the CPU needs to\\nexecute to emulate that instruction. Because we\'re working with\\nassembly, recompilation is a very platform dependent process.\\n\\nSimple recompilers look at one instruction at a time and keep all target\\nplatform (in this case, the PS2) registers in memory. For every new\\ninstruction, the used registers are read from memory and stored in real\\nCPU registers, then some instructions are executed, and finally the\\nregister with the result is stored back in memory. Before 0.9, Pcsx2\\nused to employ this type of recompilation.\\n\\nMore complex recompilers divide the code into simple blocks (no\\njumps/branches) and try to preserve target platform registers across\\ninstructions in the real CPU registers. There are many different types\\nof register allocation algorithms using graph coloring. Such compilers\\nmight also do constant propagation elimination. A common pattern in the\\nMIPS Emotion Engine is something like:\\n\\nlui s0, 0x1000\\nlw s0, 0x2000(s0)\\n\\nIf we propagated the constants at the lw, we know that the read address\\nis 0x10002000.\\n\\nA little more complex recompiler will know that 0x10002000 corresponds\\nto the IPU, so the assembly will call the IPU straight away (without\\nworrying about memory location translation).\\n\\nThere are many such local optimizations, however they aren\'t enough. At\\nthe end of every block, all the registers will have to be pushed to\\nmemory because the next simple block that needs to be executed can\'t be\\npredicted at recompilation time (ie: branch if x &gt;= 0 depends on the\\nvalue of x at runtime).\\n\\nAn even more complex recompiler can work on the global scale by finding\\nout which simple blocks are connected to which. Once it knows, it can\\nget rid of the register flushing at the end of every simple block by\\nsimply telling the next blocks to allocate the same real CPU register to\\nthe same target platform register. This is called global register\\nallocation and sometimes uses Markov blankets for block synchronization.\\nFor those people that know Bayes nets, this is very similar, except it\\napplies to the global simple block graph. Just think about the nodes\\nnecessary for making a specific node independent with respect to the\\nwhole graph. This will include the node\'s parents, children, and the\\nchildren\'s parents. For those that just got lost... don\'t worry.\\n\\nThe Pcsx2 recompilers also use **MMX** and **SSE(1/2/3)**\\ninterchangeably. So an EE register can be in an MMX, SSE, or regular x86\\nregister at any point in time depending on the current types of\\ninstructions (this is a nightmare to manage).\\n\\nConsole emulators rarely need to go through such complex recompilers\\nbecause up until a couple of years ago, consoles weren\'t that powerful.\\nBut starting with the PS2, consoles got powerful and the Pcsx2\\nrecompilers for the EmotionEngine and Vectors Units got complex really\\nfast. Pcsx2 0.9.1 supports all the above mentioned optimizations plus\\nmany more unmentioned ones. The VU recompiler (code named **SuperVU** )\\nis by far the most complex and fastest. Anyone who wants to keep their\\nsanity should stay away from it.\\n\\nFor those that remember what it was like in the 0.8.1 days can\\nappreciate how powerful the 0.9.1 Pcsx2 optimizations are.\\n\\n**x86-64**\\n\\nSo why isn\'t x86-32 enough? Well, for starters the Playstation 2 EE has\\n32 128bit regular registers, 32 32bit floating point registers, and some\\nCOP0 registers. Most instructions work on 64 bits, the MMI instructions\\nwork on the full 128bits. On the other hand, the x86 CPU has 8 32bit\\ngeneral purpose registers (one is for stack), 8 64bit registers (MMX),\\nand 8 128bit registers(SSE). And you can\'t combine the three that easily\\n(ie: you can\'t add an x86 register with a SSE register before first\\ntransferring the x86 to SSE or vice versa). So there\'s a very big\\ndifference in registers sizes. Because of the small number of x86\\nregisters, the recompiler does a lot of register thrashing (registers\\nare spilled to memory very frequently). Each memory read/write is pretty\\nslow, so the more thrashing, the slower the recompiler becomes. Also,\\nx86-32 is inherently 32bit, so a 64bit add would require 2 32bit\\ninstructions and 4 regular x86 registers for the source and result (2 if\\nreading from memory). The EE recompiler tries to alleviate the register\\npressure by using the 64bit arithmetic capabilities of MMX, but MMX has\\na pretty limited ISA and intra-register set transfers kill\\nperformance.\\n\\nThe registers on the x86-64 architecture are: 16 64bit general purpose\\nregisters, 8 64bit MMX registers, and 16 128bit SSE registers. This\\namounts to twice the number of register memory! This means much less\\nregister thrashing. On top of that, 64bit adds/shifts/etc can all be\\ndone in one instruction.\\n\\nHowever, the story isn\'t as simple as it sounds. The recompiler has to\\ninterface with regular C++ code constantly (ie: calling plugin\\nfunctions), so the calling conventions on the recompiler boundaries must\\nbe followed exactly. The x86-64 specification can be found\\n[**here**](http://www.x86-64.org/) and is pretty straightforward.\\nHowever, Microsoft decided that it wanted its own specification (for\\nreasons not quite known to anyone else).. so now there are two different\\ncalling conventions with a different set of registers specifying\\narguments to functions and another different set acting as non-volatile\\ndata! (Thanks Microsoft, it wasn\'t difficult enough)\\n\\nBecause the size of the registers changed, all pointers are now 64 bits,\\nwhich adds many difficulties to reading and writing from memory,\\nincrementing the stack, etc.\\n\\nVirtual memory is yet another obstacle to overcome with 64bit OSs. The\\nAWE mapping trick (described in an early blog) has to be refined. But\\nnow that the address range is much bigger, there are less limitations.\\nVM builds for Linux also need a completely new implementation.\\n\\nFinally, if anyone has seen Pcsx2 code, they would know that inline\\nassembly is pretty frequent in the recompilers. The reasons we use\\ninline assembly rather than C++ code are many. Actually, some things\\nlike dynamic dispatching become impossible to do with C++ code. So,\\ninline is necessary... and it looks like Microsoft has disabled **all**\\nfunctionality for inline assembly in 64bit editions of Visual C++!!!!\\n(Thanks again Microsoft, you just know where to strike hardest)\\n\\nWith all the mentioned challenges, it will take a couple of months to\\nget things working reasonably stable. By that time, more people would\\nhave switched to 64bit OSs. If we\'re even half right in our estimates,\\nPcsx2 will run much faster on a 64bit OS than on a 32bit OS on the same\\ncomputer once x86-64 recompilation is done.\\n\\nzerofrog,\\n\\n**Moral of the blog** Most recompiler theory discussed here actually\\ncomes straight from compiler theory. Compilers will always be necessary\\nas long as engineers keep coming with new instruction set architectures\\n(ISAs). Learn how a compiler works. I recommend [**Compilers:\\nPrinciples, Techniques, and\\nTools**](http://www.amazon.com/Compilers-Principles-Techniques-Alfred-Aho/dp/0201100886/sr=8-2/qid=1162088515/ref=pd_bbs_2/002-1428306-8445667?ie=UTF8&s=books)\\nby Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman."},{"id":"/2006/a-little-fix-here-alittle-fix-there","metadata":{"permalink":"/pcsx2-net-www/blog/2006/a-little-fix-here-alittle-fix-there","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/a-little-fix-here-alittle-fix-there/index.mdx","source":"@site/blog/2006/a-little-fix-here-alittle-fix-there/index.mdx","title":"A Little Fix Here, Alittle Fix There...Vvvroom!","description":"Refraction has been \'abit\' busy!","date":"2006-10-07T00:00:00.000Z","formattedDate":"October 7, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.485,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-10-07T00:00:00.000Z","description":"Refraction has been \'abit\' busy!","draft":false,"tags":["devblog"],"title":"A Little Fix Here, Alittle Fix There...Vvvroom!"},"prevItem":{"title":"PCSX2 64Bit Recompilation","permalink":"/pcsx2-net-www/blog/2006/pcsx2-64bit-recompilation"},"nextItem":{"title":"Site Improvements Part 1","permalink":"/pcsx2-net-www/blog/2006/site-improvements-part-1"}},"content":"**Refraction** has been \'abit\' busy!\\n\ud83d\ude1b He\'s been \'in the zone\' for the past few\\nnights fixing **VIF Unpacks** , which decompress then send texture and\\nvector data to the VUs.\\n\\n\x3c!-- truncate --\x3e\\n\\nSuch fixes have a wide impact on games, some *initial* results below:\\nClocktower 3 - SPS (Spikey Polygon Syndrome) fixed!\\nGrandia III - Random crash fixed!\\nSega Rally 2006 - SPS fixed!\\nSuper Monkey Ball - Graphics looking \'significantly\' improved!\\nX-Men Legends - Graphics completely fixed!\\n\\nOh and for racing fans, there is one other game showing significant\\nprogress!\\n\\n\x3c!-- TODO video --\x3e"},{"id":"/2006/site-improvements-part-1","metadata":{"permalink":"/pcsx2-net-www/blog/2006/site-improvements-part-1","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/site-improvements-part-1/index.mdx","source":"@site/blog/2006/site-improvements-part-1/index.mdx","title":"Site Improvements Part 1","description":"Since the launch of the new site last year, several improvements have been made to the site. Some of you may have noticed that the site is looking a bit different since yesterday","date":"2006-09-29T00:00:00.000Z","formattedDate":"September 29, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.485,"hasTruncateMarker":true,"authors":[{"name":"falcon4ever","url":"https://github.com/falcon4ever","imageURL":"https://github.com/falcon4ever.png","key":"falcon4ever"}],"frontMatter":{"authors":["falcon4ever"],"date":"2006-09-29T00:00:00.000Z","description":"Since the launch of the new site last year, several improvements have been made to the site. Some of you may have noticed that the site is looking a bit different since yesterday","draft":false,"tags":["devblog"],"title":"Site Improvements Part 1"},"prevItem":{"title":"A Little Fix Here, Alittle Fix There...Vvvroom!","permalink":"/pcsx2-net-www/blog/2006/a-little-fix-here-alittle-fix-there"},"nextItem":{"title":"Sound, Everywhere!","permalink":"/pcsx2-net-www/blog/2006/sound-everywhere"}},"content":"Since the launch of the new site last year, several improvements have\\nbeen made to the site. Some of you may have noticed that the site is\\nlooking a bit different since yesterday.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe site now contains several navigation panels to look up old news.\\nAnother (maybe) less noticeable improvement has been made to the page\\ncaching engine. Over the past year, PCSX2.net has been using a custom\\nwritten cache engine. Whilst this had been functioning well enough for\\nsometime now, it still had a few nasty bugs which where hard to trace,\\nleading to glitches such as *Page 1 of 0* .\\n\\nAlso due to a demand for a cleaner (and easier to maintain) code, we\\nhave been looking into several template engines. Thus the engine used to\\ncache pages has be switched.\\n\\nFor the current version of the portal, we\'re using the *Smarty* template\\nengine. More information on how smarty works will follow in a later blog\\narticle.\\n\\nThe pcsx2.net community is pretty large (including Windows and Linux\\nusers) it\'s no surprise that users are using different kinds of\\nbrowsers. To be compatible with most recent browsers, most pages are\\nXHTML 1.1 compatible (the compat page is the only exception at the\\nmoment), because of this standard, PCSX2.net should be viewable in\\nFirefox 1.5.x, IE6, IE7 beta, Opera 8.x and Opera 9.x.\\n\\nAn interesting result of this high browser compatibility, is that\\nPCSX2.net can be browsed on SONY\'s PSP unit! To give you an impression\\non how this looks, here are a few shots:\\n\\n**\\\\[News page\\\\]** and **\\\\[Screenshots page\\\\]**\\n\\n![](./img/site-impr1s.jpg)\\n![](./img/site-impr2s.jpg)\\n\\n\\n**\\\\[Compat page - using the search!\\\\]** and **\\\\[Contact page\\\\]**\\n\\n![](./img/site-impr3s.jpg)\\n![](./img/site-impr4s.jpg)\\n\\nThe upcoming weeks a new function will be added to the compat page. To\\ngive you a small hint:\\n\\n![](./img/site-impr5.gif)"},{"id":"/2006/sound-everywhere","metadata":{"permalink":"/pcsx2-net-www/blog/2006/sound-everywhere","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/sound-everywhere/index.mdx","source":"@site/blog/2006/sound-everywhere/index.mdx","title":"Sound, Everywhere!","description":"In the Good News for 0.9.2! post, made on 16th August, Refraction hinted at progress being made with the audio side of PCSX2","date":"2006-09-29T00:00:00.000Z","formattedDate":"September 29, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.655,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-09-29T00:00:00.000Z","description":"In the Good News for 0.9.2! post, made on 16th August, Refraction hinted at progress being made with the audio side of PCSX2","draft":false,"tags":["devblog"],"title":"Sound, Everywhere!"},"prevItem":{"title":"Site Improvements Part 1","permalink":"/pcsx2-net-www/blog/2006/site-improvements-part-1"},"nextItem":{"title":"Finally!","permalink":"/pcsx2-net-www/blog/2006/finally"}},"content":"In the **Good News for 0.9.2!** post, made on 16th August, Refraction\\nhinted at progress being made with the audio side of PCSX2, as many of\\nyou will of guessed - the clip posted was from **Final Fantasy X** ,\\nmore importantly from an FMV, which in all previous versions of PCSX2\\nhad no audio (99% of the time).\\n\\n\x3c!-- truncate --\x3e\\n\\nTo elaborate on this further; **GiGaHeRz** and **Saqib** have fixed\\nlarge portions of *ADMA* support, allowing for *all* videos to have\\naudio and many games now have full background music!\\n\\nA little work has been done by **Saqib** today which allows for audio\\nand video sync when recording, so I can demonstrate with a small video\\n(xVid) - the results of their hard work.\\n\\n\x3c!-- TODO legacy video --\x3e"},{"id":"/2006/finally","metadata":{"permalink":"/pcsx2-net-www/blog/2006/finally","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/finally/index.mdx","source":"@site/blog/2006/finally/index.mdx","title":"Finally!","description":"Current WIP on the PCSX2 0.9.2 beta has led to the PAL (SCES 5049x) version of Final Fantasy X being Playable","date":"2006-09-06T00:00:00.000Z","formattedDate":"September 6, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.855,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-09-06T00:00:00.000Z","description":"Current WIP on the PCSX2 0.9.2 beta has led to the PAL (SCES 5049x) version of Final Fantasy X being Playable","draft":false,"tags":["devblog"],"title":"Finally!"},"prevItem":{"title":"Sound, Everywhere!","permalink":"/pcsx2-net-www/blog/2006/sound-everywhere"},"nextItem":{"title":"Ssspsx Pad V1.7 Released!","permalink":"/pcsx2-net-www/blog/2006/ssspsx-pad-v1-7-released"}},"content":"Current WIP on the PCSX2 0.9.2 beta has led to the PAL (SCES 5049x)\\nversion of Final Fantasy X being **Playable** . Thanks to a variety of\\nfixes made by various members of the team, including;\\n\\n\x3c!-- truncate --\x3e\\n\\n-   MTGS / DC mode stability - Great for Dual Core / CPU users!\\n-   IPU fixes, including fully working sound in videos\\n-   Pause and sync issues, no more random hangs, looping etc\\n-   SPU2 fixes, including ADMA, and timing related issues.\\n\\nWith MTGS (Multi Threaded GS) / DC (Dual Core) features gaining improved\\nstability, the game can be played at \'enjoyable\' speeds, ranging from\\na base speed of 29 FPS in the most intense areas, right up to the peak\\nspeeds of over 140 FPS.[1]\\n\\nThis means that the US, Japanese and *finally* the European versions of\\nFinal Fantasy X are fully playable!\\n\\nEnjoy the shots posted on the PCSX2 official forums!\\n[here](http://forums.ngemu.com/pcsx2-official-forum/77644-0-9-2-final-fantasy-x-stable-playable.html%20)\\n\\n[1] Speed based on:\\nAMD64 X2 4400+ @ 2.2GHz | 1GB RAM | Any PS2.0 supporting GPU"},{"id":"/2006/ssspsx-pad-v1-7-released","metadata":{"permalink":"/pcsx2-net-www/blog/2006/ssspsx-pad-v1-7-released","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/ssspsx-pad-v1-7-released/index.mdx","source":"@site/blog/2006/ssspsx-pad-v1-7-released/index.mdx","title":"Ssspsx Pad V1.7 Released!","description":"Nagisa let us know in #pcsx2 that he released a new version of his great ps1/ps2 pad plugin","date":"2006-09-03T00:00:00.000Z","formattedDate":"September 3, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.345,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2006-09-03T00:00:00.000Z","description":"Nagisa let us know in #pcsx2 that he released a new version of his great ps1/ps2 pad plugin","draft":false,"tags":["devblog"],"title":"Ssspsx Pad V1.7 Released!"},"prevItem":{"title":"Finally!","permalink":"/pcsx2-net-www/blog/2006/finally"},"nextItem":{"title":"Good News For 0.9.2!","permalink":"/pcsx2-net-www/blog/2006/good-news-for-0-9-2"}},"content":"Nagisa let us know in #pcsx2 that he released a new version of his\\ngreat ps1/ps2 pad plugin, this time adding a x64 build as well!\\nHere\'s the changelog:\\n\\n\x3c!-- truncate --\x3e\\n\\nv1.7:\\n-Changed to DirectInput9.\\n-Fixed PADreadPort1/PADreadPort2 API.\\n-Fixed the confusion about PAD1/PAD2 settings.\\n-Added x64 DLL.\\n\\nYou can grab the source along with both x32 and x64 binaries here or in\\nour download section!\\n\\nGreat job nagisa!"},{"id":"/2006/good-news-for-0-9-2","metadata":{"permalink":"/pcsx2-net-www/blog/2006/good-news-for-0-9-2","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/good-news-for-0-9-2/index.mdx","source":"@site/blog/2006/good-news-for-0-9-2/index.mdx","title":"Good News For 0.9.2!","description":"We have recently had saqib and gigaherz working very hard on some parts of pcsx2 and its plugins","date":"2006-08-15T00:00:00.000Z","formattedDate":"August 15, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.5,"hasTruncateMarker":true,"authors":[{"name":"Refraction","url":"https://github.com/refractionpcsx2","imageURL":"https://github.com/refractionpcsx2.png","key":"refraction"}],"frontMatter":{"authors":["refraction"],"date":"2006-08-15T00:00:00.000Z","description":"We have recently had saqib and gigaherz working very hard on some parts of pcsx2 and its plugins","draft":false,"tags":["devblog"],"title":"Good News For 0.9.2!"},"prevItem":{"title":"Ssspsx Pad V1.7 Released!","permalink":"/pcsx2-net-www/blog/2006/ssspsx-pad-v1-7-released"},"nextItem":{"title":"Kosmos Escapes - Zerogs 0.95!","permalink":"/pcsx2-net-www/blog/2006/kosmos-escapes-zerogs-0-95"}},"content":"We have recently had **saqib** and **gigaherz** working very hard on\\nsome... parts of pcsx2 and its plugins, the result? it should be rather\\nenjoyable for you when we release 0.9.2!\\n\\n\x3c!-- truncate --\x3e\\n\\nI\'m not going to tell you what it is, I\'m sure you die hard fans will\\nall guess from this sound clip\\n\\n**Note:** The sound is a little choppy, but this is due to not running\\nit at quite full speed, plus background recording of the audio.\\n\\nA big well done to **saqib** and **gigaherz** !\\n\\n\x3c!-- TODO legacy **Pcsx2prog.mp3** - 1min 128kbps Stereo MP3 --\x3e"},{"id":"/2006/kosmos-escapes-zerogs-0-95","metadata":{"permalink":"/pcsx2-net-www/blog/2006/kosmos-escapes-zerogs-0-95","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/kosmos-escapes-zerogs-0-95/index.mdx","source":"@site/blog/2006/kosmos-escapes-zerogs-0-95/index.mdx","title":"Kosmos Escapes - Zerogs 0.95!","description":"ZeroGS KOSMOS 0.95 written by Zerofrog is out!","date":"2006-08-05T00:00:00.000Z","formattedDate":"August 5, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.035,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-08-05T00:00:00.000Z","description":"ZeroGS KOSMOS 0.95 written by Zerofrog is out!","draft":false,"tags":["devblog"],"title":"Kosmos Escapes - Zerogs 0.95!"},"prevItem":{"title":"Good News For 0.9.2!","permalink":"/pcsx2-net-www/blog/2006/good-news-for-0-9-2"},"nextItem":{"title":"Virtual Memory","permalink":"/pcsx2-net-www/blog/2006/virtual-memory"}},"content":"**ZeroGS KOSMOS 0.95** written by **Zerofrog** is out! This is *the*\\nplugin of choice for people using graphics cards supporting Pixel Shader\\n2.0 or 3.0.\\n\\n\x3c!-- truncate --\x3e\\n\\nZeroGS KOSMOS has greatly improved over its previous release, now it is\\n**significantly faster** , an example would be \'Final Fantasy XII\',\\nwhich is now 3x faster ingame!\\n\\nLess graphical flaws are present with many games looking absolutely\\nstunning, and even the least capable PS2.0 supporting cards, such as the\\nnVidia 5xxx series will show little to no loss in quality.\\n\\nZeroGS KOSMOS also supports the MTGS (Multi Threaded GS) feature of\\nPCSX2, this allows users with Dual Core or Multi CPU machines to get\\neven more speed out of PCSX2, however until the next release of PCSX2,\\nthe current MTGS issues will persist.\\n\\nZeroGS KOSMOS supports various new features including video recording,\\nBilinear Filtering, 2 and 4xAA, wireframe mode and more!\\n\\nNote that the newest [**DirectX\\nRuntime**](http://www.microsoft.com/download/en/details.aspx?id=35) is\\nrequired to run ZeroGS KOSMOS.\\n\\n**Final Edit:** All ATI issues have been solved along with other minor\\nbugs. If experiencing any problems, try redownloading (there are a\\ncouple of versions of 0.95.2 out there).\\n\\n:: Download ZeroGS KOSMOS 0.95.2 here\\n:: Feel free to post shots from ZeroGS KOSMOS\\n[here](http://forums.ngemu.com/pcsx2-official-forum/74060-post-your-pcsx2-0-9-1-screenshots-here.html)"},{"id":"/2006/virtual-memory","metadata":{"permalink":"/pcsx2-net-www/blog/2006/virtual-memory","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/virtual-memory/index.mdx","source":"@site/blog/2006/virtual-memory/index.mdx","title":"Virtual Memory","description":"The Playstation 2 uses co-processor 0 to implement virtual paging","date":"2006-07-30T00:00:00.000Z","formattedDate":"July 30, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":3.845,"hasTruncateMarker":true,"authors":[{"name":"zerofrog","key":"zerofrog"}],"frontMatter":{"authors":["zerofrog"],"date":"2006-07-30T00:00:00.000Z","description":"The Playstation 2 uses co-processor 0 to implement virtual paging","draft":false,"tags":["devblog"],"title":"Virtual Memory"},"prevItem":{"title":"Kosmos Escapes - Zerogs 0.95!","permalink":"/pcsx2-net-www/blog/2006/kosmos-escapes-zerogs-0-95"},"nextItem":{"title":"Kosmos - Zerogs Just Evolved.","permalink":"/pcsx2-net-www/blog/2006/kosmos-zerogs-just-evolved"}},"content":"The Playstation 2 uses co-processor 0 to implement virtual paging. Even\\nwithout COP0, the Playstation 2 memory map is pretty complex and the\\nmapping can change depending on which processor you use to read the\\nmemory from. A simple version of how the default mapping looks from the\\nEmotion Engine side is:\\n\\n\x3c!-- truncate --\x3e\\n\\nThe 32Mb of main memory occupying 0000\\\\_0000 - 01ff\\\\_ffff\\nHardware registers occupying 1000\\\\_0000 - 1000\\\\_ffff\\nVU/BIOS/SPU2 addresses in 1100\\\\_0000-1fff\\\\_ffff\\nSpecial kernel modes etc in 8000\\\\_0000-bfff\\\\_ffff\\nA scratch pad in some other address\\n...And of course can\'t forget the hidden addresses (thanks SONY)\\n\\nTo make matters worse, these mappings can change depending on the\\nsetting of COP0. (Note that at the time of writing, Pcsx2 doesn\'t\\nemulate even half of COP0 correctly.) The simplest and most\\nstraightforward way to emulate this is to have another memory layer\\nthrough a software Translation-Lookaside-Buffer (TLB). You pass it the\\nPS2 address, and out comes the real physical address or some special\\ncode signifying a hardware register, etc. The problem is that **every\\nread/write** has to be preceded by a TLB lookup. Considering that\\nreads/writes are as common as addition, that\'s a lot of wasted cycles.\\n\\nWell, the OS also uses virtual memory. In fact, every process has its\\nown special virtual memory driven by a real hardware TLB. If we could\\nget away by mapping the 4Gb PS2 memory map onto the process\'s virtual\\nmemory, we could eliminate the need for the software translation (Figure\\n1). Looking at the virtual manipulation functions Windows XP offers,\\nthere are two major problems with this:\\n\\n![](./img/vmem.jpg)\\n\\n1 WindowsXP reserves more than half the address space for OS specific\\nstuff. A good amount is also reserved for all of Pcsx2\'s working memory,\\nexecutable code, and plugins (especially ZeroGS). It looks like we are\\nleft with less than 1.5 Gb of address range to implement the 4Gb PS2\\nmemory map. Note that this problem doesn\'t exist on 64bit operating\\nsystems where the address range is practically... infinite (don\'t quote\\nme on this 20 years down the road).\\n\\n2 Playstation 2 allows more than one virtual page to point to the same\\nphysical page, Windows XP doesn\'t (I don\'t know about Linux). Assume\\nthat PS2 address 0x1000 points to the same physical page as address\\n0x0000, each page is 4Kb. Now a write occurs at 0x1000. The game can\\nretrieve that same value just by reading from 0x0000. In Windows XP,\\nthis has to be two different pages; so unless some clever\\nsolution/technology is discovered, we could kiss our VM dreams\\ngoodbye.\\n\\nThe first problem was solved somehow by introducing special address\\ntransformations before a read/write occurs.\\n\\nAnd thankfully a clever technology presented itself for the second\\nproblem: **Address Windowing Extensions** . This lets Pcsx2 handle the\\nactual physical page instead of a virtual page. We still can\'t map two\\nvirtual pages to the same physical page; however, what we can do instead\\nis switch the mapping of the physical page as many times as needed! To\\nachieve this, Pcsx2 hacks into the root exception handler and intercepts\\nevery exception the program generates. Whenever an illegal virtual page\\nis accessed (ie, no physical page mapped to it), Pcsx2 gets a\\nEXCEPTION\\\\_ACCESS\\\\_VIOLATION then it remaps the correct physical page to\\nthat empty virtual page and returns. Although I haven\'t calculated\\nprecisely, I\'m pretty sure that switching physical pages around is\\npretty expensive, computationally speaking. So all this works fine under\\nthe assumption that game developers won\'t be crazy and access two\\nvirtual pages mapping to the same physical page back-and-forth\\nfrequently... \\\\[pause\\\\].\\n\\nAlas, we were wrong... again (see floating-point article). It turns out\\nthat there are uncached and cached address ranges; so it is optimal to\\ndo such a bi-mapping trick: write in one virtual range and read from\\nanother. Pcsx2 tries to detect such cases and work around, but there\'s\\nno clean solution.\\n\\nAnd I\'m going to stop here before this becomes a book.\\n\\nSo the ultimate question is: why doesn\'t VM work on some computers with\\n1Gb of RAM and the newest updates, while works on others? Turns out that\\nreal-time monitoring applications like to take up some of the 1.5 Gb of\\nleft over addresses on certain processes. (this might be OS specific\\nprograms too). I have also observed that performance/debugging monitors\\nlike NvPerfHud do similar tricks. There probably might be other reasons\\nfor VM builds of Pcsx2 not working because virtual memory is a pretty\\ncomplicated issue.\\n\\n**Moral of the blog** Read an OS book. I recommend [**Operating System\\nConcepts**](http://www.amazon.com/gp/product/0471694665/ref=sr_11_1/102-0719927-1309710?ie=UTF8)\\n(the dinosaur book) by Abraham Silberschatz, Peter Baer Galvin, Greg\\nGagne."},{"id":"/2006/kosmos-zerogs-just-evolved","metadata":{"permalink":"/pcsx2-net-www/blog/2006/kosmos-zerogs-just-evolved","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/kosmos-zerogs-just-evolved/index.mdx","source":"@site/blog/2006/kosmos-zerogs-just-evolved/index.mdx","title":"Kosmos - Zerogs Just Evolved.","description":"Yes you read that correctly, and no it\'s not April 1st!","date":"2006-07-28T00:00:00.000Z","formattedDate":"July 28, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.575,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-07-28T00:00:00.000Z","description":"Yes you read that correctly, and no it\'s not April 1st!","draft":false,"tags":["devblog"],"title":"Kosmos - Zerogs Just Evolved."},"prevItem":{"title":"Virtual Memory","permalink":"/pcsx2-net-www/blog/2006/virtual-memory"},"nextItem":{"title":"Nightmare On Floating Point Street","permalink":"/pcsx2-net-www/blog/2006/nightmare-on-floating-point-street"}},"content":"Final Fantasy X: 35-128 FPS\\nGrandia 3: 37-60 FPS\\n\\n\\n...Yes you read that correctly, and no it\'s not April 1st!\\n\\n\x3c!-- truncate --\x3e\\n\\n**WAIT** !!..Okay so you knew there would be a catch\\n\ud83d\ude1b\\n\\n**MTGS** (Multi Threaded GS) has recently become much more stable thanks\\nto *zerofrog* and his recent improvements to **ZeroGS** (a GS plugin for\\nPCSX2). MTGS allows for people with **Dual Core** CPU\'s to run PCSX2 at\\nsignificantly improved speeds by putting the graphics side of PCSX2 onto\\na separate core.\\n\\nZeroGS itself has also gone through a **major** overhaul, making it\\nsignificantly faster, even without the use of MTGS, so the Single Core\\ncrowd will also see a speed boost via this plugin!\\n\\nZeroGS offers more features in the up coming release, with improved AA,\\nwireframe mode, video recording, bilinear filtering and pre-defined\\nresolutions to choose from.\\n\\nSo whats the catch? Well ZeroGS requires **Pixel Shader 2.0** , so you\\n*need* a graphics card capable of this shader model (I recommend the\\nGeForce 6600GT for budget users).\\n\\nThe other catch is somewhat obvious, you will need a Dual Core CPU to\\nsupport MTGS mode, eg; AMD X2\'s, Opterons and of course the new\\nConroe.\\n\\nSo when does this new ZeroGS come out? Well for now no ETA, and please\\ndon\'t be nagging us about it!\\n\\nEnough of the text, lets move onto my favorite section - eyecandy!\\n\\nThe shots where taken on the following spec machine:\\n\\n-   Opteron 165 1.8Ghz @ 2.5Ghz (9x280)\\n-   1Gb DDR550 Dual Channel @ DDR560\\n-   Gainward BLISS 7900 GTX 512Mb\\n-   SoundBlaster Audigy 4\\n\\nNote FPS is **reduced** by ~50% in these shots because they where taken\\nwith Bilinear Filtering, and 4xAA enabled:\\n\\n<Image cols={4} src={require(\\"./img/KOSMOS_1_T.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/KOSMOS_2_T.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/KOSMOS_3_T.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/KOSMOS_4_T.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/KOSMOS_5_T.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/KOSMOS_6_T.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/KOSMOS_7_T.jpg\\").default} />\\n<Image cols={4} src={require(\\"./img/KOSMOS_8_T.jpg\\").default} />"},{"id":"/2006/nightmare-on-floating-point-street","metadata":{"permalink":"/pcsx2-net-www/blog/2006/nightmare-on-floating-point-street","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/nightmare-on-floating-point-street/index.mdx","source":"@site/blog/2006/nightmare-on-floating-point-street/index.mdx","title":"Nightmare On Floating Point Street","description":"It is very hard to emulate the floating-point calculations of the R5900 FPU and the Vector Units on an x86 CPU because the Playstation 2 does not follow the IEEE standard","date":"2006-07-24T00:00:00.000Z","formattedDate":"July 24, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.9,"hasTruncateMarker":true,"authors":[{"name":"zerofrog","key":"zerofrog"}],"frontMatter":{"authors":["zerofrog"],"date":"2006-07-24T00:00:00.000Z","description":"It is very hard to emulate the floating-point calculations of the R5900 FPU and the Vector Units on an x86 CPU because the Playstation 2 does not follow the IEEE standard","draft":false,"tags":["devblog"],"title":"Nightmare On Floating Point Street"},"prevItem":{"title":"Kosmos - Zerogs Just Evolved.","permalink":"/pcsx2-net-www/blog/2006/kosmos-zerogs-just-evolved"},"nextItem":{"title":"Introducing Devblogs","permalink":"/pcsx2-net-www/blog/2006/introducing-devblogs"}},"content":"It is very hard to emulate the floating-point calculations of the R5900\\nFPU and the Vector Units on an x86 CPU because the Playstation 2 does\\nnot follow the IEEE standard. Multiplying two numbers on the FPU, VU,\\nand an x86 processor can give you 3 different results all differing by a\\ncouple of bits! Operations like square root and division are even more\\nimprecise.\\n\\n\x3c!-- truncate --\x3e\\n\\nOriginally, we thought that a couple of bits shouldn\'t matter, that game\\ndevelopers would be crazy to rely on such precise calculation. Floating\\npoints are mostly used for world transformations or interpolation\\ncalculations, so no one would care if their Holy Sword of Armageddon was\\n0.00001 meters off from the main player\'s hand. To put it shortly, we\\nwere wrong and game developers are crazier than we thought. Games\\nstarted breaking just by changing the floating point rounding mode!\\n\\nWhile rounding mode is a problem, the bigger nightmare is the\\nfloating-point infinities. The IEEE standard states that when a number\\noverflows (meaning that it is larger than 3.4028234663852886E+38), the\\nresult will be infinity. Any number multiplied by infinity is infinity\\n(even 0 \\\\* infinity = infinity). That sounds great until you figure out\\nthat the VUs don\'t support infinities. Instead they clamp all large\\nnumbers to the max floating point possible. This discrepancy breaks a\\nlot of games!\\n\\nFor example, let\'s say a game developer tries to normalize a zero vector\\nby dividing by its length, which is 0. On the VU, the end result will be\\n(0,0,0). On x86/IEEE, the result will be (infinity, infinity, infinity).\\nNow if the game developer uses this vector to perturb some faces for\\nartificial hair or some type of animation, all final positions on the\\nPS2 will remain the same. All final positions on x86 will go to\\ninfinity... and there goes the game\'s graphics, now figure out where the\\nproblem occurred.\\n\\nThe simplest solution is to clamp the written vector of the current\\ninstruction. This requires 2 SSE operations and is SLOW; and it doesn\'t\\nwork sometimes. To top it off, you can never dismiss the fact that game\\ndevelopers can be loading bad floating-point data to the VUs to begin\\nwith! Some games zero out vectors by multiplying them with a zero, so\\nthe VU doesn\'t care at all what kind of garbage the original vector\'s\\ndata has, x86 does care.\\n\\nThese two problems make floating-point emulation very hard to do fast\\nand accurate. The range of bugs are from screen flickering when a fade\\noccurs, to disappearing characters, to spiky polygon syndrome (the most\\ncommon problem and widely known as SPS).\\n\\nIn the end Pcsx2 does all its floating-point operations with SSE since\\nit is easier to cache the registers. Two different rounding modes are\\nused for the FPU and VUs. Whenever a divide or rsqrt occur on the FPU,\\noverflow is checked. Overflow is checked much more frequently with the\\nVUs. The fact that VUs handle both integer and floating-point data in\\nthe same SSE register makes the checking a little longer. In the future,\\nPcsx2 will read the rounding mode and overflow settings from the patch\\nfiles. This is so that all games can be accommodated with the\\nbest/fastest settings.\\n\\n**Moral of the blog** When comparing two floating point numbers *a* and\\n*b* , never use *a* == *b* . Instead use something along the lines of\\n\\n```\\nfabs(a-b) < epsilon\\n```\\n\\n> where *epsilon* is some very small number."},{"id":"/2006/introducing-devblogs","metadata":{"permalink":"/pcsx2-net-www/blog/2006/introducing-devblogs","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/introducing-devblogs/index.mdx","source":"@site/blog/2006/introducing-devblogs/index.mdx","title":"Introducing Devblogs","description":"Today marks the start of a new section called Blog, this is an area for the development team to write technical articles and day-to-day happenings","date":"2006-07-23T00:00:00.000Z","formattedDate":"July 23, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.73,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-07-23T00:00:00.000Z","description":"Today marks the start of a new section called Blog, this is an area for the development team to write technical articles and day-to-day happenings","draft":false,"tags":["devblog"],"title":"Introducing Devblogs"},"prevItem":{"title":"Nightmare On Floating Point Street","permalink":"/pcsx2-net-www/blog/2006/nightmare-on-floating-point-street"},"nextItem":{"title":"Fix Fusion","permalink":"/pcsx2-net-www/blog/2006/fix-fusion"}},"content":"Today marks the start of a new section called **Blog** , this is an area\\nfor the development team to write technical articles and day-to-day\\nhappenings. This is something we hope you find an interesting read, and\\na general resource for technical information with an insight into the\\nPCSX2 team.\\n\\n\x3c!-- truncate --\x3e\\n\\nYou will find entries about on a variety of subjects, including\\ntechnical articles, site development, humorous aspects of working on a\\nproject such as this and the \'technical challenges\' that are met every\\nday.\\n\\nYou may of gathered that this blogs section will not be a \'light read\',\\nsuch as the primary news section. Blogs are aimed at the technically\\nminded, though I dare say there shall be light hearted entries . Due to\\nthe technical nature of this blogs section, the forums will not be\\nsupporting general questions relating to blog entries."},{"id":"/2006/fix-fusion","metadata":{"permalink":"/pcsx2-net-www/blog/2006/fix-fusion","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/fix-fusion/index.mdx","source":"@site/blog/2006/fix-fusion/index.mdx","title":"Fix Fusion","description":"Work has never stopped since the release of PCSX2 0.9.1, in fact it rarely does","date":"2006-07-12T00:00:00.000Z","formattedDate":"July 12, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.805,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-07-12T00:00:00.000Z","description":"Work has never stopped since the release of PCSX2 0.9.1, in fact it rarely does","draft":false,"tags":["devblog"],"title":"Fix Fusion"},"prevItem":{"title":"Introducing Devblogs","permalink":"/pcsx2-net-www/blog/2006/introducing-devblogs"},"nextItem":{"title":"PCSX2 0.9.1 - Release","permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9-1-release"}},"content":"Work has never stopped since the release of **PCSX2 0.9.1** , in fact it\\nrarely does\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\nRefraction has made significant fixes to counters making games much more\\nstable. For instance, *Final Fantasy X-2* is now stable enough to be\\nclassed as \\"playable\\". Disgaea will play story scenes without\\nfreezing, and Resident Evil 4 is much more stable during gameplay!\\n\\nSaqib has been bustling away with IPU and more and more games are\\nplaying videos without looping or crashing mid-way through playback.\\nThis fixes games such as Grand Theft Auto III, Final Fantasy X and\\nWipEout Fusion.\\n\\nZerofrog, busy as ever, has been fixing vuREC0/1 issues and making those\\ngames that do go \'Ingame\' look correct including: Rayman M, Silent\\nHill 2, and a personal favorite **WipEout Fusion** .\\n\\nSaqibs IPU fixes combined with ZeroFrogs work on the graphical issues (I\\nbugged him to death about this game\\n\ud83d\ude1b ) have made **WipEout Fusion** playable!\\n\\n:: [Screenshots\\nThread](http://forums.ngemu.com/pcsx2-official-forum/74507-fix-fusion-pcsx2-0-9-2-wip.html)"},{"id":"/2006/pcsx2-0-9-1-release","metadata":{"permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9-1-release","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/pcsx2-0-9-1-release/index.mdx","source":"@site/blog/2006/pcsx2-0-9-1-release/index.mdx","title":"PCSX2 0.9.1 - Release","description":"PCSX2 0.9.1 is now available to download","date":"2006-07-03T00:00:00.000Z","formattedDate":"July 3, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.38,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-07-03T00:00:00.000Z","description":"PCSX2 0.9.1 is now available to download","draft":false,"tags":["devblog"],"title":"PCSX2 0.9.1 - Release"},"prevItem":{"title":"Fix Fusion","permalink":"/pcsx2-net-www/blog/2006/fix-fusion"},"nextItem":{"title":"Level Up! - Erm Speed Up!","permalink":"/pcsx2-net-www/blog/2006/level-up-erm-speed-up"}},"content":"**PCSX2 0.9.1** is now available to download\\n\\n\x3c!-- truncate --\x3e\\n\\nThis release brings a *significant* speed increase to the majority of\\ngames, this is due to a complete rewrite of the EE and VU recompilers.\\nVarious other improvements have increased compatibility with games, you\\nwill be able to check your game against the included compatibility list,\\nwhich lists nearly **1000** titles (Please note at time of release list\\nis not guaranteed 100% accurate).\\n\\nWhilst the new recompilers are a major improvement, the recompilers are\\nnot 100% accurate at present, this *may* result in a number of broken\\ngames.\\n\\nA further release will be created in the future enhancing upon the\\noverall compatibility of the new recompilers. This is part of a new\\nrelease schedule where we plan to be releasing more frequently; however,\\ndo not make requests for releases or ask when such a release will be\\nproduced.\\n\\nAs ever we have opened a \'screenshots\' thread for you to post in, and\\nthe forums are there for you to discuss the project and ask questions.\\n\\nYou will also be aware that the **Hot Shots Contest** started earlier\\nthis month. Given the lack of entries so far, we are extending the\\ncontest deadline until the **15th July 2006** , you may enter shots from\\nPCSX2 0.9.1 (recommended) or 0.9, those of you who have already entered\\nare allowed to update your posts with new submissions if you wish.\\n\\nHopefully people are more imaginative, and post less *Final Fantasy*\\nshots\\n\ud83d\ude09\\n\\n**EDIT:** A regression bug was fixed. Now Makai Kingdom, Grandia II,\\nRez, and Taito Legends should work. It is recommended that you\\nredownload 0.9.1.\\n\\n:: [Screenshots\\nThread](http://forums.ngemu.com/pcsx2-official-forum/74060-post-your-pcsx2-0-9-1-screenshots-here.html)"},{"id":"/2006/level-up-erm-speed-up","metadata":{"permalink":"/pcsx2-net-www/blog/2006/level-up-erm-speed-up","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/level-up-erm-speed-up/index.mdx","source":"@site/blog/2006/level-up-erm-speed-up/index.mdx","title":"Level Up! - Erm Speed Up!","description":"In a previous news post we \'hinted\' at work being done by **zerofrog** with regards to a new *eeREC*","date":"2006-06-26T00:00:00.000Z","formattedDate":"June 26, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.825,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-06-26T00:00:00.000Z","description":"In a previous news post we \'hinted\' at work being done by **zerofrog** with regards to a new *eeREC*","draft":false,"tags":["devblog"],"title":"Level Up! - Erm Speed Up!"},"prevItem":{"title":"PCSX2 0.9.1 - Release","permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9-1-release"},"nextItem":{"title":"Interview Refraction","permalink":"/pcsx2-net-www/blog/2006/interview-refraction"}},"content":"In a previous news post we \'hinted\' at work being done by **zerofrog**\\nwith regards to a new *eeREC* (Emotion Engine Recompiler) and *vuREC*\\n(Vector Unit Recompiler (VU0 and VU1)).\\n\\n\x3c!-- truncate --\x3e\\n\\nThe goal of this complete rewrite is to increase speed, whilst at the\\nsame time improve, or at least maintain current compatibility.\\n\\nThis rewrite has been going on for sometime now, and is starting to\\ntruly show fascinating results, many games now run up to 4x faster, an\\nexample of this would be *Sonic Riders* - previous betas ran at 3.x to\\n12.x FPS whilst racing, it now runs at 12.x to 35.x FPS\\n\\nTesting and bug chasing continues, meanwhile a\\n[thread](http://forums.ngemu.com/pcsx2-official-forum/73799-level-up-erm-speed-up.html)\\nhas been created for testers and developers to demonstrate - in\\nscreenshot form some of these speed increases. Take **careful** note of\\nthe CPU specification given in the post, for instance **Refraction** can\\nget significantly faster speeds than myself\\n\\n:: [Screenshots\\nthread](http://forums.ngemu.com/pcsx2-official-forum/73799-level-up-erm-speed-up.html)\\n- Check it out, plenty more to come!"},{"id":"/2006/interview-refraction","metadata":{"permalink":"/pcsx2-net-www/blog/2006/interview-refraction","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/interview-refraction/index.mdx","source":"@site/blog/2006/interview-refraction/index.mdx","title":"Interview Refraction","description":"Keith from the emulation64 invited one of our developers, Refraction, for a spotlight interview","date":"2006-06-18T00:00:00.000Z","formattedDate":"June 18, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.73,"hasTruncateMarker":true,"authors":[{"name":"falcon4ever","url":"https://github.com/falcon4ever","imageURL":"https://github.com/falcon4ever.png","key":"falcon4ever"}],"frontMatter":{"authors":["falcon4ever"],"date":"2006-06-18T00:00:00.000Z","description":"Keith from the emulation64 invited one of our developers, Refraction, for a spotlight interview","draft":false,"tags":["devblog"],"title":"Interview Refraction"},"prevItem":{"title":"Level Up! - Erm Speed Up!","permalink":"/pcsx2-net-www/blog/2006/level-up-erm-speed-up"},"nextItem":{"title":"100,000 Visitors - Present For You!","permalink":"/pcsx2-net-www/blog/2006/100k-visitors-present-for-you"}},"content":"Since the release of 0.9 the developers have worked hard to improve\\nPCSX2. Looking at the progress zerofrog is making, the future looks very\\npromising.\\n\\n\x3c!-- truncate --\x3e\\n\\nBut there is more! **Keith** from the **[emulation64\\nnetwork](http://www.emulation64.com)** invited one of our developers,\\n**Refraction** , for a spotlight interview.\\n\\n***Q :** Could you give us some information regarding the current state\\nof your projects?\\n**A :** Well PCSX2 is going well, we have started to focus a bit more on\\nspeed as quite a few games are now working in comparison to older\\nversions, but we are still bug finding, slowly trying to get in the bits\\nwe have missed and rewriting parts that are completely bugged\\n\ud83d\ude1b*\\n\\nCheck out the full interview:\\n:: [Interview with\\nRefraction](http://www.emulation64.com/spotlights/26/)\\n\\nPrevious spotlight interviews:\\n:: [Interview with Shadow](http://www.emulation64.com/spotlights/8/)\\n:: [Interview with asadr](http://www.emulation64.com/spotlights/6/)\\n:: [Interview with\\nlinuzappz](http://www.emulation64.com/spotlights/18/)\\n:: [Interview with linuzappz\\n(old)](http://www.emulation64.com/spotlights/1/)"},{"id":"/2006/100k-visitors-present-for-you","metadata":{"permalink":"/pcsx2-net-www/blog/2006/100k-visitors-present-for-you","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/100k-visitors-present-for-you/index.mdx","source":"@site/blog/2006/100k-visitors-present-for-you/index.mdx","title":"100,000 Visitors - Present For You!","description":"With 100,000 unique visitors having visited this site in it\'s short time online (13 days) both myself and Falcon4ever are happy it\'s gone so smoothly","date":"2006-06-13T00:00:00.000Z","formattedDate":"June 13, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.84,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-06-13T00:00:00.000Z","description":"With 100,000 unique visitors having visited this site in it\'s short time online (13 days) both myself and Falcon4ever are happy it\'s gone so smoothly","draft":false,"tags":["devblog"],"title":"100,000 Visitors - Present For You!"},"prevItem":{"title":"Interview Refraction","permalink":"/pcsx2-net-www/blog/2006/interview-refraction"},"nextItem":{"title":"Hot Shots Contest!","permalink":"/pcsx2-net-www/blog/2006/hot-shots-contest"}},"content":"With **100,000** unique visitors having visited this site in it\'s short\\ntime online (13 days), both myself and *Falcon4ever* are happy it\'s\\ngone so smoothly.\\n\\n\x3c!-- truncate --\x3e\\n\\nSo a video of *Makai Kingdom* in action has been recorded for you lot to\\ndownload and enjoy, including audio (speech, music, sound effects).\\n\\nSo you are thinking **woopiee** a video, wow, that\'s shocking..., well hold that thought, what if I told you\\nthat the video only had to be sped up by about 10 FPS to get to 60 FPS,\\ne.g. what you see is practically what it\'s emulated at!\\n\\nWhat?!! near full speed emulation?!! impossible I hear you cry, well I\\ndid tell you that **zerofrog** was re-writing the eeREC and vuREC\\n\ud83d\ude09 There\'s a lot to do, as in all honesty *many*\\ngames got broken with bugs during the transition from the old rec, to\\nthe new, but he\'s still not blinking, and he is avoiding sleep, so\\nhopefully more news eventually!\\n\\n\x3c!-- TODO legacy video! --\x3e"},{"id":"/2006/hot-shots-contest","metadata":{"permalink":"/pcsx2-net-www/blog/2006/hot-shots-contest","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/hot-shots-contest/index.mdx","source":"@site/blog/2006/hot-shots-contest/index.mdx","title":"Hot Shots Contest!","description":"A lot is going on at the moment, behind the scenes - quietly in dark dank corners of the world, zerofrog barely ever blinking is re-writing the eeREC and vuREC","date":"2006-06-04T00:00:00.000Z","formattedDate":"June 4, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":2.105,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-06-04T00:00:00.000Z","description":"A lot is going on at the moment, behind the scenes - quietly in dark dank corners of the world, zerofrog barely ever blinking is re-writing the eeREC and vuREC","draft":false,"tags":["devblog"],"title":"Hot Shots Contest!"},"prevItem":{"title":"100,000 Visitors - Present For You!","permalink":"/pcsx2-net-www/blog/2006/100k-visitors-present-for-you"},"nextItem":{"title":"PCSX2 - New Site, New Features!","permalink":"/pcsx2-net-www/blog/2006/pcsx2-new-site-new-features"}},"content":"A lot is going on at the moment, behind the scenes - quietly in dark\\ndank corners of the world, zerofrog barely ever blinking is re-writing\\nthe eeREC and vuREC...\\n\\n\x3c!-- truncate --\x3e\\n\\nWhilst this incredibly laborious process continues, we have something\\nfor you to all enjoy!:\\n\\n**Hot Shots Contest!**\\nSubmit the very finest screenshot you can produce via the **current**\\n0.9 release of **PCSX2** , whether it be some spectacular vista of a 3D\\nlandscape, you defeating the end boss of a game, pulling off a perfect\\ncombo, or simply the funniest glitch you\'ve found, we want it and we\\nwant to be amazed!\\n\\nThe 1st, **to** 5th place entries will get their shot and name\\nimmortalized on the PCSX2 website, but not only that, the overall winner\\nwill get a **Universal PS2 Controller Adapter** Provided by the\\nfantastic guys over at **SpelKontroll**\\n\\n-   Converts any PS/PS2 game controller for use on Xbox, Gamecube or PC\\nUSB.\\n-   Supports vibration feedback (XBox/GC/PC USB).\\n-   Works with steering wheels, joysticks.\\n-   Is compatible with PS/PS2 dance mat which can be converted to use on\\nXBOX or GC consoles.\\n\\n**How to Enter**\\nYou must be a member of either [EmuTalk](http://www.emutalk.net) or\\n[Emuforums](http://forums.ngemu.com/) (Both are free to register at),\\nand post your entries in the official threads for this contest:\\n\\n-   [NGemu Official\\nThread](http://forums.ngemu.com/pcsx2-official-forum/73014-hot-shots-contest-entries.html)\\n-   [EmuTalk Official\\nThread](http://www.emutalk.net/showthread.php?t=35566)\\n\\n**Rules and additional information**\\n\\n-   A maximum of **two** entries per person.\\n-   All entries must be posted before the end of this month **30 June\\n2006** . No late entries will be considered.\\n-   Fake, or other bogus images will automatically disqualify you from\\nthe contest\\n-   Images can be taken from any available GS plugin, no image smaller\\nthan 640x480. Please make sure only GS window is captured, we **DO\\nNOT** want to see your desktop! Fullscreen would be a good option!\\n-   Winners Prize is **NOT** refundable/exchangeable.\\n-   No email entries will be accepted, all images **must** be attached\\nin a reply to the official thread.\\n\\nJudging will take place during the first week of July, where by **10**\\nimages will be chosen, and posted on the forums, for everyone to vote\\nfor. The **5** most voted for will get their image and name on the site,\\nand the **1st** place entry will be awarded the adapter! Please be\\naround during this time as a judge will contact you to arrange delivery\\nof the adapter!\\n\\nGood luck to everyone!\\n\\nVisit **SpelKontroll** for great deals on adapters, PSPs and other games\\nrelated material!"},{"id":"/2006/pcsx2-new-site-new-features","metadata":{"permalink":"/pcsx2-net-www/blog/2006/pcsx2-new-site-new-features","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/pcsx2-new-site-new-features/index.mdx","source":"@site/blog/2006/pcsx2-new-site-new-features/index.mdx","title":"PCSX2 - New Site, New Features!","description":"We\'re back!!","date":"2006-06-01T00:00:00.000Z","formattedDate":"June 1, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.38,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-06-01T00:00:00.000Z","description":"We\'re back!!","draft":false,"tags":["devblog"],"title":"PCSX2 - New Site, New Features!"},"prevItem":{"title":"Hot Shots Contest!","permalink":"/pcsx2-net-www/blog/2006/hot-shots-contest"},"nextItem":{"title":"PCSX2 0.9","permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9"}},"content":"We\'re back!! Over the past three weeks you may of noticed that this\\nsite was nothing more than some panties with a BBL sign (didn\'t\\nsaqib\'s body look hawt) or a daft reference to PCSX3!\\n\\n\x3c!-- truncate --\x3e\\n\\nWell the old site was horribly broken and had a variety of flaws, so\\nmyself and the hardworking **Falcon4ever** ripped the site down to give\\nyou this new one! Voila! We hope you like.\\n\\nA variety of new features and improvements have been impl4mented, I\\nshall just list a few:\\n\\n-   Compat list is paginated - reducing load, makes browsing faster to!\\n-   Compat list is searchable!\\n-   Greatly reduced load times\\n-   No framesets - We all hated them, now they\'re no more!\\n-   No Popups - No security warnings, flashier to behold, and neater.\\n-   Clearer navigation, with multi tier menus, plain text navigation for\\neasy translation!\\n\\nOne **key** feature is the return of the Donate button\\n\ud83d\ude09\\n\\nThe site has full **Firefox** support, however there are some \'minor\'\\nflaws with IE at present (just making IE6 actually comply was fun\\nenough!), which will be sorted very soon.\\n\\nBe sure you check out *Downloads>Videos* for two new videos, and check\\nthere regularly for new footage!\\n\\nWe now also have a working screenshots system on the sites Backend, we\\nshall be running a mini competition on the forums for everyone to submit\\ntheir \'sexiest\' screenshot, the best shots will go into the sites\\nscreenshot section, with your name immortalized\\n\ud83d\ude09 More info on that soon.\\n\\nFinally a massive thanks to the testing team, the devs and poor old\\n**Falcon4ever**, whom I nagged to death day and night!"},{"id":"/2006/pcsx2-0-9","metadata":{"permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/pcsx2-0-9/index.mdx","source":"@site/blog/2006/pcsx2-0-9/index.mdx","title":"PCSX2 0.9","description":"Yes folks PCSX2 0.9 is here, by no means gracefully, but it is here!","date":"2006-04-03T00:00:00.000Z","formattedDate":"April 3, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.905,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-04-03T00:00:00.000Z","description":"Yes folks PCSX2 0.9 is here, by no means gracefully, but it is here!","draft":false,"tags":["devblog"],"title":"PCSX2 0.9"},"prevItem":{"title":"PCSX2 - New Site, New Features!","permalink":"/pcsx2-net-www/blog/2006/pcsx2-new-site-new-features"},"nextItem":{"title":"PCSX2 Rocked The Expo At Fast-Nu","permalink":"/pcsx2-net-www/blog/2006/pcsx2-rocked-the-expo-at-fast-nu"}},"content":"Yes folks **PCSX2 0.9** is here, by no means gracefully, but it is\\nhere!\\n\\n\x3c!-- truncate --\x3e\\n\\nYou can now enjoy **PCSX2 0.9** a faster and more compatible PS2\\nemulator, it\'s been a year since *0.8.1* was released so you will see\\nmany dramatic changes!\\n\\nMany games are now going ingame, and some are even playable (check out\\ngames like Disgaea, or Silent Hill 4!)\\n\\nOn behalf of all the team I would like to say a big **HELLO** to\\nlinuzappz, and a large thank you for everything he\'s done for us prior\\nto him leaving the team!\\n\\nGiven the site troubles over the past 24 hours, I can assure you that\\nmyself and several devs right now are totally bald from ripping our hair\\nout!\\n\\nThus the download is being hosted off site, and some aspects of the site\\nmay still be broken, we\'re working on this, but please give us some\\ntime!\\n\\n**NOTE: There will be no Linux build for a good few weeks! so apologies\\nto all linux users!**\\n\\n**NOTE: PLEASE READ THE HELP FILE BEFORE RUNNING PCSX2!**"},{"id":"/2006/pcsx2-rocked-the-expo-at-fast-nu","metadata":{"permalink":"/pcsx2-net-www/blog/2006/pcsx2-rocked-the-expo-at-fast-nu","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/pcsx2-rocked-the-expo-at-fast-nu/index.mdx","source":"@site/blog/2006/pcsx2-rocked-the-expo-at-fast-nu/index.mdx","title":"PCSX2 Rocked The Expo At Fast-Nu","description":"PCSX2 won the Grand Prize! - Best software out of 48-50 entries!","date":"2006-03-26T00:00:00.000Z","formattedDate":"March 26, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.405,"hasTruncateMarker":true,"authors":[{"name":"saqib","key":"saqib"}],"frontMatter":{"authors":["saqib"],"date":"2006-03-26T00:00:00.000Z","description":"PCSX2 won the Grand Prize! - Best software out of 48-50 entries!","draft":false,"tags":["devblog"],"title":"PCSX2 Rocked The Expo At Fast-Nu"},"prevItem":{"title":"PCSX2 0.9","permalink":"/pcsx2-net-www/blog/2006/pcsx2-0-9"},"nextItem":{"title":"Software Expo + Misc","permalink":"/pcsx2-net-www/blog/2006/software-expo-misc"}},"content":"Update to the \\"Software Expo at FAST-NU\\" news posted previously. PCSX2\\nwon the **Grand Prize** ! - **Best** software out of 48-50 entries! It\\nhad an audience of **200** in just two days!\\n\\n\x3c!-- truncate --\x3e\\n\\n**Congratulations** to *all* the Beta-Testers, developers and of course\\nthe public who support us! You guys made this possible! So thank you\\neveryone!\\n\\nThis one goes out to Linuzappz, [RO]man and GoldFinger ! ( Time to\\nmake a return\\n\ud83d\ude09 )\\n\\n<Image cols={6} src={require(\\"./img/shield.jpg\\").default} />"},{"id":"/2006/software-expo-misc","metadata":{"permalink":"/pcsx2-net-www/blog/2006/software-expo-misc","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/software-expo-misc/index.mdx","source":"@site/blog/2006/software-expo-misc/index.mdx","title":"Software Expo + Misc","description":"PCSX2 Beta v0.9 is going to be on display at FAST-NU Lahore, Pakistan","date":"2006-03-07T00:00:00.000Z","formattedDate":"March 7, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.64,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-03-07T00:00:00.000Z","description":"PCSX2 Beta v0.9 is going to be on display at FAST-NU Lahore, Pakistan","draft":false,"tags":["devblog"],"title":"Software Expo + Misc"},"prevItem":{"title":"PCSX2 Rocked The Expo At Fast-Nu","permalink":"/pcsx2-net-www/blog/2006/pcsx2-rocked-the-expo-at-fast-nu"},"nextItem":{"title":"Final Fantasy X And Beyond!","permalink":"/pcsx2-net-www/blog/2006/final-fantasy-x-and-beyond"}},"content":"**PCSX2** Beta v0.9 is going to be on display at FAST-NU Lahore,\\nPakistan by *Saqib Akhtar* (One of the main developers) on the **24th**\\nand **25th** of March, 2006.\\n\\n\x3c!-- truncate --\x3e\\n\\n[PSEmu.pl](http://www.psemu.pl/) run by the respected and fine admin\\n**winter_mute** , will be providing the official **Polish** language\\nforums for the PCSX2 project!\\n\\nSome of you may of been expecting a release the end of last month, this\\nwas the original intention of the team, but recent changes caused compat\\nissues and needed further in depth testing. The aim is to get a release\\nout soon, but how soon depends on various major changes!\\n\\nSome of these changes if fixed and tested to be \'stable\' will provide\\na good deal of ....well dare I say it... speed!"},{"id":"/2006/final-fantasy-x-and-beyond","metadata":{"permalink":"/pcsx2-net-www/blog/2006/final-fantasy-x-and-beyond","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/final-fantasy-x-and-beyond/index.mdx","source":"@site/blog/2006/final-fantasy-x-and-beyond/index.mdx","title":"Final Fantasy X And Beyond!","description":"ZeroFrog has once again been working on PCSX2, and has managed to fix the once present \'holes\' in the terrain models of Final Fantasy X","date":"2006-01-09T00:00:00.000Z","formattedDate":"January 9, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.875,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-01-09T00:00:00.000Z","description":"ZeroFrog has once again been working on PCSX2, and has managed to fix the once present \'holes\' in the terrain models of Final Fantasy X","draft":false,"tags":["devblog"],"title":"Final Fantasy X And Beyond!"},"prevItem":{"title":"Software Expo + Misc","permalink":"/pcsx2-net-www/blog/2006/software-expo-misc"},"nextItem":{"title":"Finally Not A Fantasy!","permalink":"/pcsx2-net-www/blog/2006/finally-not-a-fantasy"}},"content":"**ZeroFrog** has once again been working on PCSX2, and has managed to\\nfix the once present \'holes\' in the terrain models of *Final Fantasy\\nX* , making the game look excellent. This fix also has a wide range of\\neffects on other games, so don\'t worry folks there will be news soon\\nwhich doesn\'t involve a *Final Fantasy* !\\n\ud83d\ude1b\\n\\n\x3c!-- truncate --\x3e\\n\\nWhilst the game certainly now looks beautiful, it\'s still not playable\\nfrom start to finish, due to various \'looping\' issues and video\\nplayback, speed is of course an issue with such a complex emulation\\ntask, but will be improved upon in the future, keep watching this\\nspace!\\n\\nTo celebrate this bit of progress, we have a large selection of\\nscreenshots, and one of the sexiest videos I\'ve recorded from PCSX2 in\\nawhile\\n\ud83d\ude09\\n\\n\x3c!-- TODO - legacy find video? --\x3e\\n\\nWalk Through Kilika, menus and a battle!\\n1 Minute 31 Seconds | 58.8MB | Real Ingame Speed - 6-14 FPS.\\n\\nCheck out the forums for **59+** screenshots\\n[here](http://forums.ngemu.com/pcsx2-official-forum/67757-ffx-looking-near-perfect.html)\\n\\n<Image cols={6} src={require(\\"./img/FFX_thumb.jpg\\").default} />"},{"id":"/2006/finally-not-a-fantasy","metadata":{"permalink":"/pcsx2-net-www/blog/2006/finally-not-a-fantasy","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/finally-not-a-fantasy/index.mdx","source":"@site/blog/2006/finally-not-a-fantasy/index.mdx","title":"Finally Not A Fantasy!","description":"Final Fantasy XII Demo that was released with Dragon Quest VIII in North America goes ingame","date":"2006-01-08T00:00:00.000Z","formattedDate":"January 8, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.515,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2006-01-08T00:00:00.000Z","description":"Final Fantasy XII Demo that was released with Dragon Quest VIII in North America goes ingame","draft":false,"tags":["devblog"],"title":"Finally Not A Fantasy!"},"prevItem":{"title":"Final Fantasy X And Beyond!","permalink":"/pcsx2-net-www/blog/2006/final-fantasy-x-and-beyond"},"nextItem":{"title":"Guide Updates","permalink":"/pcsx2-net-www/blog/2006/guide-updates"}},"content":"*Final Fantasy XII Demo* that was released with *Dragon Quest VIII* in\\nNorth America goes **ingame**!\\n\\n\x3c!-- truncate --\x3e\\n\\nThanks to some recent work by *Refraction* and a new contributor\\n*ZeroFrog* , we can now walk around the first demo area of this game.\\nGiven this is **VERY** early work in progress (W.I.P), there are some\\nmajor bugs to be ironed out, like various graphical issues!\\n\\nHowever to celebrate this breakthrough, there is a video and several\\nscreens, and be sure to check out the official forums for some\\nup-and-coming new shots, progress and general discussion!\\n\\n\x3c!-- TODO - legayc video, find --\x3e"},{"id":"/2006/guide-updates","metadata":{"permalink":"/pcsx2-net-www/blog/2006/guide-updates","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2006/guide-updates/index.mdx","source":"@site/blog/2006/guide-updates/index.mdx","title":"Guide Updates","description":"After some bugging by Falcon4ever, I sat down and fixed all 200 errors that were preventing the configuration guide from being XHTML compatible","date":"2006-01-06T00:00:00.000Z","formattedDate":"January 6, 2006","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.745,"hasTruncateMarker":true,"authors":[{"name":"Bositman","url":"https://github.com/bositman","imageURL":"https://github.com/bositman.png","key":"bositman"}],"frontMatter":{"authors":["bositman"],"date":"2006-01-06T00:00:00.000Z","description":"After some bugging by Falcon4ever, I sat down and fixed all 200 errors that were preventing the configuration guide from being XHTML compatible","draft":false,"tags":["devblog"],"title":"Guide Updates"},"prevItem":{"title":"Finally Not A Fantasy!","permalink":"/pcsx2-net-www/blog/2006/finally-not-a-fantasy"},"nextItem":{"title":"Happy Birthday!","permalink":"/pcsx2-net-www/blog/2005/happy-birthday"}},"content":"Yes i know this wasn\'t what people were expecting of an update from the\\nPCSX2 site,but small news is better than no news\\n\ud83d\ude1b\\nAfter some bugging by Falcon4ever,i sat down and fixed all 200 errors(\\n\ud83d\ude1b ) that were preventing the configuration guide\\nfrom being XHTML compatible\\n\ud83d\ude0a You can check the validity by pressing the XHTML\\nbutton at the bottom of the page. So if anyone had problems with it with\\nthe browser they were using,there is a good chance that its fixed\\nnow.Note that all the translations have been made using the old html\\nfile so unfortunately they are not XHTML compatible.\\n\\n\x3c!-- truncate --\x3e\\n\\nAlso we have 2 new translations:\\n\\nIndonesian translation by Exsharaen:\\nPanduan Pengaturan PCSX2\\n\\nItalian translation by Master and corrected by Topper:\\nGuida alla configurazione di PCSX2\\n\\nGreat job and sorry for delaying the release of these 2 for some time\\n\ud83d\ude09"},{"id":"/2005/happy-birthday","metadata":{"permalink":"/pcsx2-net-www/blog/2005/happy-birthday","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2005/happy-birthday/index.mdx","source":"@site/blog/2005/happy-birthday/index.mdx","title":"Happy Birthday!","description":"Happy Birthday to Saqib!","date":"2005-12-30T00:00:00.000Z","formattedDate":"December 30, 2005","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.39,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2005-12-30T00:00:00.000Z","description":"Happy Birthday to Saqib!","draft":false,"tags":["devblog"],"title":"Happy Birthday!"},"prevItem":{"title":"Guide Updates","permalink":"/pcsx2-net-www/blog/2006/guide-updates"},"nextItem":{"title":"Merry Christmas!","permalink":"/pcsx2-net-www/blog/2005/merry-christmas"}},"content":"**Happy Birthday to Saqib!**\\n\\n\x3c!-- truncate --\x3e\\n\\nHe turns 22 on December 31st, so I hope he has a fantastic day and\\ndoesn\'t feel too depressed at getting older!\\n\\nGiven it\'s that horrific birthday where you loose being the \'cool 21\'\\nand turn into a regular 20-something, I decided a present for our\\nbeloved developer is needed! Now don\'t say I never get you anything,\\nclick on your pressie to get a nice treat\\n\\n<Image cols={6} src={require(\\"./img/gift.jpg\\").default} />"},{"id":"/2005/merry-christmas","metadata":{"permalink":"/pcsx2-net-www/blog/2005/merry-christmas","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2005/merry-christmas/index.mdx","source":"@site/blog/2005/merry-christmas/index.mdx","title":"Merry Christmas!","description":"Merry Christmas to everyone, from the PCSX2 team!","date":"2005-12-24T00:00:00.000Z","formattedDate":"December 24, 2005","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.33,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2005-12-24T00:00:00.000Z","description":"Merry Christmas to everyone, from the PCSX2 team!","draft":false,"tags":["devblog"],"title":"Merry Christmas!"},"prevItem":{"title":"Happy Birthday!","permalink":"/pcsx2-net-www/blog/2005/happy-birthday"},"nextItem":{"title":"Biohazard 4!","permalink":"/pcsx2-net-www/blog/2005/biohazard-4"}},"content":"Merry Christmas to everyone, from the PCSX2 team!\\n\\n\x3c!-- truncate --\x3e\\n\\nHope everyone has a fantastic time, and a great New Years! Make sure you\\nget plenty of presents, and party hard\\n\\nNo release for Christmas, but one coming sometime in **January** - we\\nhope, assuming shadow, saqib and refraction don\'t get lost, drunk or\\nkidnapped by kinky Japanese Female Ninjas (they wish that would happen)"},{"id":"/2005/biohazard-4","metadata":{"permalink":"/pcsx2-net-www/blog/2005/biohazard-4","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2005/biohazard-4/index.mdx","source":"@site/blog/2005/biohazard-4/index.mdx","title":"Biohazard 4!","description":"Time to brighten up the front page of this site with some sexy news","date":"2005-12-19T00:00:00.000Z","formattedDate":"December 19, 2005","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.66,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2005-12-19T00:00:00.000Z","description":"Time to brighten up the front page of this site with some sexy news","draft":false,"tags":["devblog"],"title":"Biohazard 4!"},"prevItem":{"title":"Merry Christmas!","permalink":"/pcsx2-net-www/blog/2005/merry-christmas"},"nextItem":{"title":"Sad News","permalink":"/pcsx2-net-www/blog/2005/sad-news"}},"content":"Time to brighten up the front page of this site with some sexy news.\\n\ud83d\ude0a\\n\\n\x3c!-- truncate --\x3e\\n\\n**Parotaku** one of our long serving betatesters has been having \'fun\'\\ntesting *Biohazard 4 (Resident Evil 4)* under the WIP PCSX2 0.9 beta.\\nWhilst there are still many issues with this game, such as a lack of\\nmemory card detection, it is fully playable, and looking utterly\\ngorgeous at high res.\\n\\n\x3c!-- TODO legacy video find it --\x3e\\n\\n!! The video was recorded through **GSdx** which automatically speeds up\\nvideo, so you are *NOT* watching actual emulated speeds! The real FPS is\\nshown under the video link! Given that this video is being shared\\nthrough Bit Torrent, we ask if you could seed (share) this file for as\\nlong as possible!\\n\\nEnjoy the video!"},{"id":"/2005/sad-news","metadata":{"permalink":"/pcsx2-net-www/blog/2005/sad-news","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2005/sad-news/index.mdx","source":"@site/blog/2005/sad-news/index.mdx","title":"Sad News","description":"Linuzappz the lead coder for the PCSX2 project has \'officially\' quit","date":"2005-09-21T00:00:00.000Z","formattedDate":"September 21, 2005","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.91,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2005-09-21T00:00:00.000Z","description":"Linuzappz the lead coder for the PCSX2 project has \'officially\' quit","draft":false,"tags":["devblog"],"title":"Sad News"},"prevItem":{"title":"Biohazard 4!","permalink":"/pcsx2-net-www/blog/2005/biohazard-4"},"nextItem":{"title":"Video Playback!","permalink":"/pcsx2-net-www/blog/2005/video-playback"}},"content":"**Linuzappz** the lead coder for the *PCSX2* project has \'officially\'\\nquit. This is due to several reasons, from slowly losing interest in the\\nproject, to simply not having enough time to work on it.\\n\\n\x3c!-- truncate --\x3e\\n\\nI won\'t pull punches here, this *is* a major blow to this project as he\\nis responsible for so much code, plugins and has an extensive knowledge\\nof the **PlayStation 2** . Whilst he will pop in \'rarely\' to lend a\\nhand, or some advice he won\'t be working on it further\\n\\nAll of the betatesting team, his fellow developers and the general\\npeople who lend help in **#PCSX2** will greatly miss him. We send him\\nall our best, wish him luck with his hectic life and lets hope he gets\\nat least one date with **Carolina Ardoh\xe1in (Pampita)**\\n\\n**PCSX2** is far from dead and both **shadow** , **Saqib** will maintain\\nthe project with the heap of coders we do have (Refraction, auMatt,\\nGoldFinger etc..)\\n\\nGiven this project has come so far just recently\\nwe won\'t be letting it go the way of the dodo."},{"id":"/2005/video-playback","metadata":{"permalink":"/pcsx2-net-www/blog/2005/video-playback","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2005/video-playback/index.mdx","source":"@site/blog/2005/video-playback/index.mdx","title":"Video Playback!","description":"Saqib fixed a large portion of IPU (Image Processing Unit) support in PCSX2","date":"2005-09-16T00:00:00.000Z","formattedDate":"September 16, 2005","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.75,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2005-09-16T00:00:00.000Z","description":"Saqib fixed a large portion of IPU (Image Processing Unit) support in PCSX2","draft":false,"tags":["devblog"],"title":"Video Playback!"},"prevItem":{"title":"Sad News","permalink":"/pcsx2-net-www/blog/2005/sad-news"},"nextItem":{"title":"Video Special!","permalink":"/pcsx2-net-www/blog/2005/video-special"}},"content":"**Saqib** fixed a large portion of **IPU** (Image Processing Unit)\\nsupport in PCSX2, whilst this work is highly WIP and only just happened,\\nit is giving impressive results.\\n\\n\x3c!-- truncate --\x3e\\n\\nVideos (FMV\'s, cutscenes etc) had previously required patches to skip\\npast them, otherwise the emulator would hang, now many games are playing\\nvideos (all be it very broken looking in many cases!), examples of games\\nnow showing FMV playback would include: Onimusha 2, Onimusha 3, R:\\nRacing, Project Zero, Soul Calibur II, Final Fantasy X and Final Fantasy\\nX-2 etc.\\n\\nVideo support will greatly increase the compatibility of PCSX2 and open\\nup even more games for testing and viewing pleasure.\\n\\nTo show you this good news our tester **Rudy_X** produced a video from\\n**Final Fantasy X DEMO** to show you video playback and how it allows\\nyou to progress further into the game!\\n\\n\x3c!-- TODO legacy video find --\x3e"},{"id":"/2005/video-special","metadata":{"permalink":"/pcsx2-net-www/blog/2005/video-special","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2005/video-special/index.mdx","source":"@site/blog/2005/video-special/index.mdx","title":"Video Special!","description":"Having broken the 100,000!! unique visitor count, and nearing the 500,000 page clicks mark we decided to thank all the people who have visited this site","date":"2005-09-05T00:00:00.000Z","formattedDate":"September 5, 2005","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":1.01,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2005-09-05T00:00:00.000Z","description":"Having broken the 100,000!! unique visitor count, and nearing the 500,000 page clicks mark we decided to thank all the people who have visited this site","draft":false,"tags":["devblog"],"title":"Video Special!"},"prevItem":{"title":"Video Playback!","permalink":"/pcsx2-net-www/blog/2005/video-playback"},"nextItem":{"title":"Gran Turismo 4 - Ingame","permalink":"/pcsx2-net-www/blog/2005/gran-turismo-4-ingame"}},"content":"Having broken the **100,000** !! unique visitor count, and nearing the\\n**500,000** page clicks mark we decided to thank all the people who have\\nvisited this site, and support the project with a few videos from the\\ncurrent *WIP* 0.9 version.\\n\\n\x3c!-- truncate --\x3e\\n\\n\x3c!-- TODO - legacy find videos --\x3e\\n\\nFour videos for you to enjoy:\\n\\nFinal Fantasy X - Ingame At Kilika\\n2 Minutes 44 Seconds | 28.7MB | Real Ingame Speed - 10-32 FPS.\\n\\nGuilty Gear Isuka - Ingame Fighting Action\\n2 Minutes 12 Seconds | 23.4MB | Real Ingame Speed - 20-25 FPS.\\n\\nRakugaki Onkoku 3D Intro\\n2 Minutes 28 Seconds | 19.4MB | Real Ingame Speed - 10-15 FPS.\\n\\nVirtua Fighter 4 - Evolution - Some fun ingame action!\\n2 Minutes 35 Seconds | 27.6MB | Real Ingame Speed - 10-15 FPS.\\n\\nAll the videos where recorded through **GSdx**\\nand are automatically sped up, so you are *NOT* watching actual emulated\\nspeeds! The real FPS is shown under each video link! Given that these\\nvideos are being shared through Bit Torrent, we ask if you could seed\\n(share) these files for as long as possible!\\n\\nThank you for visiting, and enjoy the videos!\\n\\n<Image cols={6} src={require(\\"./img/vidspec.jpg\\").default} />"},{"id":"/2005/gran-turismo-4-ingame","metadata":{"permalink":"/pcsx2-net-www/blog/2005/gran-turismo-4-ingame","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2005/gran-turismo-4-ingame/index.mdx","source":"@site/blog/2005/gran-turismo-4-ingame/index.mdx","title":"Gran Turismo 4 - Ingame","description":"Thanks to current WIP, the somewhat famous Gran Turismo 4 goes ingame","date":"2005-08-26T00:00:00.000Z","formattedDate":"August 26, 2005","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.125,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2005-08-26T00:00:00.000Z","description":"Thanks to current WIP, the somewhat famous Gran Turismo 4 goes ingame","draft":false,"tags":["devblog"],"title":"Gran Turismo 4 - Ingame"},"prevItem":{"title":"Video Special!","permalink":"/pcsx2-net-www/blog/2005/video-special"},"nextItem":{"title":"PCSX2 - Site Re-Launch","permalink":"/pcsx2-net-www/blog/2005/pcsx2-site-re-launch"}},"content":"Thanks to current **WIP** , the somewhat famous *Gran Turismo 4* goes\\ningame! Expect plenty more to come\\n\\n\x3c!-- truncate --\x3e\\n\\n<Image cols={6} src={require(\\"./img/gt.jpg\\").default} />"},{"id":"/2005/pcsx2-site-re-launch","metadata":{"permalink":"/pcsx2-net-www/blog/2005/pcsx2-site-re-launch","editUrl":"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2005/pcsx2-site-re-launch/index.mdx","source":"@site/blog/2005/pcsx2-site-re-launch/index.mdx","title":"PCSX2 - Site Re-Launch","description":"**PCSX2** has been running for over three years now, and it was high time this project got a new site design!","date":"2005-08-22T00:00:00.000Z","formattedDate":"August 22, 2005","tags":[{"label":"devblog","permalink":"/pcsx2-net-www/blog/tags/devblog"}],"readingTime":0.985,"hasTruncateMarker":true,"authors":[{"name":"ckemu","key":"ckemu"}],"frontMatter":{"authors":["ckemu"],"date":"2005-08-22T00:00:00.000Z","description":"**PCSX2** has been running for over three years now, and it was high time this project got a new site design!","draft":false,"tags":["devblog"],"title":"PCSX2 - Site Re-Launch"},"prevItem":{"title":"Gran Turismo 4 - Ingame","permalink":"/pcsx2-net-www/blog/2005/gran-turismo-4-ingame"}},"content":"**PCSX2** has been running for over three years now, and it was high\\ntime this project got a new site design! Well here it is! We hope you\\nlike\\n\\n\x3c!-- truncate --\x3e\\n\\nThe site now has a much improved **compatibility** section, which is\\ncontinuously updated. Currently it shows what you can expect from the\\nfuture 0.9 release. So far only 250 games have been entered, out of the\\n500 or so we do test! Check back regularly!\\n\\n**Downloads** have been made clearer, and the site now has a fresh\\n**screenshots** section, where the *best* shots will be posted. Many\\nother things have been added, so please browse around and explore!\\n\\nThe site was designed by **CKemu** and coded by **Falcon4ever** . We\\nwould both like to thank the developers, beta testers and our host Bobbi\\nfor their help and support. An apology from myself, for putting up\\n\\"..is dead!\\" - sorry if I scared any of you\\n\\nThe site isn\'t technically complete yet. Whilst all parts function,\\nthere is much more to do, but both myself and **Falcon4ever** are\\npressed for time, so we shall work on it whilst the site is public!\\n\\n<Image cols={6} src={require(\\"./img/relaunch.jpg\\").default} />"}]}')}}]);