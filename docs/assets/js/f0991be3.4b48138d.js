"use strict";(self.webpackChunkpcsx_2_net=self.webpackChunkpcsx_2_net||[]).push([[8589],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,u=p["".concat(l,".").concat(d)]||p[d]||h[d]||o;return a?n.createElement(u,s(s({ref:t},m),{},{components:a})):n.createElement(u,s({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},36775:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={authors:["jake stine"],date:new Date("2010-08-31T00:00:00.000Z"),description:"For those who don't know, DMA stands for Direct Memory Access, and it refers to logic circuits in a computer that allow for the automated transfer of system memory to and from peripherals",draft:!1,tags:["devblog"],title:"PS2's Programmable DMA"},s=void 0,i={permalink:"/pcsx2-net-www/blog/2010/ps2s-programmable-dma",editUrl:"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2010/ps2s-programmable-dma/index.mdx",source:"@site/blog/2010/ps2s-programmable-dma/index.mdx",title:"PS2's Programmable DMA",description:"For those who don't know, DMA stands for Direct Memory Access, and it refers to logic circuits in a computer that allow for the automated transfer of system memory to and from peripherals",date:"2010-08-31T00:00:00.000Z",formattedDate:"August 31, 2010",tags:[{label:"devblog",permalink:"/pcsx2-net-www/blog/tags/devblog"}],readingTime:5.18,hasTruncateMarker:!0,authors:[{name:"Jake Stine",key:"jake stine"}],frontMatter:{authors:["jake stine"],date:"2010-08-31T00:00:00.000Z",description:"For those who don't know, DMA stands for Direct Memory Access, and it refers to logic circuits in a computer that allow for the automated transfer of system memory to and from peripherals",draft:!1,tags:["devblog"],title:"PS2's Programmable DMA"},prevItem:{title:"MSVC 2008 Optimizer Fail",permalink:"/pcsx2-net-www/blog/2010/msvc-2008-optimizer-fail"},nextItem:{title:"Advanced Memory Management",permalink:"/pcsx2-net-www/blog/2010/advanced-memory-management"}},l={authorsImageUrls:[void 0]},c=[],m={toc:c};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"For those who don't know, DMA stands for ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Direct Memory Access"))," ,\nand it refers to logic circuits in a computer that allow for the\nautomated transfer of system memory to and from ",(0,r.kt)("em",{parentName:"p"},"peripherals")," . DMAs are\nbeneficial because they are simple circuits that do work in parallel to\nthe CPU -- while a DMA transfers data, the CPU is free to do other\nwork.that requires more complex computations and logic. The end result\nis better utilization of the computer's maximum memory transfer\nbandwidth and computational/logical ability."),(0,r.kt)("p",null,"Traditionally DMAs are pretty simple. The Playstation 2's EmotionEngine,\nhowever, has an 'intelligent' programmable DMA controller (DMAC). Neatly\ntranslated, it means that the DMAC can do a lot more than just move raw\ndata from place to place. It supports several modes of operation and has\na number of special features to take advantage of the unique multi-core\ndesign of the EE. Furthermore, the EE's DMAC is much more tightly\nintegrated with its memory bus than traditional DMAs, allowing it to\ntransfer data with exceptional efficiency. These two features combined\nmake the EE's DMAC a ",(0,r.kt)("em",{parentName:"p"},"key component")," to PS2 games developers -- in quite\na few games, the DMAC actually does ",(0,r.kt)("em",{parentName:"p"},"more raw work")," than the EE Core CPU\n(R5900)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How The Real Thing Works")),(0,r.kt)("p",null,"While emulating the actual hardware of the DMAC isn't usually needed, it\ncan still be helpful to understand exactly how the PS2's real DMAC works\nat a hardware level. The EE DMAC operates at 147mhz (1/2th the EE's core\nclock speed), and transfers 128 bits (16 bytes) of memory per cycle;\nmeaning that the theoretical maximum transfer rate of the DMAC is 2.4\nGB/s (147mhz ","*"," 16 bytes). It's a nice number, but is technically\nunattainable even in ideal conditions. Further explanation will make it\nclear why."),(0,r.kt)("p",null,"The DMAC connects the PS2's 32 MB of Main Memory (RAM) to various\nperipheral interfaces, such as VIF (VPU), SIF (IOP), GIF (GS), and IPU\n(mpeg decoder). VIF, GIF, and IPU are all part of the Emotion Engine and\noperate at 147mhz, same as the DMAC itself. Thus each of those\ninterfaces can send/receive data at roughly 2.4GB/s. SIF is limited by\nthe IOP's own DMA controller and memry bus, which operates at 1/8th the\nspeed of the EE's DMAC, or about 154MB/s."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Peripheral FIFOs")),(0,r.kt)("p",null,"Each peripheral (VIF, GIF, SIF, IPU, etc) has a 128 or 256 byte FIFO.\nThe FIFO helps mitigate occasional latency differences between Main\nMemory/SPRAM and the peripheral (some peripherals, in particular the\nGIF, can incur cycle stalls depending on data sent to them). Thanks to\nthe FIFOs, data can be ",(0,r.kt)("em",{parentName:"p"},"burst")," to/from memory in 128-byte blocks, which\nhelps maximize data transfer rates since the EE's memory bus was built\nto operate most efficiently in those conditions. However, the maximum\nbandwidth of Main Memory (32MB) in ideal conditions is only ","~","1.2GB/s\n(half of the DMAC), and has additional memory bank related latencies,\nreducing its effective transfer rates even further. If DMA transfers are\nonly done to/from Main Memory, the DMAC will only be able to come within\nabout 40% of its theoretical maximum throughput."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Enter the Scratchpad!")),(0,r.kt)("p",null,"The Scratchpad (SPRAM) is 16KB of memory integrated directly into the\nEmotionEngine. Because it is directly integrated on-die, it has no\nread/write latencies and can ",(0,r.kt)("em",{parentName:"p"},"always")," be accessed at the maximum\ntransfer rate of 2.4gb/s. The integrated nature of the SPRAM means it\nhas to be small in order to fit -- and its lack of size is what limits\nits usefulness."),(0,r.kt)("p",null,"So in order to utilize the bandwidth potential of the EE DMAC, a PS2\nprogrammer must find ways to use a combination of Main Memory and\nScratchpad transfers in parallel: When main memory stalls due to\ninherent latencies, the DMAC will automatically busy itself with a\npending SPRAM transfer. Likewise, while the DMAC is transferring to/from\nSPRAM, the EE's Main Memory becomes available to the CPU, which further\nimproves the system's CPU throughput."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The Scratchpad's MemoryFIFO (MFIFO)")),(0,r.kt)("p",null,"The MemoryFIFO function of the EE DMAC performs and managed two\nsimultaneous DMA transfers, as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Scratchpad -",">"," Main Memory (RAM)"),(0,r.kt)("li",{parentName:"ul"},"Main Memory (RAM) -",">"," Peripheral (VIF1 or GIF)")),(0,r.kt)("p",null,"As the buffer in memory is filled by Scratchpad, it is simultaneously\ndrained by the attached peripheral, either VIF1 or GIF. On the surface,\nthe MFIFO can appear to be somewhat silly, since the DMAC already has\nthe ability to transfer direcly from SPRAM -",">"," Peripheral. Adding a\nstop in Main Memory might seem like a waste of the DMAC's bandwidth\ncapacity, but in some situations the 'extra work' can result in a\ngeneral improvement in overall transfer speeds."),(0,r.kt)("p",null,"The PS2 engineers introduced the MFIFO for two reasons:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},'The scratchpad is too small. MFIFO can be used by the EE core as a\nplace to "empty" the scratchpad after its completed a set of data\nprocessing. While the data in the MFIFO awaits the DMAC to transfer it,\nthe EE is free to load new raw data into Scratchpad for processing.')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The GIF has additional bandwidth constraints since it has direct\nconnections to three ",(0,r.kt)("strong",{parentName:"p"},"PATHs")," : the the VU1 co-processor (GIF PATH1),\nVIF1 FIFO (GIF PATH2), and the DMAC's GIF channel (GIF PATH3). When\ntransfers are active on any one of the paths, the other two paths must\nidle/stall until the current path's transfer completes; meaning that\nDMAC transfers to both GIF and VIF1 channels can have unexpectedly long\nstalls."))),(0,r.kt)("p",null,"So by using MFIFO, the EE core can mitigate the unpredictable GIF/VIF1\nstalls while it works on entirely new sets of data in parallel. If a GIF\ntransfer via DMA is stalled because of other PATH1 or PATH2 transfers,\nthe DMAC can busy itself with other transfers in meantime, such as\nSPRAM-",">","memory or memory-",">","SPRAM. These transfers are nearly 'free'\nin a sense, since the DMAC would have been idle regardless -- but thanks\nto the MFIFO concept, the SPRAM itself will be free for use by the EE\nCore to continue processing data. Thus while the DMAC's overall\nproductivity isn't affected, the EE's overall computational ability\nimproves."),(0,r.kt)("p",null,"I'll talk a bit more on actual emulation details of the PS2's\nprogrammable DMA controller in future blogs, so this is ",(0,r.kt)("em",{parentName:"p"},"To Be\nContinued...")))}h.isMDXComponent=!0}}]);