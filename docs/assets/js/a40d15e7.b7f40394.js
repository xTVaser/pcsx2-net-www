"use strict";(self.webpackChunkpcsx_2_net=self.webpackChunkpcsx_2_net||[]).push([[9920],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=p(a),c=n,m=h["".concat(l,".").concat(c)]||h[c]||u[c]||i;return a?r.createElement(m,o(o({ref:t},d),{},{components:a})):r.createElement(m,o({ref:t},d))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},10409:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const i={authors:["bositman"],date:new Date("2017-02-02T00:00:00.000Z"),description:"Finally the Q4 2016 progress report!",draft:!1,tags:["progress-report"],title:"Q4 2016 Progress Report"},o=void 0,s={permalink:"/pcsx2-net-www/blog/2017/q4-2016-progress-report",editUrl:"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2017/q4-2016-progress-report/index.mdx",source:"@site/blog/2017/q4-2016-progress-report/index.mdx",title:"Q4 2016 Progress Report",description:"Finally the Q4 2016 progress report!",date:"2017-02-02T00:00:00.000Z",formattedDate:"February 2, 2017",tags:[{label:"progress-report",permalink:"/pcsx2-net-www/blog/tags/progress-report"}],readingTime:9.055,hasTruncateMarker:!0,authors:[{name:"Bositman",url:"https://github.com/bositman",imageURL:"https://github.com/bositman.png",key:"bositman"}],frontMatter:{authors:["bositman"],date:"2017-02-02T00:00:00.000Z",description:"Finally the Q4 2016 progress report!",draft:!1,tags:["progress-report"],title:"Q4 2016 Progress Report"},prevItem:{title:"QA Picking Our Noes",permalink:"/pcsx2-net-www/blog/2017/qa-picking-our-noes"},nextItem:{title:"Happy New Year From The PCSX2 Team",permalink:"/pcsx2-net-www/blog/2017/happy-new-year-from-the-pcsx2-team"}},l={authorsImageUrls:[void 0]},p=[{value:"cdvdgigaherz: Linux port",id:"cdvdgigaherz-linux-port",level:2},{value:"PSX mode compatibility",id:"psx-mode-compatibility",level:2},{value:"PSX mode: Proper video mode initialization",id:"psx-mode-proper-video-mode-initialization",level:2},{value:"LilyPad: Add separate bindings for each pad type",id:"lilypad-add-separate-bindings-for-each-pad-type",level:2},{value:"LilyPad: Add PlayStation Mouse support",id:"lilypad-add-playstation-mouse-support",level:2},{value:"LilyPad: Updated user interface",id:"lilypad-updated-user-interface",level:2},{value:"GSdx: Hardware mipmapping support",id:"gsdx-hardware-mipmapping-support",level:2},{value:"GSdx-TextureCache: Proper scaling of all textures",id:"gsdx-texturecache-proper-scaling-of-all-textures",level:2},{value:"GSdx: Handling illegal 8 bits pixel storage format",id:"gsdx-handling-illegal-8-bits-pixel-storage-format",level:2},{value:"GSdx-PCRTC: Feedback write support",id:"gsdx-pcrtc-feedback-write-support",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},u=d("Image"),h=d("ImageCompare"),c=d("SliderCompare"),m={toc:p};function g(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Finally the Q4 2016 progress report! Yes we know it's a bit late but you\nwill find it was worth the wait! On to the changes:"),(0,n.kt)("p",null,(0,n.kt)("img",{src:a(61607).Z,width:"563",height:"104"})),(0,n.kt)("h2",{id:"cdvdgigaherz-linux-port"},"cdvdgigaherz: Linux port"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/turtleli"},"turtleli"))),(0,n.kt)("p",null,"cdvdGigaherz was originally a Windows only CD/DVD disk reading plugin.\nHowever, by using portable code to replace as much of the Windows\nspecific code as possible and adding a Linux disk reading backend and\nGUI, cdvdGigaherz now works on Linux."),(0,n.kt)("h2",{id:"psx-mode-compatibility"},"PSX mode compatibility"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ramapcsx2"},"Rama")," and ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/sudonim1"},"Pseudonym"))),(0,n.kt)("p",null,"Previously, PCSX2 had always failed to play PSX games due to\nunimplemented devices that are necessary for backward compatibility.\n",(0,n.kt)("strong",{parentName:"p"},"Rama")," had then decided to reach\nout to other developers to fix the problem. He found someone on the\nassemblergames.com forums that just so happened to be an expert on PS2's\nIOP sub bus hardware: ",(0,n.kt)("strong",{parentName:"p"},"wisi"),"!\nWisi implemented the missing PGIF device, added the required hardware\nhooks and with that PCSX2 was finally able to boot into PSX mode!"),(0,n.kt)("p",null,"However, most of the PSX games still suffered from bad audio and the\nsource of the issue was the SPU2 plugin. It was assumed that in the\nbackward compatibility mode of the SPU2, the hardware provides a mapping\nwindow into SPU2 RAM, which wasn't properly handled by the plugin. ",(0,n.kt)("strong",{parentName:"p"},"Pseudonym")," then fixed all the issues\nrelated to the mapping management and SPU2-X started providing much\nbetter results. At this time, he also redid the reverb algorithm (which\nis shared between PSX and PS2 modes) and improved it significantly\ntowards an exact replica of the original. The following waveform\ncomparison shows that there are still some unsolved problems with the\npulse response, but the delay and feedback are spot on! It sounds much\nbetter than the older implementation and benefits PSX and PS2 games\nalike."),(0,n.kt)(u,{cols:6,src:a(90576).Z,mdxType:"Image"}),(0,n.kt)("p",null,"Here are some screenshots of Tekken 3, Ridge Racer and Driver running\nunder PCSX2's brand new PSX mode:"),(0,n.kt)(u,{cols:6,src:a(91254).Z,mdxType:"Image"}),(0,n.kt)(u,{cols:6,src:a(91979).Z,mdxType:"Image"}),(0,n.kt)(u,{cols:6,src:a(53803).Z,mdxType:"Image"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Note"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"PSX backward compatibility is still in its nascent state, so bug\nreports related to it will be dismissed, until the emulation has\nmatured enough."),(0,n.kt)("li",{parentName:"ul"},"Also quite interesting: None of the PSX emulators used for\ncomparison produces reverb waveforms that look anything like the\noriginal hardware!")),(0,n.kt)("h2",{id:"psx-mode-proper-video-mode-initialization"},"PSX mode: Proper video mode initialization"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ssakash"},"ssakash"))),(0,n.kt)("p",null,"PCSX2 initializes the video modes based on the parameters of the ",(0,n.kt)("strong",{parentName:"p"},"SetGsCrt()")," function call, however,\nonly PS2 games made use of this SYSCALL and PSX games didn't, this left\nall the PSX games in an uninitialized video mode state making them\nsusceptible to various timing issues."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"ssakash")," fixed this issue by\ninitializing the video mode based on the color subcarrier frequency\n(CMOD) when the video mode is at an uninitialized state, this change\nfinally made PAL PSX games to output at their proper vertical\nfrequency."),(0,n.kt)("h2",{id:"lilypad-add-separate-bindings-for-each-pad-type"},"LilyPad: Add separate bindings for each pad type"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/FlatOutPS2"},"FlatOut"))),(0,n.kt)("p",null,"Before this update, all pad types (DualShock 2, Guitar, Pop'n Music\ncontroller) shared the same button configuration. But your ideal setup\nfor the DualShock 2 might not be the same as your preferred Guitar\nsetup, so you had to change the button configuration or load another\nLilyPad configuration each time you wanted to play a game with the one\nof the other pad types. This has now been resolved by giving each of the\npad types their own individual configuration."),(0,n.kt)("h2",{id:"lilypad-add-playstation-mouse-support"},"LilyPad: Add PlayStation Mouse support"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/FlatOutPS2"},"FlatOut"))),(0,n.kt)("p",null,"The PlayStation Mouse has been added as a new pad type. This mouse can\nbe used on a number of PS1 titles such as Myst and Sim City 2000. There\nare no known PS2 titles that support it, but thanks to PCSX2's new PSX\nbackward compatibility, you can now use it with PCSX2."),(0,n.kt)("h2",{id:"lilypad-updated-user-interface"},"LilyPad: Updated user interface"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/FlatOutPS2"},"FlatOut"))),(0,n.kt)("p",null,"The LilyPad user interface has been updated by removing some of the\nbuttons below the diagnostics and input bindings lists and incorporating\nthose into the corresponding list as right-click options. The\nfunctionality is also still available by keyboard input. The input\nconfigurations on the Pad tabs have been moved to a separate page - like\nthe force feedback configuration - to clearly separate the configuration\noptions from the available bindings."),(0,n.kt)("p",null,"Additionally, several informational tooltips have been added to better\nexplain how the LilyPad options work, which should help setting up\nLilyPad just the way you want it."),(0,n.kt)("p",null,"Three new options have been added to the Pad tabs. A device select\noption that hides bindings and disables binding new inputs from all\nnon-selected devices on the bindings list. This also avoids input\nconflict issues when one controller is recognized as several devices\nthrough different APIs."),(0,n.kt)("p",null,"A skip deadzone option has been added to the input configuration page.\nWith the normal dead zone, if the control input value is below the given\nthreshold value, the input is just ignored. However, some controllers\nbenefit from shortening the input range by skipping a deadzone. This\nallows most of the movement of the input to be used and it will require\nless movement before your input is picked up by a game."),(0,n.kt)("p",null,'The third new option is a "configure on bind" checkbox. With this\nenabled you\'ll be sent straight to the input configuration for each\ninput you bind.'),(0,n.kt)(h,{left:a(68147).Z,right:a(42315).Z,mdxType:"ImageCompare"}),(0,n.kt)("h2",{id:"gsdx-hardware-mipmapping-support"},"GSdx: Hardware mipmapping support"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/gregory38"},"Gregory"))),(0,n.kt)("p",null,"Previously, all the hardware renderers suffered from mipmapping issues\ndue to various unimplemented functions. For example, whenever mipmapping\nis performed, it is necessary to set the base pointer address and the\nbuffer width of the textures of two (or) more mimpap levels, even this\nbasic function was not emulated before as there wasn't much priority on\ngetting mipmapping to work on hardware renderers."),(0,n.kt)("p",null,"The main reasons were that only some few games (around 10-30) had\nmipmapping related issues which is quite a small amount of games in\ncomparison to the whole PS2 library and there was also a possibility\nthat mipmapping could influence the performance negatively, so none of\nthe developers were planning on tackling it, as at that time, there were\nfar more severe bugs related to the CLUT, Texture cache, display\nrectangle setup and Z buffer which were more prioritized."),(0,n.kt)("p",null,"Most of the end users didn't really understand our priorities and there\nwere lots of negative posts related to not implementing hardware\nmipmapping and it grew out of control as we kept releasing our progress\nreports. There were even some rumours spreading that hardware mipmapping\nis impossible without a rewrite of texture cache. To shut them all up,\n",(0,n.kt)("strong",{parentName:"p"},"Gregory")," took all the responsibility in his hands and finally added\nsupport for hardware mipmapping!"),(0,n.kt)(c,{before:a(49128).Z,after:a(65432).Z,mdxType:"SliderCompare"}),(0,n.kt)(c,{before:a(9706).Z,after:a(76631).Z,mdxType:"SliderCompare"}),(0,n.kt)(c,{before:a(84254).Z,after:a(21403).Z,mdxType:"SliderCompare"}),(0,n.kt)("p",null,"Note:** The current implementation of hardware mipmapping isn't totally\naccurate, the current implementation replaces the pointer of the base\nlayer with the LOD min layer, assuming that it contains valid data.\nWhile the current hardware mipmapping implementation isn't really ideal,\nit fixes issues with most of the games (Ratchet & Clank, Ace Combat,\nLegacy of Kain) even with increase in performance in certain\nscenarios!"),(0,n.kt)("p",null,"Unfortunately, there are still a few games requiring full mipmapping\nsupport which will be quite hard to tackle without compromising on\nperformance."),(0,n.kt)("h2",{id:"gsdx-texturecache-proper-scaling-of-all-textures"},"GSdx-TextureCache: Proper scaling of all textures"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/gregory38"},"Gregory")," and ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/ssakash"},"ssakash"))),(0,n.kt)("p",null,"On games like Devil May Cry, a few textures weren't being scaled\nproperly, which lead to graphical glitches on the upper left part of the\nscreen at upscaled resolutions. Eventually we had found out that in\ncertain rare cases when the Texture-cache target was created, the\nscaling of the textures was omitted."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Gregory")," fixed the issue by\nproperly scaling the textures at such cases with respect to the integral\nscaling value, ",(0,n.kt)("strong",{parentName:"p"},"ssakash")," later\ngeneralized the scaling equation to also make it work on custom\nresolutions."),(0,n.kt)(c,{before:a(58256).Z,after:a(45929).Z,mdxType:"SliderCompare"}),(0,n.kt)("h2",{id:"gsdx-handling-illegal-8-bits-pixel-storage-format"},"GSdx: Handling illegal 8 bits pixel storage format"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/gregory38"},"Gregory"))),(0,n.kt)("p",null,"The Graphics Synthesizer supports 3 different color formats for the\nframe buffer,"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"32 bits (RGBA8): 3 color channels of 8 bits + 1 alpha channel of 8\nbits. ",(0,n.kt)("strong",{parentName:"li"},"(PSMCT32)")),(0,n.kt)("li",{parentName:"ul"},"24 bits (RGB8): 3 color channels of 8 bits. ",(0,n.kt)("strong",{parentName:"li"},"(PSMCT24)")),(0,n.kt)("li",{parentName:"ul"},"16 bits (RGB5A1): 3 color channels of 5 bits + alpha channel of 1\nbit. ",(0,n.kt)("strong",{parentName:"li"},"(PSMCT16, PSMCT16S)"))),(0,n.kt)("p",null,"However, some games seem to use an illegal format at the FRAME register,\na format known as ",(0,n.kt)("strong",{parentName:"p"},"PSMT8H"),". The\nvalid and sane hypothesis was that the core is sending some garbage\nvalues to GSdx, so skipping the draw call might fix it. However, that\nwasn't the case. A developer was indeed crazy enough to send such an\ninsane value!"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Gregory")," had ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/commit/9b93c073390de7c5f88e944bc9d26f9cf17ba9ee"},"resolved the\nissue"),"\nby replacing the illegal format with a valid 32 bit format and channel\nmasking in the FBMSK bitfield of FRAME register."),(0,n.kt)(c,{before:a(72114).Z,after:a(91346).Z,mdxType:"SliderCompare"}),(0,n.kt)("h2",{id:"gsdx-pcrtc-feedback-write-support"},"GSdx-PCRTC: Feedback write support"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/gregory38"},"Gregory"))),(0,n.kt)("p",null,"The graphics synthesizer contains a dedicated hardware to handle the\npresentation of the framebuffer to the output circuit, the hardware can\nmerge two contexts of framebuffer together based on various parameters,\nhowever there's also an alternative way to write back data in the frame\nbuffer."),(0,n.kt)("p",null,"Using the feedback write circuit, we can write a specific rectangular\narea in the output image to an arbitrary position in a local buffer at\nan arbitrary sampling rate dependent on the status of feedback write\nsetting registers. The data can be a raw copy, but ",(0,n.kt)("strong",{parentName:"p"},"RGB->YCbCr")," conversions could also\nbe requested based on the feedback write setting."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Gregory")," has now implemented feedback write support on the OpenGL\nhardware and software renderer which fixes issues with various games\nalong with the infamous Xenosaga I dream scenes which make use of\nfeedback write circuit, the DirectX port for the fix is yet to be done\nas there aren't really any active DX developers on our team at the\nmoment."),(0,n.kt)(c,{before:a(76950).Z,after:a(36153).Z,mdxType:"SliderCompare"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Xenosaga makes use of the feedback write mechanism to convert the color to a luminance greyscale.")),(0,n.kt)("p",null,"And that was it for this quarter's progress report! There were several\nother changes that haven't made it in this report since as you can see\nit's already pretty huge, but we believe we covered everything important\nfor our users."),(0,n.kt)("p",null,"We could use some extra help preparing and writing these reports, so if\nanyone is interested, has time and is up to the task please inform us by\nposting ",(0,n.kt)("a",{parentName:"p",href:"http://forums.pcsx2.net/Thread-Q4-2016-progress-report"},"HERE")," in our forum."),(0,n.kt)("p",null,"As always, check out our progress over the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2"},"Github repository"),", help us by ",(0,n.kt)("a",{parentName:"p",href:"http://forums.pcsx2.net/Forum-Bug-reporting"},"reporting issues")," or by ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/PCSX2/pcsx2/pulls"},"sending pull requests"),", even if your code still needs work. Our coders and contributors will be more than happy to help you help us with your changes, improvements and bug fixes to our code!"),(0,n.kt)("p",null,"As usual a big thank you to all people who contributed to this report,\nbug squad members and coders alike you know who you are!\nTill next time, keep playing."))}g.isMDXComponent=!0},21403:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ace-after-s-d162fafd0974421c3a4db2b81687aaaa.jpg"},84254:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ace-before-s-a29d5f0acf59cfe64f8285e03380b14a.jpg"},91346:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/berserk-after-s-24d8fd6825d3c92d30a544a7919abda2.jpg"},72114:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/berserk-before-s-b31946d02aa05209349b2ac4639d47a0.jpg"},45929:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/dmc-after-s-2cf0fd6fc08b849f5c4157bb3ea46787.jpg"},58256:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/dmc-before-s-dbea7e861b77e827ec1a6086fdfa7458.jpg"},91979:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/driver-ps1-s-08dff8cb886df644da041474b7aaaca9.jpg"},42315:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/lilypad-after-s-ada7bfa5c4b22358d9141048559f231a.jpg"},68147:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/lilypad-before-s-e034ae937bec95b09bc7f6733eac9d8c.jpg"},65432:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ratchet-after1-s-95ea2d805288550928b19566a4b9e3d5.jpg"},76631:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ratchet-after2-s-2c69de3ed1133c065390cb3c1ed4e4cc.jpg"},49128:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ratchet-before1-s-574a0d0edeb8207a6c816cc626646a2d.jpg"},9706:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ratchet-before2-s-09fa9a8ce0689f95bcba69d65a812174.jpg"},53803:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/ridgeracer-ps1-s-573aceb0e87cbcff6605a5701c9602ed.jpg"},90576:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/spu2x-reverb-s-b25ba602f34a8922f43fbcb1a03a5740.jpg"},91254:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/tekken3-ps1-s-021fce91f87c1aa6e586fe5e36d71dea.jpg"},36153:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/xenosaga-after-s-58d1bf4100018bbba2b2914303a35cff.jpg"},76950:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/xenosaga-before-s-2900097e01a760fbaa84ef29d638793a.jpg"},61607:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/progress-rep-q4-2016-56c327c12115cd3d6b2918507c854d74.jpg"}}]);