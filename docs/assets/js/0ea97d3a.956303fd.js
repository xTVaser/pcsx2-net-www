"use strict";(self.webpackChunkpcsx_2_net=self.webpackChunkpcsx_2_net||[]).push([[7180],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||a;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},13800:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const a={authors:["jake stine"],date:new Date("2009-08-30T00:00:00.000Z"),description:"One of the first things I sought to do when I first started contributing to PCSX2 was to improve the emulator's overall stability and error handling",draft:!1,tags:["devblog"],title:"C Exceptions Can Be An Optimization"},i=void 0,s={permalink:"/blog/2009/c-exceptions-can-be-an-optimization",editUrl:"https://github.com/PCSX2/pcsx2-net-www/tree/master/blog/2009/c-exceptions-can-be-an-optimization/index.mdx",source:"@site/blog/2009/c-exceptions-can-be-an-optimization/index.mdx",title:"C Exceptions Can Be An Optimization",description:"One of the first things I sought to do when I first started contributing to PCSX2 was to improve the emulator's overall stability and error handling",date:"2009-08-30T00:00:00.000Z",formattedDate:"August 30, 2009",tags:[{label:"devblog",permalink:"/blog/tags/devblog"}],readingTime:2.9,hasTruncateMarker:!0,authors:[{name:"Jake Stine",key:"jake stine"}],frontMatter:{authors:["jake stine"],date:"2009-08-30T00:00:00.000Z",description:"One of the first things I sought to do when I first started contributing to PCSX2 was to improve the emulator's overall stability and error handling",draft:!1,tags:["devblog"],title:"C Exceptions Can Be An Optimization"},prevItem:{title:"Whats Clamping Why Do We Need It",permalink:"/blog/2009/whats-clamping-why-do-we-need-it"},nextItem:{title:"The Devblogs Now Allow User Comments",permalink:"/blog/2009/the-devblogs-now-allow-user-comments"}},l={authorsImageUrls:[void 0]},c=[],p={toc:c};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"One of the first things I sought to do when I first started contributing\nto PCSX2 was to improve the emulator's overall stability and error\nhandling; and to this day it's still one of my top priorities."),(0,r.kt)("p",null,"My method of doing so was initially seen as controversial: I merged in\ndrk","|","|","Raziel's VTLB code (which was C++), converted the rest of the\nPCSX2 codebase to C++, and started replacing the (lack of?) error code\nreturn values with modern C++ exception handling. The initial reaction\nfrom the public (and some PCSX2 team members) was either distrust or\npanic. Chants of ",(0,r.kt)("em",{parentName:"p"},'"C++ is slow!"')," or ",(0,r.kt)("em",{parentName:"p"},'"Exception handling is slow!"'),"\nfrequented the PCSX2 revision comments."),(0,r.kt)("p",null,"And admittedly, for some tasks and in some specific scenarios, C++ and\nit's exception handling are slow. But, of course, the key is to avoid\nthose scenarios... which as it turns out is really quite easy. Better\nyet, clever use of C++ and its exceptions can actually be a ",(0,r.kt)("em",{parentName:"p"},"speedup")," .\nHow is that possible? I'll explain!"),(0,r.kt)("p",null,"Typically in traditional error handling models, you check the return\ncode of a function for errors, like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"if( DoSomethingSpecial() == SPECIAL_FAIL ) {\n// Handle error.\n}\n")),(0,r.kt)("p",null,"This is simple, short, and quite fast compared to the overhead of\nentering a C++ ",(0,r.kt)("strong",{parentName:"p"},"try/catch")," block. But let's consider a more practical\neveryday example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'int DoSomethingSpecial() {\nif( DoSomethingElse() == SPECIAL_FAIL )\nreturn SPECIAL_FAIL;\n\n// Do stuff based on DoSomethingElse\'s success\nConsole::WriteLn( "Success!" );\nreturn SPECIAL_WIN;\n}\nvoid LoopOfCode() {\ndo {\n// code [...]\n} while( DoSomethingSpecial() != SPECIAL_FAIL )\n}\n')),(0,r.kt)("p",null,"The above code snippet must perform no less than ",(0,r.kt)("em",{parentName:"p"},"two conditional checks\nper loop")," just to propagate the error code up the chain of function\ncalls, and this isn't even handling the possibility of a function\nreturning more than one error code yet! This is a situation where C++\nException Handling can come to our rescue:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'void DoSomethingSpecial() {\nDoSomethingElse();\n// Do stuff based on DoSomethingElse\'s success\nConsole::WriteLn( "Success!" );\n}\n\nvoid LoopOfCode() {\ntry {\nwhile( true ) {\nDoSomethingSpecial();\n};\n} catch( Exception:: SpecialFail&& ) {\n\n}\n}\n')),(0,r.kt)("p",null,"The above C++ snippet performs the exact same operation, except now ",(0,r.kt)("em",{parentName:"p"},"no\nconditionals are needed")," . We've traded off the two conditionals per\nloop for the entry/exit code for the ",(0,r.kt)("strong",{parentName:"p"},"try/catch")," block. But the block\nis outside the loop, so it will be run only once. Conditional checks are\none of the slower operations on almost any CPU design, which means if\nthe loop is a busy one which spins frequently this C++ code will\ncertainly be a ",(0,r.kt)("em",{parentName:"p"},"significant")," speedup over the plain jane C version. And\nthat's just with one return code. Adding multiple exception handlers\ndoesn't impact performance at all, so in a case where there are multiple\nreturn codes the C++ exception handling approach shines even brighter."),(0,r.kt)("p",null,"... thus dies the age-old rumor that C++ is slower than C. IT's all in\nhow you wield your sword. Or... well... programming language."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Edit:")," I should add that the basic theory of optimization I'm using\nhere is what I call \"optimizing for the common case.\" It's a process of\nspeeding up the code that's being run more frequently (which in our\nexample above is a typically error-free running loop) by offloading the\nlogic to an area of the code that's run much less frequently (the\nexception handler's entry/exit overhead). It's one of the most powerful\noptimization techniques any programmer can employ."))}h.isMDXComponent=!0}}]);